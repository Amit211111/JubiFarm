Index: app/src/main/java/com/sanket/jubifarm/Livelihood/PS_LandHoldingList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Adapter.Adapter_PS_LandHolding;\r\nimport com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;\r\nimport com.sanket.jubifarm.R;\r\nimport com.sanket.jubifarm.data_base.SqliteHelper;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class PS_LandHoldingList extends AppCompatActivity {\r\n\r\n    ImageButton fab;\r\n\r\n    RecyclerView recyclerView;\r\n    ArrayList<PSLandHoldingPojo> arrayList = new ArrayList<>();\r\n    SqliteHelper sqliteHelper;\r\n\r\n    Context context = this;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_ps_land_holding_list);\r\n        getSupportActionBar().setTitle(\"Land Holding List\");\r\n        fab=findViewById(R.id.fab);\r\n\r\n        sqliteHelper = new SqliteHelper(this);\r\n        recyclerView = findViewById(R.id.rvLandHoldning);\r\n\r\n\r\n        arrayList = sqliteHelper.PSgetRegistrationData(\"\");\r\n        Adapter_PS_LandHolding adapter_ps_landHolding = new Adapter_PS_LandHolding(context, arrayList);\r\n        recyclerView.setHasFixedSize(true);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n        recyclerView.setAdapter(adapter_ps_landHolding);\r\n\r\n\r\n\r\n        fab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                Intent intent1=new Intent(PS_LandHoldingList.this,PS_LandHolding.class);\r\n                startActivity(intent1);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_LandHoldingList.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_LandHoldingList.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_LandHoldingList.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_LandHoldingList.java	(date 1653990956686)
@@ -24,6 +24,7 @@
     RecyclerView recyclerView;
     ArrayList<PSLandHoldingPojo> arrayList = new ArrayList<>();
     SqliteHelper sqliteHelper;
+    String screenType = "";
 
     Context context = this;
 
@@ -37,9 +38,15 @@
         sqliteHelper = new SqliteHelper(this);
         recyclerView = findViewById(R.id.rvLandHoldning);
 
+        Bundle bundle = getIntent().getExtras();
+        if(bundle != null)
+        {
+            screenType = bundle.getString("land", "");
+        }
+
 
         arrayList = sqliteHelper.PSgetRegistrationData("");
-        Adapter_PS_LandHolding adapter_ps_landHolding = new Adapter_PS_LandHolding(context, arrayList);
+        Adapter_PS_LandHolding adapter_ps_landHolding = new Adapter_PS_LandHolding(context, arrayList, screenType);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
         recyclerView.setAdapter(adapter_ps_landHolding);
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/Adapter_PS_LandHolding.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood.Adapter;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.util.Base64;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;\r\nimport com.sanket.jubifarm.Livelihood.LandHoldingDetailsView;\r\nimport com.sanket.jubifarm.R;\r\nimport com.sanket.jubifarm.data_base.SqliteHelper;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\n\r\npublic class Adapter_PS_LandHolding extends RecyclerView.Adapter<Adapter_PS_LandHolding.ViewHolder>\r\n{\r\n\r\n    Context context;\r\n    ArrayList<PSLandHoldingPojo> arrayList;\r\n    private SqliteHelper sqliteHelper;\r\n\r\n    public Adapter_PS_LandHolding(Context context, ArrayList<PSLandHoldingPojo> arrayList) {\r\n        this.context = context;\r\n        this.arrayList = arrayList;\r\n        sqliteHelper=new SqliteHelper(context);\r\n\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public Adapter_PS_LandHolding.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n\r\n        View view = LayoutInflater.from(context).inflate(R.layout.custom_ps_landholding, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull Adapter_PS_LandHolding.ViewHolder holder, @SuppressLint(\"RecyclerView\") int position) {\r\n\r\n\r\n//\r\n        if (arrayList.get(position).getLand_image() != null && arrayList.get(position).getLand_image().length() > 200) {\r\n            byte[] decodedString = Base64.decode(arrayList.get(position).getLand_image(), Base64.NO_WRAP);\r\n            InputStream inputStream = new ByteArrayInputStream(decodedString);\r\n            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\r\n            holder.img_land.setImageBitmap(bitmap);\r\n        } else {\r\n            holder.img_land.setImageResource(R.drawable.apple);\r\n        }\r\n        holder.Land_id.setText(arrayList.get(position).getLand_id());\r\n       // holder.farmer_selection.setText(arrayList.get(position).getFarmer_Selection());\r\n      //holder.land_area.setText(arrayList.get(position).getLand_Area());\r\n       // holder.land_area.setText(arrayList.get(position).getLand_Area()+\" (\"+sqliteHelper.getNameById(\"master\", \"master_name\", \"caption_id\", Integer.parseInt(arrayList.get(position).getLand_unit()))+\")\");\r\n        holder.land_area.setText(arrayList.get(position).getLand_area()+\" (\"+sqliteHelper.getNameById(\"master\", \"master_name\", \"caption_id\", Integer.parseInt(arrayList.get(position).getLand_unit()))+\")\");\r\n        holder.farmer_name.setText(sqliteHelper.getNameById(\"ps_farmer_registration\", \"farmer_name\", \"local_id\", Integer.parseInt(arrayList.get(position).getFarmer_id())));\r\n        holder.land_name.setText(arrayList.get(position).getLand_name());\r\n\r\n      holder.ll_land.setOnClickListener(new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n              Intent intent = new Intent(context,LandHoldingDetailsView.class);\r\n              intent.putExtra(\"land_Id\",arrayList.get(position).getLand_id());\r\n              intent.putExtra(\"farmerId\",arrayList.get(position).getFarmer_id());\r\n              context.startActivity(intent);\r\n          }\r\n      });\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n\r\n        return arrayList.size();\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder{\r\n\r\n        TextView Land_id,land_name,land_area,farmer_name,total_plant;\r\n        ImageView img_land;\r\n        LinearLayout ll_main,ll_land;\r\n\r\n\r\n        public ViewHolder(View view) {\r\n            super(view);\r\n\r\n            land_name= itemView.findViewById(R.id.land_name);\r\n            Land_id= itemView.findViewById(R.id.Land_id);\r\n            land_area= itemView.findViewById(R.id.land_area);\r\n            farmer_name= itemView.findViewById(R.id.farmer_name);\r\n            total_plant= itemView.findViewById(R.id.total_plant);\r\n            img_land= itemView.findViewById(R.id.img_land);\r\n            ll_land= itemView.findViewById(R.id.ll_land);\r\n            ll_main= itemView.findViewById(R.id.ll_main);\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/Adapter_PS_LandHolding.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/Adapter_PS_LandHolding.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/Adapter_PS_LandHolding.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/Adapter_PS_LandHolding.java	(date 1653989741388)
@@ -18,7 +18,10 @@
 
 import com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;
 import com.sanket.jubifarm.Livelihood.LandHoldingDetailsView;
+import com.sanket.jubifarm.Livelihood.NeemPlantation;
+import com.sanket.jubifarm.Livelihood.PS_NeemPlantationList;
 import com.sanket.jubifarm.R;
+import com.sanket.jubifarm.data_base.SharedPrefHelper;
 import com.sanket.jubifarm.data_base.SqliteHelper;
 
 import java.io.ByteArrayInputStream;
@@ -31,11 +34,15 @@
     Context context;
     ArrayList<PSLandHoldingPojo> arrayList;
     private SqliteHelper sqliteHelper;
+    SharedPrefHelper sharedPrefHelper;
+    String screenType = "";
 
-    public Adapter_PS_LandHolding(Context context, ArrayList<PSLandHoldingPojo> arrayList) {
+    public Adapter_PS_LandHolding(Context context, ArrayList<PSLandHoldingPojo> arrayList, String screenType) {
         this.context = context;
         this.arrayList = arrayList;
+        this.screenType = screenType;
         sqliteHelper=new SqliteHelper(context);
+        sharedPrefHelper = new SharedPrefHelper(context);
 
     }
 
@@ -68,13 +75,25 @@
         holder.farmer_name.setText(sqliteHelper.getNameById("ps_farmer_registration", "farmer_name", "local_id", Integer.parseInt(arrayList.get(position).getFarmer_id())));
         holder.land_name.setText(arrayList.get(position).getLand_name());
 
+        screenType = sharedPrefHelper.getString("land", "");
+
       holder.ll_land.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
-              Intent intent = new Intent(context,LandHoldingDetailsView.class);
-              intent.putExtra("land_Id",arrayList.get(position).getLand_id());
-              intent.putExtra("farmerId",arrayList.get(position).getFarmer_id());
-              context.startActivity(intent);
+              if(screenType.equals("land")) {
+                  Intent intent = new Intent(context, LandHoldingDetailsView.class);
+                  intent.putExtra("land_Id", arrayList.get(position).getLand_id());
+                  intent.putExtra("farmerId", arrayList.get(position).getFarmer_id());
+                  context.startActivity(intent);
+              }
+
+
+              else
+              {
+                  screenType = sharedPrefHelper.getString("plantation", "");
+                  Intent intent = new Intent(context, PS_NeemPlantationList.class);
+                  context.startActivity(intent);
+              }
           }
       });
 
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/NeemPlantationAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood.Adapter;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.util.Base64;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;\r\nimport com.sanket.jubifarm.R;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\n\r\npublic class NeemPlantationAdapter extends RecyclerView.Adapter<NeemPlantationAdapter.ViewHolder> {\r\n\r\n    Context context;\r\n    ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos;\r\n\r\n    public NeemPlantationAdapter(Context context, ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos)\r\n    {\r\n        this.context = context;\r\n        this.psNeemPlantationPojos = psNeemPlantationPojos;\r\n    }\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(context).inflate(R.layout.neemplantationresource, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull NeemPlantationAdapter.ViewHolder holder, int position) {\r\n        holder.Land_id.setText(psNeemPlantationPojos.get(position).getLand_id());\r\n        holder.Neem_Id.setText(psNeemPlantationPojos.get(position).getLocal_id());\r\n        holder.geo_cordinate.setText(psNeemPlantationPojos.get(position).getGeo_coordinates());\r\n        if(psNeemPlantationPojos.get(position).getNeem_plantation_image() != null && psNeemPlantationPojos.get(position).getNeem_plantation_image().length() > 200)\r\n        {\r\n            byte[] decodedString = android.util.Base64.decode(psNeemPlantationPojos.get(position).getNeem_plantation_image(), Base64.NO_WRAP);\r\n            InputStream inputStream = new ByteArrayInputStream(decodedString);\r\n            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\r\n            holder.img_setimage.setImageBitmap(bitmap);\r\n        }else {\r\n            holder.img_setimage.setImageResource(R.drawable.ic_baseline_add_24);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return psNeemPlantationPojos.size();\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        ImageView img_setimage;\r\n        TextView Land_id, geo_cordinate, Neem_Id;\r\n        public ViewHolder(View Itemview) {\r\n            super(Itemview);\r\n            img_setimage = Itemview.findViewById(R.id.img_setimage);\r\n            Land_id = Itemview.findViewById(R.id.Land_id);\r\n            Neem_Id = Itemview.findViewById(R.id.Neem_Id);\r\n            geo_cordinate = Itemview.findViewById(R.id.geo_cordinate);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/NeemPlantationAdapter.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/NeemPlantationAdapter.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/NeemPlantationAdapter.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/Adapter/NeemPlantationAdapter.java	(date 1653982712084)
@@ -1,6 +1,7 @@
 package com.sanket.jubifarm.Livelihood.Adapter;
 
 import android.content.Context;
+import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.util.Base64;
@@ -11,9 +12,11 @@
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.cardview.widget.CardView;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;
+import com.sanket.jubifarm.Livelihood.NeemMonitoring;
 import com.sanket.jubifarm.R;
 
 import java.io.ByteArrayInputStream;
@@ -24,11 +27,13 @@
 
     Context context;
     ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos;
+    public String screenType;
 
     public NeemPlantationAdapter(Context context, ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos)
     {
         this.context = context;
         this.psNeemPlantationPojos = psNeemPlantationPojos;
+        this.screenType = screenType;
     }
     @NonNull
     @Override
@@ -49,8 +54,16 @@
             Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
             holder.img_setimage.setImageBitmap(bitmap);
         }else {
-            holder.img_setimage.setImageResource(R.drawable.ic_baseline_add_24);
+            holder.img_setimage.setImageResource(R.drawable.neem);
         }
+
+        holder.cv_student_listing.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Intent intent = new Intent(context, NeemMonitoring.class);
+                context.startActivity(intent);
+            }
+        });
     }
 
     @Override
@@ -60,13 +73,15 @@
 
     public class ViewHolder extends RecyclerView.ViewHolder {
         ImageView img_setimage;
+        CardView cv_student_listing;
         TextView Land_id, geo_cordinate, Neem_Id;
         public ViewHolder(View Itemview) {
             super(Itemview);
+            cv_student_listing = Itemview.findViewById(R.id.cv_student_listing);
             img_setimage = Itemview.findViewById(R.id.img_setimage);
             Land_id = Itemview.findViewById(R.id.Land_id);
             Neem_Id = Itemview.findViewById(R.id.Neem_Id);
             geo_cordinate = Itemview.findViewById(R.id.geo_cordinate);
         }
     }
-}
\ No newline at end of file
+}
Index: app/src/main/res/layout/activity_neem_monitoring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    tools:context=\".Livelihood.NeemMonitoring\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/ll_filter\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"@dimen/margin50\"\r\n        android:background=\"#292929\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/ChildCoun\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n            android:paddingLeft=\"@dimen/_2dp\"\r\n            android:text=\"@string/Total\"\r\n            android:textColor=\"#FFF\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/PlantCount\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n            android:text=\"\"\r\n            android:textColor=\"#FFF\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:gravity=\"right\"\r\n            android:padding=\"@dimen/_2dp\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/cropplaning_filter\"\r\n                android:layout_width=\"30dp\"\r\n                android:layout_height=\"@dimen/_30dp\"\r\n                android:layout_marginRight=\"@dimen/_5dp\"\r\n                android:gravity=\"right\"\r\n                android:padding=\"@dimen/_5dp\"\r\n                android:src=\"@drawable/filter\" />\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/rec_cropmonetoring\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_below=\"@+id/ll_filter\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tv_no_data\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:gravity=\"center\"\r\n        android:visibility=\"gone\"\r\n        android:layout_centerInParent=\"true\"\r\n        android:textSize=\"@dimen/text_14\"\r\n        android:text=\"@string/no_data_found\"\r\n        />\r\n\r\n    <com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton\r\n        android:id=\"@+id/fab_visit_plant\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentEnd=\"true\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:layout_gravity=\"end|bottom\"\r\n        android:layout_margin=\"16dp\"\r\n        android:visibility=\"gone\"\r\n        android:theme=\"@style/MyMaterialTheme\"\r\n        android:background=\"@drawable/btn_submit_background\"\r\n        android:contentDescription=\"@string/visit_plant\"\r\n        android:paddingStart=\"@dimen/margin50\"\r\n        android:paddingTop=\"@dimen/margin15\"\r\n        android:paddingEnd=\"@dimen/margin50\"\r\n        android:paddingBottom=\"@dimen/margin15\"\r\n        android:text=\"@string/visit_plant\"\r\n        android:textAllCaps=\"false\"\r\n        android:textColor=\"@color/white\" />\r\n\r\n\r\n\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_neem_monitoring.xml b/app/src/main/res/layout/activity_neem_monitoring.xml
--- a/app/src/main/res/layout/activity_neem_monitoring.xml	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/res/layout/activity_neem_monitoring.xml	(date 1653995083244)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
@@ -7,90 +7,328 @@
     android:orientation="vertical"
     tools:context=".Livelihood.NeemMonitoring">
 
-    <LinearLayout
-        android:id="@+id/ll_filter"
-        android:layout_width="match_parent"
-        android:layout_height="@dimen/margin50"
-        android:background="#292929"
-        android:orientation="horizontal">
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:layout_marginTop="@dimen/_8dp"
+                android:weightSum="2">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="200dp"
+                    android:layout_marginHorizontal="10dp"
+                    android:layout_weight="1"
+                    android:orientation="vertical">
+
+
+                    <ImageView
+                        android:id="@+id/img_setimage"
+                        android:layout_width="match_parent"
+                        android:layout_height="180dp"
+                        android:gravity="center"
+                        android:padding="5dp"
+                        android:src="@drawable/prev" />
+
+
+                </LinearLayout>
+
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:gravity="center"
+                    android:layout_weight="1"
+                    android:orientation="vertical">
+
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:orientation="vertical"
+                        android:weightSum="2">
+
+
+
+                        <LinearLayout
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:layout_marginHorizontal="5dp"
+                            android:layout_marginTop="30dp"
+                            android:layout_weight="1"
+                            android:orientation="vertical">
+
+
+
+                            <TextView
+                                android:id="@+id/CLICKIMAGE"
+                                android:layout_width="match_parent"
+                                android:layout_height="55dp"
+                                android:layout_gravity="center"
+                                android:background="@drawable/editplant"
+                                android:fontFamily="@font/itcavantagradestdbk"
+                                android:gravity="center"
+                                android:text="@string/TAKE_PICTURE_OF_CROP"
+                                android:textColor="@color/white"
+                                android:textSize="12sp" />
+
+
+                        </LinearLayout>
+
+                    </LinearLayout>
+
+
+                </LinearLayout>
+
+
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="vertical"
+                android:padding="@dimen/_10dp">
+
+
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginHorizontal="10dp"
+                    android:layout_marginTop="10dp"
+                    android:weightSum="2"
+                    android:orientation="horizontal">
 
-        <TextView
-            android:id="@+id/ChildCoun"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:fontFamily="@font/itcavantagradestdbk"
-            android:paddingLeft="@dimen/_2dp"
-            android:text="@string/Total"
-            android:textColor="#FFF"
-            android:textStyle="bold" />
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center"
+                        android:layout_weight="1"
+                        android:orientation="vertical">
+
+
+                        <TextView
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:fontFamily="@font/itcavantagradestdbk"
+                            android:text="@string/Land"
+                            android:textColor="@android:color/darker_gray"
+                            android:textSize="@dimen/text_15" />
+
+
+                    </LinearLayout>
+
+
+
+
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center"
+                        android:layout_weight="1"
+                        android:orientation="vertical">
+
+
+                        <Spinner
+                            android:id="@+id/spnLandSelection"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:layout_marginTop="2dp"
+                            android:drawSelectorOnTop="true" />
+
+                        />
+                    </LinearLayout>
+                </LinearLayout>
+
 
-        <TextView
-            android:id="@+id/PlantCount"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:fontFamily="@font/itcavantagradestdbk"
-            android:text=""
-            android:textColor="#FFF"
-            android:textStyle="bold" />
+
+
+
+
+                <LinearLayout
+                    android:id="@+id/ll_date"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="vertical">
+
+
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginHorizontal="10dp"
+                        android:layout_marginTop="10dp"
+                        android:weightSum="2"
+                        android:orientation="horizontal">
+
+                        <LinearLayout
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:layout_gravity="center"
+                            android:layout_weight="1"
+                            android:orientation="vertical">
+
+                            <TextView
+                                android:layout_width="match_parent"
+                                android:layout_height="wrap_content"
+                                android:fontFamily="@font/itcavantagradestdbk"
+                                android:text="Monitoring Date"
+                                android:textColor="@android:color/darker_gray"
+                                android:textSize="@dimen/text_15" />
+
+
+                        </LinearLayout>
+
+
+
 
-        <LinearLayout
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:gravity="right"
-            android:padding="@dimen/_2dp">
+                        <LinearLayout
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:layout_gravity="center"
+                            android:layout_weight="1"
+                            android:orientation="vertical">
+
+                            <EditText
+                                android:id="@+id/et_monitoring_date"
+                                android:layout_width="match_parent"
+                                android:layout_height="wrap_content"
+                                android:background="@drawable/textviewboader"
+                                android:drawableRight="@drawable/ic_baseline_date_range_24"
+                                />
+                        </LinearLayout>
 
-            <ImageView
-                android:id="@+id/cropplaning_filter"
-                android:layout_width="30dp"
-                android:layout_height="@dimen/_30dp"
-                android:layout_marginRight="@dimen/_5dp"
-                android:gravity="right"
-                android:padding="@dimen/_5dp"
-                android:src="@drawable/filter" />
-        </LinearLayout>
-    </LinearLayout>
+
+                    </LinearLayout>
+
+
+                </LinearLayout>
 
-    <androidx.recyclerview.widget.RecyclerView
-        android:id="@+id/rec_cropmonetoring"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_below="@+id/ll_filter" />
+
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginHorizontal="10dp"
+                    android:layout_marginTop="10dp"
+                    android:weightSum="2"
+                    android:orientation="horizontal">
+
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:orientation="vertical">
+
 
-    <TextView
-        android:id="@+id/tv_no_data"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:gravity="center"
-        android:visibility="gone"
-        android:layout_centerInParent="true"
-        android:textSize="@dimen/text_14"
-        android:text="@string/no_data_found"
-        />
+                        <TextView
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:fontFamily="@font/itcavantagradestdbk"
+                            android:text="@string/Remarks"
+                            android:textColor="@android:color/darker_gray"
+                            android:textSize="@dimen/text_15" />
+
+
+                    </LinearLayout>
+
+
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="27dp"
+                        android:layout_gravity="center"
+                        android:layout_weight="1"
+                        android:background="@android:color/white"
+                        android:orientation="vertical">
+
+                        <LinearLayout
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:orientation="horizontal"
+                            android:weightSum="2">
+
+                            <LinearLayout
+                                android:layout_width="match_parent"
+                                android:layout_height="wrap_content"
+                                android:layout_weight="1"
+                                android:orientation="vertical">
+
+                                <EditText
+                                    android:id="@+id/remarks"
+                                    android:layout_width="match_parent"
+                                    android:layout_height="28dp"
+                                    android:background="@drawable/textviewboader"
+                                    android:gravity="center"
+                                    android:inputType="number"
+                                    android:paddingLeft="3dp"
+                                    android:textColor="@android:color/black"
+                                    android:textSize="@dimen/text_12" />
+
+                            </LinearLayout>
+
+                            <!--                <LinearLayout-->
+                            <!--                    android:layout_width="match_parent"-->
+                            <!--                    android:layout_height="wrap_content"-->
+                            <!--                    android:layout_weight="1"-->
+                            <!--                    android:background="#5BC236"-->
+                            <!--                    android:orientation="vertical">-->
+
+                            <!--                    <TextView-->
+                            <!--                        android:layout_width="match_parent"-->
+                            <!--                        android:layout_height="27dp"-->
 
-    <com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton
-        android:id="@+id/fab_visit_plant"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentEnd="true"
-        android:layout_alignParentBottom="true"
-        android:layout_gravity="end|bottom"
-        android:layout_margin="16dp"
-        android:visibility="gone"
-        android:theme="@style/MyMaterialTheme"
-        android:background="@drawable/btn_submit_background"
-        android:contentDescription="@string/visit_plant"
-        android:paddingStart="@dimen/margin50"
-        android:paddingTop="@dimen/margin15"
-        android:paddingEnd="@dimen/margin50"
-        android:paddingBottom="@dimen/margin15"
-        android:text="@string/visit_plant"
-        android:textAllCaps="false"
-        android:textColor="@color/white" />
+
+                            <!--                        android:gravity="center"-->
+                            <!--                        android:text="Geo Cordinates"-->
+                            <!--                        android:textColor="@android:color/white"-->
+                            <!--                        android:textSize="10sp"/>-->
+
+                            <!--                </LinearLayout>-->
+
+                        </LinearLayout>
+                    </LinearLayout>
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginHorizontal="10dp"
+                    android:layout_marginTop="@dimen/margin70"
+                    android:orientation="vertical">
+
+                    <Button
+                        android:id="@+id/btn_submit"
+                        android:layout_width="match_parent"
+                        android:layout_height="40dp"
+
+
+                        android:layout_marginHorizontal="@dimen/_20dp"
+                        android:background="@drawable/buttanshape"
+                        android:fontFamily="@font/itcavantagradestdbk"
+                        android:text="@string/Submit"
+                        android:textColor="@color/white"
+                        android:textSize="@dimen/text_15" />
 
+
+                </LinearLayout>
+            </LinearLayout>
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginHorizontal="10dp"
+                android:orientation="vertical">
+
+
+
+            </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
 
 
 
-</RelativeLayout>
\ No newline at end of file
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/PS_Neem_LandHolding_List.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Adapter.Adapter_PS_LandHolding;\r\nimport com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;\r\nimport com.sanket.jubifarm.R;\r\nimport com.sanket.jubifarm.data_base.SqliteHelper;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class PS_Neem_LandHolding_List extends AppCompatActivity {\r\n    RecyclerView recyclerView;\r\n    ArrayList<PSLandHoldingPojo> arrayList = new ArrayList<>();\r\n    SqliteHelper sqliteHelper;\r\n\r\n    Context context = this;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_ps_neem_land_holding_list2);\r\n\r\n        sqliteHelper = new SqliteHelper(this);\r\n        recyclerView = findViewById(R.id.rvLandHoldning1);\r\n\r\n\r\n       arrayList = sqliteHelper.PSgetRegistrationData(\"\");\r\n        Adapter_PS_LandHolding adapter_ps_landHolding = new Adapter_PS_LandHolding(context, arrayList);\r\n        recyclerView.setHasFixedSize(true);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n        recyclerView.setAdapter(adapter_ps_landHolding);\r\n\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_Neem_LandHolding_List.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_Neem_LandHolding_List.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_Neem_LandHolding_List.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_Neem_LandHolding_List.java	(date 1653990956559)
@@ -18,7 +18,7 @@
     RecyclerView recyclerView;
     ArrayList<PSLandHoldingPojo> arrayList = new ArrayList<>();
     SqliteHelper sqliteHelper;
-
+    String screenType = "";
     Context context = this;
 
     @Override
@@ -26,12 +26,19 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_ps_neem_land_holding_list2);
 
+        Bundle bundle = getIntent().getExtras();
+        if(bundle != null)
+        {
+            screenType = bundle.getString("monitoring", "");
+        }
+
         sqliteHelper = new SqliteHelper(this);
         recyclerView = findViewById(R.id.rvLandHoldning1);
 
 
+
        arrayList = sqliteHelper.PSgetRegistrationData("");
-        Adapter_PS_LandHolding adapter_ps_landHolding = new Adapter_PS_LandHolding(context, arrayList);
+        Adapter_PS_LandHolding adapter_ps_landHolding = new Adapter_PS_LandHolding(context, arrayList, screenType);
         recyclerView.setHasFixedSize(true);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
         recyclerView.setAdapter(adapter_ps_landHolding);
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/NeemMonitoring.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport com.sanket.jubifarm.R;\r\n\r\npublic class NeemMonitoring extends AppCompatActivity {\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_neem_monitoring);\r\n        getSupportActionBar().setTitle(\"Neem Monitoring\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemMonitoring.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemMonitoring.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemMonitoring.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemMonitoring.java	(date 1653996018978)
@@ -1,18 +1,200 @@
 package com.sanket.jubifarm.Livelihood;
 
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.recyclerview.widget.RecyclerView;
 
+import android.app.DatePickerDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Color;
 import android.os.Bundle;
+import android.provider.MediaStore;
+import android.util.Base64;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.Spinner;
 
+import com.rey.material.widget.Button;
+import com.rey.material.widget.TextView;
+import com.sanket.jubifarm.Livelihood.Model.Neem_Monitoring_Pojo;
+import com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;
 import com.sanket.jubifarm.R;
+import com.sanket.jubifarm.data_base.SqliteHelper;
+
+import java.io.ByteArrayOutputStream;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.HashMap;
 
 public class NeemMonitoring extends AppCompatActivity {
 
+    Button btn_submit;
+    ImageView img_setimage;
+    Spinner spnLandSelection;
+    TextView CLICKIMAGE;
+    EditText et_monitoring_date, remarks, neem_id;
+    private int land_id = 0;
+    ArrayList<String> landArrayList;
+    HashMap<String, Integer> landName;
+    EditText et_plant_date;
+    String base64;
+
+    boolean isEditable = false;
+    private Context context = this;
+
+    private static final int CAMERA_REQUEST = 1888;
+    SqliteHelper sqliteHelper;
+    Neem_Monitoring_Pojo neem_monitoring;
+    int mYear, mMonth, mDay, year, month, day;
+    DatePickerDialog datePickerDialog;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_neem_monitoring);
         getSupportActionBar().setTitle("Neem Monitoring");
+        img_setimage = findViewById(R.id.img_setimage);
+        spnLandSelection = findViewById(R.id.spnLandSelection);
+        et_monitoring_date = findViewById(R.id.et_monitoring_date);
+        remarks = findViewById(R.id.remarks);
+        CLICKIMAGE =(TextView) findViewById(R.id.CLICKIMAGE);
+        btn_submit = findViewById(R.id.btn_submit);
+        landArrayList = new ArrayList<>();
+        setLandSpinner();
+
+
+        sqliteHelper = new SqliteHelper(getApplicationContext());
+
+        et_plant_date.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+
+                et_plant_date.setError(null);
+                et_plant_date.clearFocus();
+                mYear = year;
+                mMonth = month;
+                mDay = day;
+
+                final Calendar c = Calendar.getInstance();
+                mYear = c.get(Calendar.YEAR); // current year
+                mMonth = c.get(Calendar.MONTH); // current month
+                mDay = c.get(Calendar.DAY_OF_MONTH); // current day
+                datePickerDialog = new DatePickerDialog(NeemMonitoring.this,
+                        new DatePickerDialog.OnDateSetListener() {
+                            @Override
+                            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
+                                et_plant_date.setText("" + dayOfMonth + "-" + (monthOfYear + 1) + "-" + year);
+
+                            }
+                        }, mYear, mMonth, mDay);
+                datePickerDialog.show();
+                datePickerDialog.getButton(DatePickerDialog.BUTTON_NEGATIVE).setTextColor(Color.GRAY);
+                datePickerDialog.getButton(DatePickerDialog.BUTTON_POSITIVE).setTextColor(Color.parseColor("#ff173e6d"));
+            }
+        });
+
+
+        CLICKIMAGE.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+                startActivityForResult(intent, CAMERA_REQUEST);
+            }
+        });
+
+
+        btn_submit.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                neem_monitoring = new Neem_Monitoring_Pojo();
+                neem_monitoring.setLand_id(spnLandSelection.getSelectedItem().toString().trim());
+                neem_monitoring.setLocal_id(neem_id.getText().toString().trim());
+                neem_monitoring.setMonitoring_date(et_monitoring_date.getText().toString().trim());
+                neem_monitoring.setNeem_monitoring_image(base64);
+                neem_monitoring.setRemarks(remarks.getText().toString().trim());
+                sqliteHelper.AddneemMonitoring(neem_monitoring);
+
+                Intent intent = new Intent(NeemMonitoring.this, ParyavaranSakhiHome.class);
+                startActivity(intent);
+            }
+        });
+
+    }
+
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (requestCode == CAMERA_REQUEST) {
+            Bitmap photo = (Bitmap) data.getExtras().get("data");
+            ByteArrayOutputStream stream = new ByteArrayOutputStream();
+            photo.compress(Bitmap.CompressFormat.JPEG, 100, stream);
+            byte[] bytes = stream.toByteArray();
+//
+            base64 = encodeTobase64(photo);
+            img_setimage.setImageBitmap(photo);
+        }
+
+    }
+
+    private String encodeTobase64(Bitmap image) {
+        ByteArrayOutputStream byteArrayOS = null;
+        try {
+            System.gc();
+            byteArrayOS = new ByteArrayOutputStream();
+            image.compress(Bitmap.CompressFormat.JPEG, 20, byteArrayOS);
+        } catch (OutOfMemoryError e) {
+            e.printStackTrace();
+            image.compress(Bitmap.CompressFormat.JPEG, 20, byteArrayOS);
+        }
+        return Base64.encodeToString(byteArrayOS.toByteArray(), Base64.NO_WRAP);
+    }
+
+    private void setLandSpinner() {
+        landArrayList.clear();
+        landName = sqliteHelper.getAllPSLAND();
+
+        for (int i = 0; i < landName.size(); i++) {
+            landArrayList.add(landName.keySet().toArray()[i].toString().trim());
+        }
+        if (isEditable) {
+            //farmarArrayList.add(0, farmer_name);
+        } else {
+            landArrayList.add(0, getString(R.string.select_farmer));
+        }
+        final ArrayAdapter arrayAdapter = new ArrayAdapter(this, R.layout.spinner_list, landArrayList);
+        arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        spnLandSelection.setAdapter(arrayAdapter);
+        if (isEditable) {
+            int spinnerPosition = 0;
+            Integer strpos1 = land_id;
+            if (strpos1 != null || !strpos1.equals(null) || !strpos1.equals("")) {
+                strpos1 = land_id;
+                spinnerPosition = arrayAdapter.getPosition(strpos1);
+                spnLandSelection.setSelection(spinnerPosition);
+                spinnerPosition = 0;
+            }
+        }
+
+        spnLandSelection.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                if (!spnLandSelection.getSelectedItem().toString().trim().equalsIgnoreCase(getString(R.string.select_farmer))) {
+                    if (spnLandSelection.getSelectedItem().toString().trim() != null) {
+                        land_id = landName.get(spnLandSelection.getSelectedItem().toString().trim());
+                    }
+                }
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parent) {
+
+            }
+        });
+
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/ParyavaranSakhiHome.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\n\r\nimport com.sanket.jubifarm.R;\r\n\r\npublic class ParyavaranSakhiHome extends AppCompatActivity {\r\n    TextView farmer,tv_neem_plantation,txt_LandHolding,txt_Monitoring,txt_Syncronize;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_paryavaran_sakhi_home);\r\n        getSupportActionBar().setTitle(\"Home\");\r\n\r\n        farmer =findViewById(R.id.farmer);\r\n        tv_neem_plantation = findViewById(R.id.tv_neem_plantation);\r\n        txt_LandHolding = findViewById(R.id.txt_LandHolding);\r\n        txt_Monitoring=findViewById(R.id.txt_Monitoring);\r\n        txt_Syncronize=findViewById(R.id.txt_Syncronize);\r\n        tv_neem_plantation.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(ParyavaranSakhiHome.this,NeemPlantation.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        txt_LandHolding.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(ParyavaranSakhiHome.this,PS_LandHolding.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        farmer.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                Intent intent=new Intent(ParyavaranSakhiHome.this,FarmerRecycle.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        tv_neem_plantation.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent1=new Intent(ParyavaranSakhiHome.this,PS_NeemPlantationList.class);\r\n                startActivity(intent1);\r\n            }\r\n        });\r\n        txt_LandHolding.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent1=new Intent(ParyavaranSakhiHome.this,PS_LandHoldingList.class);\r\n                startActivity(intent1);\r\n            }\r\n        });\r\n        txt_Monitoring.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent2=new Intent(ParyavaranSakhiHome.this,PS_Neem_LandHolding_List.class);\r\n                startActivity(intent2);\r\n            }\r\n        });\r\n        txt_Syncronize.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent1=new Intent(ParyavaranSakhiHome.this,PS_Synchronize.class);\r\n                startActivity(intent1);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/ParyavaranSakhiHome.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/ParyavaranSakhiHome.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/ParyavaranSakhiHome.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/ParyavaranSakhiHome.java	(date 1653990801923)
@@ -8,9 +8,12 @@
 import android.widget.TextView;
 
 import com.sanket.jubifarm.R;
+import com.sanket.jubifarm.data_base.SharedPrefHelper;
 
 public class ParyavaranSakhiHome extends AppCompatActivity {
     TextView farmer,tv_neem_plantation,txt_LandHolding,txt_Monitoring,txt_Syncronize;
+    boolean sharedPrefHelper;
+    String screenType = "";
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -31,13 +34,14 @@
             }
         });
 
-        txt_LandHolding.setOnClickListener(new View.OnClickListener() {
+     /*   txt_LandHolding.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
+
                 Intent intent = new Intent(ParyavaranSakhiHome.this,PS_LandHolding.class);
                 startActivity(intent);
             }
-        });
+        });*/
 
         farmer.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -58,13 +62,16 @@
             @Override
             public void onClick(View view) {
                 Intent intent1=new Intent(ParyavaranSakhiHome.this,PS_LandHoldingList.class);
+                /*screenType = sharedPrefHelper.getString("land", "");*/
+                screenType.equals("land");
                 startActivity(intent1);
             }
         });
         txt_Monitoring.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                Intent intent2=new Intent(ParyavaranSakhiHome.this,PS_Neem_LandHolding_List.class);
+                Intent intent2=new Intent(ParyavaranSakhiHome.this,PS_LandHoldingList.class);
+               /* screenType = sharedPrefHelper.getString("plantation", "");*/
                 startActivity(intent2);
             }
         });
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.sanket.jubifarm\"\r\n    android:targetSandboxVersion=\"1\"\r\n    tools:ignore=\"UnusedAttribute\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_INTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\r\n    <uses-permission android:name=\"android.permission.STORAGE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\r\n    <uses-feature android:name=\"android.hardware.camera.front\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera\"\r\n        android:required=\"true\" />\r\n\r\n    <application\r\n        android:allowBackup=\"false\"\r\n        android:icon=\"@drawable/app_icon\"\r\n        android:label=\"@string/app_name\"\r\n        android:largeHeap=\"true\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:requestLegacyExternalStorage=\"true\"\r\n        android:roundIcon=\"@drawable/app_icon\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning,UnusedAttribute\"\r\n        tools:replace=\"android:allowBackup\">\r\n        <activity\r\n            android:name=\".Livelihood.PS_FarmerDetailsActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".Livelihood.PS_Farmer_details\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".Livelihood.TrainningSurveyForm\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.LandHoldingDetailsView\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.Skill_Tracking_List\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.PS_Neem_LandHolding_List\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.PS_Synchronize\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.PS_LandHoldingList\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.PS_NeemPlantationList\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.FarmerRecycle\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.FarmerRegistrationForm\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.PS_LandHolding\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.NeemMonitoring\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.NeemPlantation\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.SkillTracking\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.ParyavaranSakhiHome\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Livelihood.MainMenu\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Activity.UpdatedSoilInFo\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.SoilInFoListActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropSaleSubActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.AboutUs\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.Disclaimer\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.ViewCropActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.HelplineMenu\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.InputOrderingHome\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.VisitPlant\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.SelectCropActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.View_Attendance\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.SubMonitoring\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Supplyer.Supplayer_otp\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.VendorList\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/MyMaterialTheme\" />\r\n        <activity\r\n            android:name=\".Activity.ChangePassword\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.OtpScreen\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\"com.yalantis.ucrop.UCropActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.sanket.jubifarm.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\"\r\n            tools:replace=\"android:authorities\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\"\r\n                tools:replace=\"android:resource\" />\r\n        </provider>\r\n\r\n        <activity\r\n            android:name=\".Activity.VendorRegistration\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.QueryViewActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.AddQueryActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.QueryListActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.ViewGrowthActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.PlantViewActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropDetalsInPut\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropDetails\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropSaleDetails\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.PlantGrowthListActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.SubCropPlaninigActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.AddPlantGrowthActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.ForgotPasswordActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.InputOrdiringListActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.ViewLandActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.LandHoldingActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.TranningDetails\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.FarmerDeatilActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.SyncDataActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropDetailActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropMonitoring\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.InPutOrdiringActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.RegistrationListActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.TrainingActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.SubPlantationActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.PostPlantationAcivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.KnowledgeActivity\"\r\n            android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode\" />\r\n        <activity\r\n            android:name=\".Activity.HelpLineActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.HomeAcivity\"\r\n            android:parentActivityName=\".Livelihood.MainMenu\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.AddPlantAcivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.AddLandActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.LoginScreenActivity\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.FarmerRegistration\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.CropPlanning\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity\r\n            android:name=\".Activity.AddTranner\"\r\n            android:screenOrientation=\"portrait\" />\r\n        <activity android:name=\".Activity.SplashScreen\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity> <!-- firebase -->\r\n        <service\r\n            android:name=\".service.MyFirebaseMessagingService\"\r\n            android:directBootAware=\"true\"\r\n            android:exported=\"false\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n                <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\r\n            </intent-filter>\r\n        </service>\r\n        <service android:name=\".service.MyFirebaseInstanceIDService\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.INSTANCE_ID_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n        <service\r\n            android:name=\".service.MyJobService\"\r\n            android:exported=\"false\"\r\n            android:permission=\"android.permission.BIND_JOB_SERVICE\" />\r\n\r\n        <receiver android:name=\".receiver.MyAlarmReceiver\" /> <!-- firebase notification -->\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_icon\"\r\n            android:resource=\"@drawable/app_icon\" />\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_color\"\r\n            android:resource=\"@color/colorAccent\" />\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\r\n            android:value=\"@string/default_notification_channel_id\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/AndroidManifest.xml	(date 1653984936340)
@@ -36,12 +36,11 @@
         android:usesCleartextTraffic="true"
         tools:ignore="GoogleAppIndexingWarning,UnusedAttribute"
         tools:replace="android:allowBackup">
+
         <activity
             android:name=".Livelihood.PS_FarmerDetailsActivity"
             android:exported="true" />
-        <activity
-            android:name=".Livelihood.PS_Farmer_details"
-            android:exported="true" />
+
         <activity
             android:name=".Livelihood.TrainningSurveyForm"
             android:exported="false" />
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/Model/Neem_Monitoring_Pojo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/Neem_Monitoring_Pojo.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/Neem_Monitoring_Pojo.java
new file mode 100644
--- /dev/null	(date 1653987146000)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/Neem_Monitoring_Pojo.java	(date 1653987146000)
@@ -0,0 +1,88 @@
+package com.sanket.jubifarm.Livelihood.Model;
+
+public class Neem_Monitoring_Pojo {
+
+    private String local_id;
+    private String id;
+    private String land_id;
+    private String neem_id;
+    private String monitoring_date;
+    private String neem_monitoring_image;
+    private String remarks;
+
+    public String getLocal_id() {
+        return local_id;
+    }
+
+    public void setLocal_id(String local_id) {
+        this.local_id = local_id;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getLand_id() {
+        return land_id;
+    }
+
+    public void setLand_id(String land_id) {
+        this.land_id = land_id;
+    }
+
+    public String getNeem_id() {
+        return neem_id;
+    }
+
+    public void setNeem_id(String neem_id) {
+        this.neem_id = neem_id;
+    }
+
+    public String getMonitoring_date() {
+        return monitoring_date;
+    }
+
+    public void setMonitoring_date(String monitoring_date) {
+        this.monitoring_date = monitoring_date;
+    }
+
+    public String getNeem_monitoring_image() {
+        return neem_monitoring_image;
+    }
+
+    public void setNeem_monitoring_image(String neem_monitoring_image) {
+        this.neem_monitoring_image = neem_monitoring_image;
+    }
+
+    public String getRemarks() {
+        return remarks;
+    }
+
+    public void setRemarks(String remarks) {
+        this.remarks = remarks;
+    }
+
+    private static final String TABLE_NAME = "neem_monitoring";
+    private static final String COLUMN_LOCAL_ID = "local_id";
+    private static final String COLUMN_ID = "id";
+    private static final String COLUMN_LAND_ID = "land_id";
+    private static final String COLUMN_NEEM_ID = "neem_id";
+    private static final String COLUMN_MONITORING_DATE = "monitoring_date";
+    private static final String COLUMN_NEEM_MONITORING_IMAGE = "neem_monitoring_image";
+    private static final String COLUMN_REMARKS = "remarks";
+
+    public static final String CREATE_TABLE = " CREATE TABLE " + TABLE_NAME + "("
+            + COLUMN_LOCAL_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
+            + COLUMN_ID + " INTEGER, "
+            + COLUMN_LAND_ID + " TEXT, "
+            + COLUMN_NEEM_ID + " TEXT, "
+            + COLUMN_MONITORING_DATE + " TEXT, "
+            + COLUMN_NEEM_MONITORING_IMAGE + " TEXT, "
+            + COLUMN_REMARKS + " TEXT "
+            + ")";
+
+}
Index: app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.data_base;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.SQLException;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\nimport android.util.Log;\r\n\r\n\r\n\r\nimport com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;\r\nimport com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;\r\nimport com.sanket.jubifarm.Livelihood.Model.ParyavaranSakhiRegistrationPojo;\r\nimport com.sanket.jubifarm.Livelihood.Model.SkillTrackingPojo;\r\nimport com.sanket.jubifarm.Modal.AboutUs;\r\nimport com.sanket.jubifarm.Modal.Attendance_Approval;\r\nimport com.sanket.jubifarm.Modal.BlockPojo;\r\nimport com.sanket.jubifarm.Modal.CropPlaningPojo;\r\nimport com.sanket.jubifarm.Modal.CropTypePojo;\r\nimport com.sanket.jubifarm.Modal.CropVegitableDetails;\r\nimport com.sanket.jubifarm.Modal.Crop_Type_Status;\r\nimport com.sanket.jubifarm.Modal.DisclaimerPojo;\r\nimport com.sanket.jubifarm.Modal.DistrictPojo;\r\nimport com.sanket.jubifarm.Modal.FarmerFamilyPojo;\r\nimport com.sanket.jubifarm.Modal.FarmerRegistrationPojo;\r\nimport com.sanket.jubifarm.Modal.HelplinePojo;\r\nimport com.sanket.jubifarm.Modal.InputOrderingPojo;\r\nimport com.sanket.jubifarm.Modal.InputOrderingVendor;\r\nimport com.sanket.jubifarm.Modal.KnowledgePojo;\r\nimport com.sanket.jubifarm.Modal.LandHoldingPojo;\r\nimport com.sanket.jubifarm.Modal.MasterPojo;\r\nimport com.sanket.jubifarm.Modal.MasterTypePojo;\r\nimport com.sanket.jubifarm.Modal.PlantGrowthModal;\r\nimport com.sanket.jubifarm.Modal.PlantGrowthPojo;\r\nimport com.sanket.jubifarm.Modal.PlantSubCategoryPojo;\r\nimport com.sanket.jubifarm.Modal.PostPlantationPojo;\r\nimport com.sanket.jubifarm.Modal.ProductionDetailsPojo;\r\nimport com.sanket.jubifarm.Modal.SaleDetailsPojo;\r\nimport com.sanket.jubifarm.Modal.SoilPojo;\r\nimport com.sanket.jubifarm.Modal.StatePojo;\r\nimport com.sanket.jubifarm.Modal.SubPlantationPojo;\r\nimport com.sanket.jubifarm.Modal.SupplierRegistrationPojo;\r\nimport com.sanket.jubifarm.Modal.TrainingAttandancePojo;\r\nimport com.sanket.jubifarm.Modal.TrainingPojo;\r\nimport com.sanket.jubifarm.Modal.UserTypePojo;\r\nimport com.sanket.jubifarm.Modal.UsersPojo;\r\nimport com.sanket.jubifarm.Modal.VendorRegModal;\r\nimport com.sanket.jubifarm.Modal.VillagePojo;\r\nimport com.sanket.jubifarm.Modal.VisitPlantModel;\r\n\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.io.File;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\n\r\npublic class SqliteHelper extends SQLiteOpenHelper {\r\n    static final String DATABASE_NAME = \"jubi_farm.db\";\r\n    static final int DATABASE_VERSION = 5;\r\n    String DB_PATH_SUFFIX = \"/databases/\";\r\n    int version;\r\n    Context ctx;\r\n    SharedPrefHelper sharedPrefHelper;\r\n\r\n    public SqliteHelper(@Nullable Context context) {\r\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\r\n        ctx = context;\r\n        sharedPrefHelper = new SharedPrefHelper(context);\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase db) {\r\n        db.execSQL(UsersPojo.CREATE_TABLE);\r\n        db.execSQL(FarmerFamilyPojo.CREATE_TABLE);\r\n        db.execSQL(SupplierRegistrationPojo.CREATE_TABLE);\r\n        db.execSQL(UserTypePojo.CREATE_TABLE);\r\n        db.execSQL(CropPlaningPojo.CREATE_TABLE);\r\n        db.execSQL(InputOrderingPojo.CREATE_TABLE);\r\n        db.execSQL(InputOrderingVendor.CREATE_TABLE);\r\n        db.execSQL(ProductionDetailsPojo.CREATE_TABLE);\r\n        db.execSQL(SaleDetailsPojo.CREATE_TABLE);\r\n        db.execSQL(TrainingAttandancePojo.CREATE_TABLE);\r\n        db.execSQL(KnowledgePojo.CREATE_TABLE);\r\n        db.execSQL(SubPlantationPojo.CREATE_TABLE);\r\n        db.execSQL(PostPlantationPojo.CREATE_TABLE);\r\n        db.execSQL(PlantGrowthPojo.CREATE_TABLE);\r\n        db.execSQL(HelplinePojo.CREATE_TABLE);\r\n        db.execSQL(LandHoldingPojo.CREATE_TABLE);\r\n        db.execSQL(TrainingPojo.CREATE_TABLE);\r\n        db.execSQL(CropTypePojo.CREATE_TABLE);\r\n        db.execSQL(MasterPojo.CREATE_TABLE);\r\n        db.execSQL(DisclaimerPojo.CREATE_TABLE);\r\n        db.execSQL(AboutUs.CREATE_TABLE);\r\n        db.execSQL(FarmerRegistrationPojo.CREATE_TABLE);\r\n        db.execSQL(MasterTypePojo.CREATE_TABLE);\r\n        db.execSQL(StatePojo.CREATE_TABLE);\r\n        db.execSQL(DistrictPojo.CREATE_TABLE);\r\n        db.execSQL(BlockPojo.CREATE_TABLE);\r\n        db.execSQL(VillagePojo.CREATE_TABLE);\r\n        db.execSQL(PlantSubCategoryPojo.CREATE_TABLE);\r\n        db.execSQL(CropVegitableDetails.CREATE_TABLE);\r\n        db.execSQL(SoilPojo.CREATE_TABLE);\r\n        db.execSQL(ParyavaranSakhiRegistrationPojo.CREATE_TABLE);\r\n        db.execSQL(PSNeemPlantationPojo.CREATE_TABLE);\r\n        db.execSQL(PSLandHoldingPojo.CREATE_TABLE);\r\n        db.execSQL(SkillTrackingPojo.CREATE_TABLE);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\r\n        if (oldVersion < 5) {\r\n            db.execSQL(\"ALTER TABLE farmer_registration ADD offline_sync INTEGER DEFAULT 0\");\r\n            db.execSQL(\"ALTER TABLE land_holding ADD offline_sync INTEGER DEFAULT 0\");\r\n            db.execSQL(\"ALTER TABLE supplier_registration ADD offline_sync INTEGER DEFAULT 0\");\r\n        }\r\n    }\r\n\r\n    public SQLiteDatabase openDataBase() throws SQLException {\r\n        Log.e(\"version\", \"outside\" + version);\r\n\r\n        File dbFile = ctx.getDatabasePath(DATABASE_NAME);\r\n        return SQLiteDatabase.openDatabase(dbFile.getPath(), null, SQLiteDatabase.NO_LOCALIZED_COLLATORS | SQLiteDatabase.CREATE_IF_NECESSARY);\r\n    }\r\n\r\n    public void dropTable(String tablename) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"'\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void dropTableFamily(String tablename, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"' where user_id = '\" + user_id + \"' \");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    public void dropTableSale(String tablename, String user_id,String crop_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"' where unique_id = '\" + user_id + \"' and crop_type_subcatagory_id = '\"+ crop_id +\"' and flag = 0 \");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n    public void deleteTableSale(String tablename, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"' where id = '\" + user_id + \"'\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n    public void saveMasterTable(ContentValues contentValues, String tablename) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        if (tablename.equals(\"users\") || tablename.equals(\"farmer_registration\") ||\r\n                tablename.equals(\"farmer_family\") || tablename.equals(\"land_holding\") ||\r\n                tablename.equals(\"crop_planning\") || tablename.equals(\"input_ordering\") ||\r\n                tablename.equals(\"input_ordering_vender\") || tablename.equals(\"supplier_registration\") ||\r\n                tablename.equals(\"production_details\") ||\r\n                tablename.equals(\"crop_vegetable_details\")) {\r\n            contentValues.put(\"flag\", 1);\r\n        }else if ( tablename.equals(\"sale_details\")){\r\n            contentValues.put(\"flag\", 1);\r\n            contentValues.put(\"is_close\", 0);\r\n        }\r\n\r\n        long idsds = db.insert(tablename, null, contentValues);\r\n        Log.d(\"LOG\", idsds + \" id\");\r\n        db.close();\r\n    }\r\n\r\n    public long getFarmerRegistrationData(FarmerRegistrationPojo user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", id);\r\n                values.put(\"id\", id);\r\n                values.put(\"household_no\", user.getHousehold_no());\r\n                values.put(\"farmer_name\", user.getFarmer_name());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"date_of_birth\", user.getDate_of_birth());\r\n                values.put(\"what_you_know\", user.getWhat_you_know());\r\n                values.put(\"id_type_id\", user.getId_type_id());\r\n                values.put(\"id_no\", user.getId_no());\r\n                values.put(\"father_husband_name\", user.getFather_husband_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"bpl\", user.getBpl());\r\n                //values.put(\"education_qualification\", user.getEducation_qualification());\r\n                values.put(\"physical_challenges\", user.getPhysical_challenges());\r\n                values.put(\"handicapped\", user.getHandicapped());\r\n                values.put(\"total_land_holding\", user.getTotal_land_holding());\r\n                values.put(\"nof_member_migrated\", user.getNof_member_migrated());\r\n                //  values.put(\"crop_vegetable_details\", user.getCrop_vegetable_details());\r\n                values.put(\"multi_cropping\", user.getMulti_cropping());\r\n                values.put(\"fertilizer\", user.getFertilizer());\r\n                values.put(\"irrigation_facility\", user.getIrrigation_facility());\r\n                values.put(\"religion_id\", user.getReligion_id());\r\n                values.put(\"category_id\", user.getCategory_id());\r\n                values.put(\"caste\", user.getCaste());\r\n                values.put(\"annual_income\", user.getAnnual_income());\r\n                values.put(\"agro_climat_zone_id\", user.getAgro_climat_zone_id());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n                values.put(\"block_id\", user.getBlock_id());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"pincode\", user.getPincode());\r\n                values.put(\"id_other_name\", user.getId_other_name());\r\n                values.put(\"alternative_livelihood_id\", user.getAlternative_livelihood_id());\r\n                values.put(\"address\", user.getAddress());\r\n\r\n                /*if (id == null || id.equals(\"\") || id.equals(\"0\")) {\r\n                    db.insert(\"farmer_registration\", null, values);\r\n                    db.close();\r\n                } else {\r\n                    db.update(\"farmer_registration\", values, \"id = '\" + id + \"'\", null);\r\n                    db.close(); // Closing database connection\r\n                }*/\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"farmer_registration\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n\r\n        return ids;\r\n        //New Registration\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public void updateMasterTable(ContentValues contentValues, String tablename,String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long idsds = db.update(tablename,  contentValues, \"id = \" + id,null);\r\n        Log.d(\"LOG\", idsds + \" id\");\r\n        db.close();\r\n    }\r\n    public boolean checkIdExist(String table_name,String id) {\r\n        boolean ids = false;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"SELECT id FROM '\"+ table_name +\"' WHERE id = '\" + id + \"'\";\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    ids=true;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        db.close();\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getFarmerList(String name) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (name.equals(\"\")) {\r\n\r\n                    //  query = \"select * from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id \";\r\n                    query = \"select f.farmer_name, f.address, f.mobile, f.user_id, f.id,u.profile_photo from farmer_registration f INNER JOIN users u ON f.user_id = u.id order by f.id desc\";\r\n\r\n                } else {\r\n\r\n                    query = \"select f.farmer_name, f.address, f.mobile, f.user_id, f.id,u.profile_photo from farmer_registration f INNER JOIN users u ON f.user_id = u.id where f.farmer_name LIKE \" + \"'\" + name + \"%'\" ;\r\n                    //   query = \"select * from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id  where farmer_registration.farmer_name LIKE \" + \"'\" + name + \"%'\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        FarmerRegistrationPojo farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        farmerRegistrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        farmerRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        farmerRegistrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n\r\n                        // farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getFarmerListforfilter(String name) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String   query = \"select f.farmer_name, f.address, f.mobile, f.user_id, f.id,u.profile_photo from farmer_registration f INNER JOIN users u ON f.user_id = u.id where f.village_id = '\"+ name +\"'\" ;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        FarmerRegistrationPojo farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        farmerRegistrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        farmerRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        farmerRegistrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n\r\n                        // farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getFarmerFamily(String user_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<>();\r\n        FarmerRegistrationPojo farmerRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from farmer_family where user_id = '\" + user_id + \"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        farmerRegistrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        farmerRegistrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                        farmerRegistrationPojo.setOccupation(Integer.parseInt(cursor.getString(cursor.getColumnIndex(\"occupation\"))));\r\n                        farmerRegistrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        farmerRegistrationPojo.setMonthly_income(cursor.getInt(cursor.getColumnIndex(\"monthly_income\")));\r\n                        farmerRegistrationPojo.setRelation_id(cursor.getInt(cursor.getColumnIndex(\"relation_id\")));\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<SoilPojo> getDateSoil(String land_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SoilPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select updated_soil_date, id from updated_soil where land_id = '\"+ land_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SoilPojo soilPojo = new SoilPojo();\r\n                        soilPojo.setSoil_updated_date(cursor.getString(cursor.getColumnIndex(\"updated_soil_date\")));\r\n                        soilPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(soilPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropVegitableDetails> getCropDetailsData(String user_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropVegitableDetails> arrayList = new ArrayList<>();\r\n        CropVegitableDetails farmerRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_vegetable_details where user_id = '\" + user_id + \"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new CropVegitableDetails();\r\n                        farmerRegistrationPojo.setCrop_name(cursor.getString(cursor.getColumnIndex(\"crop_name\")));\r\n                        farmerRegistrationPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        farmerRegistrationPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        farmerRegistrationPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        farmerRegistrationPojo.setUnit_id(cursor.getString(cursor.getColumnIndex(\"unit_id\")));\r\n                        farmerRegistrationPojo.setUnits_id(cursor.getString(cursor.getColumnIndex(\"units_id\")));\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<CropVegitableDetails> getCropDetails(String user_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropVegitableDetails> arrayList = new ArrayList<>();\r\n        CropVegitableDetails farmerRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_vegetable_details where user_id = '\" + user_id + \"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new CropVegitableDetails();\r\n                        farmerRegistrationPojo.setCrop_name(cursor.getString(cursor.getColumnIndex(\"crop_name\")));\r\n                        farmerRegistrationPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        farmerRegistrationPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        farmerRegistrationPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        farmerRegistrationPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        farmerRegistrationPojo.setUnit_id(cursor.getString(cursor.getColumnIndex(\"unit_id\")));\r\n                        farmerRegistrationPojo.setUnits_id(cursor.getString(cursor.getColumnIndex(\"units_id\")));\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<PlantGrowthPojo> getPlantgrwthList(String plant_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantGrowthPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where plant_id = '\"+ plant_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantGrowthPojo plantGrowthPojo = new PlantGrowthPojo();\r\n                        plantGrowthPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        plantGrowthPojo.setDate(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        plantGrowthPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        plantGrowthPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantGrowthPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantGrowthPojo.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        plantGrowthPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantGrowthPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<PlantGrowthPojo> getPlantgrwthListForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantGrowthPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantGrowthPojo plantGrowthPojo = new PlantGrowthPojo();\r\n                        plantGrowthPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        plantGrowthPojo.setGrowth_date(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        plantGrowthPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        plantGrowthPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantGrowthPojo.setCrop_planing_id(cursor.getString(cursor.getColumnIndex(\"crop_planing_id\")));\r\n                        plantGrowthPojo.setCrop_status_id(cursor.getString(cursor.getColumnIndex(\"crop_status_id\")));\r\n                        plantGrowthPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantGrowthPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        plantGrowthPojo.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        plantGrowthPojo.setCrop_type_category_id(cursor.getString(cursor.getColumnIndex(\"crop_type_category_id\")));\r\n                        plantGrowthPojo.setDead_plants(cursor.getString(cursor.getColumnIndex(\"dead_plants\")));\r\n                        plantGrowthPojo.setUnhealthy_plants(cursor.getString(cursor.getColumnIndex(\"unhealthy_plants\")));\r\n                        plantGrowthPojo.setHealthy_plants(cursor.getString(cursor.getColumnIndex(\"healthy_plants\")));\r\n                        plantGrowthPojo.setRole_id(sharedPrefHelper.getString(\"role_id\", \"\"));\r\n\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantGrowthPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<KnowledgePojo> getKnowledge() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<KnowledgePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from knowledge\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        KnowledgePojo plantGrowthPojo = new KnowledgePojo();\r\n                        plantGrowthPojo.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n                        plantGrowthPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        plantGrowthPojo.setKnowledge_image(cursor.getString(cursor.getColumnIndex(\"knowledge_image\")));\r\n                        plantGrowthPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        plantGrowthPojo.setVideo_url(cursor.getString(cursor.getColumnIndex(\"video_url\")));\r\n                        plantGrowthPojo.setCreated_at(cursor.getString(cursor.getColumnIndex(\"created_at\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantGrowthPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<PlantSubCategoryPojo> getSubCategoryList(String id, String farmer_id,String land_id,String screen_type) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantSubCategoryPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (screen_type.equals(\"crop_monitoring\")){\r\n                    query = \"select *,sum(total_tree) as totals from crop_planning where crop_type_catagory_id = '\" + id + \"' and land_id = '\" + land_id + \"' group by crop_type_subcatagory_id  \";\r\n\r\n                }else\r\n                if (!screen_type.equals(\"view_land\")){\r\n                    if (farmer_id.equals(\"\")) {\r\n                        query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' order by local_id desc\";\r\n\r\n                    } else {\r\n                        query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and farmer_id = '\" + farmer_id + \"' order by local_id desc\";\r\n\r\n                    }}else  {\r\n\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and land_id = '\" + land_id + \"' order by local_id desc\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantSubCategoryPojo plantSubCategoryPojo = new PlantSubCategoryPojo();\r\n                        plantSubCategoryPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        plantSubCategoryPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        plantSubCategoryPojo.setName(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        plantSubCategoryPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        plantSubCategoryPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        plantSubCategoryPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        plantSubCategoryPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantSubCategoryPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        if (screen_type.equals(\"crop_monitoring\"))\r\n                            plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"totals\")));\r\n                        else\r\n                            plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n\r\n                        plantSubCategoryPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        plantSubCategoryPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantSubCategoryPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<PlantSubCategoryPojo> getSubCategoryListFilter(String id, String sub, String land, int farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantSubCategoryPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id != 0 && land != null && land != \"\" && !land.equals(\"null\")){\r\n                    query = \"select * from crop_planning where land_id = '\" + land + \"' and farmer_id = '\" + farmer_id + \"'  \";\r\n                }else if (!id.equals(\"\") && !sub.equals(\"\") && id != null && sub != null && land != null  && !land.equals(\"\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' and land_id = '\" + land + \"' \";\r\n                } else if (farmer_id != 0 && id != null && id != \"\" && !id.equals(\"null\") && sub != null && sub != \"\" && !sub.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' and farmer_id = '\" + farmer_id + \"' \";\r\n                } else if (farmer_id != 0 && id != null && id != \"\" && !id.equals(\"null\") && sub != null && sub != \"\" && !sub.equals(\"null\") && land != null && land != \"\" && !land.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' and land_id = '\" + land + \"' and farmer_id = '\" + farmer_id + \"' \";\r\n                }else  if (land != null && land != \"\" && !land.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where land_id = '\" + land + \"' \";\r\n                } else if (id != null && id != \"\" && !id.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' \";\r\n                } else if (id != null && !id.equals(\"\") && sub != null && !sub.equals(\"\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' \";\r\n                } else if (farmer_id != 0) {\r\n                    query = \"select * from crop_planning where farmer_id = '\" + farmer_id + \"'\";\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantSubCategoryPojo plantSubCategoryPojo = new PlantSubCategoryPojo();\r\n                        plantSubCategoryPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        plantSubCategoryPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        plantSubCategoryPojo.setName(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        plantSubCategoryPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        plantSubCategoryPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        plantSubCategoryPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        plantSubCategoryPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantSubCategoryPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantSubCategoryPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<PlantSubCategoryPojo> getPlantDeatails(String id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantSubCategoryPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_planning where id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantSubCategoryPojo plantSubCategoryPojo = new PlantSubCategoryPojo();\r\n                        plantSubCategoryPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        plantSubCategoryPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        plantSubCategoryPojo.setName(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        plantSubCategoryPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        plantSubCategoryPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        plantSubCategoryPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        plantSubCategoryPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        plantSubCategoryPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantSubCategoryPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantSubCategoryPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        plantSubCategoryPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        plantSubCategoryPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantSubCategoryPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public PlantGrowthPojo getPlantgrwthDetail(String id) {\r\n        PlantGrowthPojo plantGrowthPojo = new PlantGrowthPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where local_id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        plantGrowthPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantGrowthPojo.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        plantGrowthPojo.setCrop_status(cursor.getString(cursor.getColumnIndex(\"crop_status_id\")));\r\n                        plantGrowthPojo.setGrowth_date(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        plantGrowthPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return plantGrowthPojo;\r\n\r\n    }\r\n\r\n    public Attendance_Approval getFarmerDetails(String id) {\r\n        Attendance_Approval attendance_approval = new Attendance_Approval();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select id, user_id, farmer_name, mobile from farmer_registration where user_id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        attendance_approval.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        attendance_approval.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        attendance_approval.setName(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        attendance_approval.setMobile_no(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return attendance_approval;\r\n\r\n    }\r\n\r\n    public String getmasterName(int id,String lang) {\r\n        String sum = \"\";\r\n        if (lang.equals(\"hin\")){\r\n            lang=\"2\";\r\n        }else {\r\n            lang=\"1\";\r\n        }\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select master_name from master where caption_id ='\" + id + \"' and language_id = '\"+ lang +\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"master_name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getUserID(int id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select user_id from farmer_registration where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"user_id\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getFarmerName(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select farmer_name from farmer_registration where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"farmer_name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getPSFarmerName(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select farmer_name from ps_farmer_registration where local_id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"farmer_name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getPSLandUnit(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select master_name from master where caption_id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"master_name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getLandName(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select land_id from land_holding where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"land_id\"));\r\n        return sum;\r\n    }\r\n\r\n\r\n    public String getCategotyName(int id,String lang) {\r\n        String sum = \"\";\r\n        if (lang.equals(\"hin\")){\r\n            lang=\"2\";\r\n        }else {\r\n            lang=\"1\";\r\n        }\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select name from crop_type_catagory_language where id ='\" + id + \"' and language_id = '\"+ lang +\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getCategotyTypeId(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select crop_type_catagory_id from crop_type_sub_catagory_language where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\"));\r\n        return sum;\r\n    }\r\n    public String getInputOrderingVenderId(String id, String venderID) {\r\n        String idss = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select id from input_ordering_vender where input_ordering_id ='\" + id + \"' and vender_id='\"+venderID+\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            idss = cursor.getString(cursor.getColumnIndex(\"id\"));\r\n        return idss;\r\n    }\r\n    public String getInputOrderingVenderVendorId(String id, String venderID) {\r\n        String idss = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select vender_id from input_ordering_vender where input_ordering_id ='\" + id + \"' and vender_id='\"+venderID+\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            idss = cursor.getString(cursor.getColumnIndex(\"vender_id\"));\r\n        return idss;\r\n    }\r\n\r\n    public String getSubCategotyName(int id,String lang) {\r\n        String sum = \"\";\r\n        if (lang.equals(\"hin\")){\r\n            lang=\"2\";\r\n        }else {\r\n            lang=\"1\";\r\n        }\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select name from crop_type_sub_catagory_language where id ='\" + id + \"' and language_id = '\"+ lang +\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getVillageName(int id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select pincode from village_language where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"pincode\"));\r\n        return sum;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getFarmerspinner() {\r\n        HashMap<String, Integer> stat = new HashMap<>();\r\n        FarmerRegistrationPojo farmerRegistrationPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select id, farmer_name from farmer_registration\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        farmerRegistrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        stat.put(farmerRegistrationPojo.getFarmer_name(), farmerRegistrationPojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return stat;\r\n    }\r\n\r\n    public HashMap<String, Integer> getPlantSpinner(String farmer_id) {\r\n        HashMap<String, Integer> stat = new HashMap<>();\r\n        CropPlaningPojo farmerRegistrationPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id.equals(\"\")) {\r\n                    query = \"select crop_type_subcatagory_id, plant_name from crop_planning\";\r\n\r\n                } else {\r\n                    query = \"select crop_type_subcatagory_id, plant_name from crop_planning where farmer_id = '\" + farmer_id + \"'\";\r\n\r\n                }\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new CropPlaningPojo();\r\n                        farmerRegistrationPojo.setPlant_name(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        farmerRegistrationPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        cursor.moveToNext();\r\n                        stat.put(farmerRegistrationPojo.getPlant_name(), Integer.valueOf((farmerRegistrationPojo.getCrop_type_subcatagory_id())));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return stat;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getAllState(int lang) {\r\n        HashMap<String, Integer> state = new HashMap<>();\r\n        StatePojo statePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from state_language where language_id ='\"+ lang +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        statePojo = new StatePojo();\r\n                        statePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        statePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        state.put(statePojo.getName(), statePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return state;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllCategoryType(int language_id) {\r\n        HashMap<String, Integer> state = new HashMap<>();\r\n        CropTypePojo statePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"  Select id, name from crop_type_catagory_language where language_id ='\"+language_id+\"' order by id asc \";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        statePojo = new CropTypePojo();\r\n                        statePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        statePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        state.put(statePojo.getName(), statePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return state;\r\n    }\r\n\r\n    public String getgrowthSpndata(String id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from crop_type_catagory_language where id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"name\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n\r\n    public String getLandIDbyid(String id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select land_id from land_holding where id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"land_id\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n    public String getDatesfromCrop(int id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select planted_date,fruited_date,season from crop_planning where id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"planted_date\"))+\",\"+cursor.getString(cursor.getColumnIndex(\"fruited_date\"))+\",\"+cursor.getString(cursor.getColumnIndex(\"season\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n\r\n    public String getTotalPlantbyid(String id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select count(id) from crop_planning where land_id = '\"+ id +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"count(id)\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    public String getgrowthStatus_Spn(String id) {\r\n        String cropstatus = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select master_name from master where caption_id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropstatus = cursor.getString(cursor.getColumnIndex(\"master_name\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropstatus;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getPlantGrowth_Status(int master_type, int language_id) {\r\n        HashMap<String, Integer> state = new HashMap<>();\r\n        Crop_Type_Status cropstate;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from master where  master_type= '\" + master_type + \"' and language_id = '\"+language_id+\"'\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropstate = new Crop_Type_Status();\r\n                        cropstate.setCaption_id(cursor.getInt(cursor.getColumnIndex(\"caption_id\")));\r\n                        cropstate.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        cursor.moveToNext();\r\n                        state.put(cropstate.getMaster_name(), cropstate.getCaption_id());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return state;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllDistrict(int state_id,int lang) {\r\n        HashMap<String, Integer> district = new HashMap<>();\r\n        DistrictPojo districtPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from district_language where state_id=\" + state_id + \" and language_id = '\"+ lang +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        districtPojo = new DistrictPojo();\r\n                        districtPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        districtPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        district.put(districtPojo.getName().trim(), districtPojo.getId());\r\n                    }\r\n                }\r\n            }\r\n            sqLiteDatabase.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return district;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllSubCategory(int state_id, int language_id) {\r\n        HashMap<String, Integer> district = new HashMap<>();\r\n        PlantSubCategoryPojo districtPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from crop_type_sub_catagory_language where crop_type_catagory_id='\" + state_id + \"' and language_id = '\"+language_id+\"' order by id asc \";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        districtPojo = new PlantSubCategoryPojo();\r\n                        districtPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        districtPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        district.put(districtPojo.getName().trim(), Integer.valueOf(districtPojo.getId()));\r\n                    }\r\n                }\r\n            }\r\n            sqLiteDatabase.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return district;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllBlock(int district_id,int lang) {\r\n        HashMap<String, Integer> block1 = new HashMap<>();\r\n        BlockPojo blockPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from block_language where district_id = \" + district_id +\" and language_id = '\"+ lang +\"'\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        blockPojo = new BlockPojo();\r\n                        blockPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        blockPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        block1.put(blockPojo.getName().trim(), blockPojo.getId());\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return block1;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllVillage(int block_id,int lang) {\r\n        HashMap<String, Integer> village = new HashMap<>();\r\n        VillagePojo villagePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from village_language where block_id  = '\" + block_id + \"' and asigned != 0 and language_id = '\"+ lang +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        villagePojo = new VillagePojo();\r\n                        villagePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        villagePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        village.put(villagePojo.getName(), villagePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n\r\n        return village;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllVillageforfilter(int lang) {\r\n        HashMap<String, Integer> village = new HashMap<>();\r\n        VillagePojo villagePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from village_language where asigned  = '\" + sharedPrefHelper.getString(\"user_id\",\"\") + \"' and language_id = '\"+ lang +\"' \";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        villagePojo = new VillagePojo();\r\n                        villagePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        villagePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        village.put(villagePojo.getName(), villagePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n\r\n        return village;\r\n    }\r\n\r\n\r\n    public ArrayList<LandHoldingPojo> getLandList(String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<LandHoldingPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id.equals(\"\")) {\r\n                    query = \"SELECT * FROM land_holding order by local_id desc\";\r\n                } else {\r\n                    query = \"SELECT * FROM land_holding where farmer_id = '\" + farmer_id + \"'  order by local_id desc\";\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        LandHoldingPojo landHoldingPojo = new LandHoldingPojo();\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        //               landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n                        //              landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public HashMap<String, Integer> getLandHoldingListforFarmer(String farmerId) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        CropPlaningPojo cropPlaningPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from land_holding where farmer_id= '\" + farmerId + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        cropPlaningPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        hashMap.put(cropPlaningPojo.getLand_id(), Integer.parseInt(cropPlaningPojo.getId()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n    public HashMap<String, Integer> getLandHoldingList() {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        CropPlaningPojo cropPlaningPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from land_holding\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        cropPlaningPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        hashMap.put(cropPlaningPojo.getLand_id(), Integer.parseInt(cropPlaningPojo.getId()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n    public ArrayList<String> getLandHoldingList1(String user) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<String> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"SELECT * FROM land_holding where farmer_id = '\" + user + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        String land = cursor.getString(cursor.getColumnIndex(\"land_id\"));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(land);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropPlaningPojo> getPlantList(String selected_farmer,String land_id,String screen_type) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropPlaningPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query;\r\n                if (screen_type.equals(\"crop_monitoring\")){\r\n                    if (selected_farmer.equals(\"\")) {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning where land_id = '\"+ land_id +\"'  group by crop_type_catagory_id  \";\r\n\r\n                    } else {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning where land_id = '\"+ land_id +\"' and farmer_id = '\" + selected_farmer + \"' group by crop_type_catagory_id  \";\r\n                    }\r\n                }else {\r\n                    if (selected_farmer.equals(\"\")) {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning  group by crop_type_catagory_id  \";\r\n\r\n                    } else {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning where farmer_id = '\" + selected_farmer + \"' group by crop_type_catagory_id  \";\r\n                    }\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        CropPlaningPojo cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        cropPlaningPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"count(local_id)\")));\r\n                        cropPlaningPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        //cropPlaningPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(cropPlaningPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropPlaningPojo> filterPlantList(String plant_name, String land, int farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropPlaningPojo> filterList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                /*String query = \"select crop_type_catagory_id, count(local_id), plant_id from crop_planning WHERE \" +\r\n                        \"crop_type_catagory_id='\" + plant_name + \"' or  land_id ='\" + land + \"'\";*/\r\n                String query = \"\";\r\n                if (plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\") && land != \"\" && land != \"null\" && !land.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where land_id ='\" + land + \"' and crop_type_catagory_id='\" + plant_name + \"'  GROUP BY crop_type_catagory_id \";\r\n                } else if (plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\") && farmer_id != 0) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where  crop_type_catagory_id='\" + plant_name + \"' and farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (land != \"\" && land != \"null\" && !land.equals(\"null\") && farmer_id != 0) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where  land_id ='\" + land + \"' and farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                }else if (land != \"\" && land != \"null\" && !land.equals(\"null\") && farmer_id != 0 && plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where crop_type_catagory_id='\" + plant_name + \"' and  land_id ='\" + land + \"' and farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (farmer_id != 0) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where crop_type_catagory_id='\" + plant_name + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (land != \"\" && land != \"null\" && !land.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where land_id ='\" + land + \"' GROUP BY crop_type_catagory_id \";\r\n                }\r\n\r\n                Log.e(\"Query : \", \"===\" + query);\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        CropPlaningPojo cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        cropPlaningPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"count(local_id)\")));\r\n                        cropPlaningPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        cropPlaningPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        cursor.moveToNext();\r\n                        filterList.add(cropPlaningPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return filterList;\r\n    }\r\n\r\n    public ArrayList<PostPlantationPojo> getPostPlant(int language_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PostPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select master_name, caption_id from master where master_type = 15 and language_id = '\"+ language_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PostPlantationPojo postplantation = new PostPlantationPojo();\r\n                        postplantation.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        postplantation.setCaption_id(cursor.getInt(cursor.getColumnIndex(\"caption_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(postplantation);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<SaleDetailsPojo> getCropList(String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query=\"\";\r\n                if (farmer_id.equals(\"\")){\r\n                    query = \"select * from sale_details  group by crop_type_subcatagory_id order by local_id desc\";\r\n\r\n                }else {\r\n                    query = \"select * from sale_details where farmer_id = '\"+ farmer_id +\"' group by crop_type_subcatagory_id order by local_id desc\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<SaleDetailsPojo> getSubCropList(String sub_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from sale_details where crop_type_subcatagory_id = '\"+ sub_id +\"' and is_close = 0 order by local_id desc\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<SaleDetailsPojo> getSubCropListArchived() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from sale_details where is_close = 1 order by local_id desc\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n\r\n    public ArrayList<SubPlantationPojo> getSubPlantationMasterList(int language_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SubPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select caption_id, master_name from master where master_type = 16 and language_id = '\"+ language_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SubPlantationPojo saleDetailsPojo = new SubPlantationPojo();\r\n                        saleDetailsPojo.setCaption_id(cursor.getInt(cursor.getColumnIndex(\"caption_id\")));\r\n                        saleDetailsPojo.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<SubPlantationPojo> getSubPlantationList(String plant_id ,String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SubPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select value, sub_plantation_id from sub_plantation where crop_type_catagory_id = '\"+ plant_id +\"' and farmer_id = '\"+ farmer_id +\"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SubPlantationPojo saleDetailsPojo = new SubPlantationPojo();\r\n                        saleDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        saleDetailsPojo.setSub_plantation_id(cursor.getString(cursor.getColumnIndex(\"sub_plantation_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<PostPlantationPojo> getPostPlantationList(String plant_id ,String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PostPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select value, post_plantation_id from post_plantation where crop_type_catagory_id = '\"+ plant_id +\"' and farmer_id = '\"+ farmer_id +\"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PostPlantationPojo saleDetailsPojo = new PostPlantationPojo();\r\n                        saleDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        saleDetailsPojo.setPost_plantation_id(cursor.getString(cursor.getColumnIndex(\"post_plantation_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n\r\n    public ArrayList<SaleDetailsPojo> getCropListFilter(int season_id, String year, int farmerId) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from sale_details where season_id = '\" + season_id + \"' and year = '\" + year + \"'  group by crop_type_subcatagory_id \";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\" && farmerId != 0) {\r\n                    query = \"select * from sale_details where farmer_id = '\" + farmerId + \"' and year = '\" + year + \"'  group by crop_type_subcatagory_id \";\r\n                } else if (farmerId != 0 && season_id != 0) {\r\n                    query = \"select * from sale_details where farmer_id = '\" + farmerId + \"' and season_id = '\" + season_id + \"'  group by crop_type_subcatagory_id \";\r\n                } else if (farmerId != 0 && year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from sale_details where season_id = '\" + season_id + \"' and year = '\" + year + \"' and farmer_id = '\" + farmerId + \"'  group by crop_type_subcatagory_id \";\r\n                }else   if (farmerId != 0) {\r\n                    query = \"select * from sale_details where farmer_id = '\" + farmerId + \"'  group by crop_type_subcatagory_id\";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\") {\r\n                    query = \"select * from sale_details where year = '\" + year + \"' \";\r\n                } else if (season_id != 0) {\r\n                    query = \"select * from sale_details where season_id = '\" + season_id + \"'  group by crop_type_subcatagory_id\";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<ProductionDetailsPojo> getProductionList(String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<ProductionDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query=\"\";\r\n                if (farmer_id.equals(\"\")){\r\n                    query = \"select * from production_details  order by local_id desc\";\r\n\r\n                }else {\r\n                    query = \"select * from production_details where farmer_id = '\"+ farmer_id +\"' order by local_id desc\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        ProductionDetailsPojo saleDetailsPojo = new ProductionDetailsPojo();\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<ProductionDetailsPojo> getProductionListFilter(int season_id, String year, int farmerId) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<ProductionDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from production_details where season_id = '\" + season_id + \"' and year = '\" + year + \"' \";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\" && farmerId != 0) {\r\n                    query = \"select * from production_details where farmer_id = '\" + farmerId + \"' and year = '\" + year + \"' \";\r\n                } else if (farmerId != 0 && season_id != 0) {\r\n                    query = \"select * from production_details where farmer_id = '\" + farmerId + \"' and season_id = '\" + season_id + \"' \";\r\n                } else if (farmerId != 0 && year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from production_details where season_id = '\" + season_id + \"' and year = '\" + year + \"' and farmer_id = '\" + farmerId + \"' \";\r\n                }else if (farmerId != 0) {\r\n                    query = \"select * from production_details where farmer_id = '\" + farmerId + \"' \";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\") {\r\n                    query = \"select * from production_details where year = '\" + year + \"' \";\r\n                } else if (season_id != 0) {\r\n                    query = \"select * from production_details where season_id = '\" + season_id + \"' \";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        ProductionDetailsPojo saleDetailsPojo = new ProductionDetailsPojo();\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<SaleDetailsPojo> getCropListForSync(String fromSalesDetials) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                String query = \"\";\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    query = \"select * from sale_details where flag = 0\";\r\n                } else {\r\n                    query = \"select * from production_details where flag = 0\";\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        if (fromSalesDetials.equals(\"2\")) {\r\n                            saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        }\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        saleDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<ProductionDetailsPojo> getProductionListForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<ProductionDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from production_details where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        ProductionDetailsPojo saleDetailsPojo = new ProductionDetailsPojo();\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        saleDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public void getAddProductionDetailData(ProductionDetailsPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"year\", user.getYear());\r\n                values.put(\"season_id\", user.getSeason_id());\r\n                values.put(\"quantity\", user.getQuantity());\r\n                values.put(\"quanity_unit_id\", user.getQuanity_unit_id());\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"production_details\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void getAddseleDetailData(SaleDetailsPojo user, String fromSalesDetials) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"season_id\", user.getSeason_id());\r\n                values.put(\"quantity\", user.getQuantity());\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    values.put(\"crop_type_price\", user.getCrop_type_price());\r\n                }\r\n                values.put(\"quanity_unit_id\", user.getQuanity_unit_id());\r\n                values.put(\"year\", user.getYear());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"unique_id\", user.getUnique_id());\r\n                values.put(\"planted_date\", user.getPlanted_date());\r\n                values.put(\"fruited_date\", user.getFruited_date());\r\n                values.put(\"flag\", 0);\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    values.put(\"is_close\", 0);\r\n                }\r\n                // Inserting Row\r\n\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    db.insert(\"sale_details\", null, values);\r\n                } else {\r\n                    db.insert(\"production_details\", null, values);\r\n                }\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void getSubPlantationData(SubPlantationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"sub_plantation_id\", user.getSub_plantation_id());\r\n                values.put(\"value\", user.getValue());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"sub_plantation\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void getPostPlantationData(PostPlantationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"post_plantation_id\", user.getPost_plantation_id());\r\n                values.put(\"value\", user.getValue());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"post_plantation\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<SubPlantationPojo> getSubPlantatationForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SubPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from sub_plantation where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SubPlantationPojo saleDetailsPojo = new SubPlantationPojo();\r\n                        saleDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        saleDetailsPojo.setSub_plantation_id(cursor.getString(cursor.getColumnIndex(\"sub_plantation_id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        saleDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        saleDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<PostPlantationPojo> getPostPlantatationForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PostPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from post_plantation where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PostPlantationPojo postDetailsPojo = new PostPlantationPojo();\r\n                        postDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        postDetailsPojo.setPost_plantation_id(cursor.getString(cursor.getColumnIndex(\"post_plantation_id\")));\r\n                        postDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        postDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        postDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        postDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(postDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public void getAddplantgrowth(PlantGrowthModal user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", user.getId());\r\n                values.put(\"crop_status_id\", user.getCrop_status_id());\r\n                values.put(\"crop_planing_id\", user.getCrop_planing_id());\r\n                values.put(\"plant_id\", user.getCrop_planing_id());\r\n                values.put(\"growth_date\", user.getGrowth_date());\r\n                values.put(\"remarks\", user.getRemarks());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"healthy_plants\", user.getHealthy_plants());\r\n                values.put(\"unhealthy_plants\", user.getUnhealthy_plants());\r\n                values.put(\"dead_plants\", user.getDead_plants());\r\n                values.put(\"plant_image\", user.getPlant_image());\r\n                values.put(\"crop_type_category_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"crop_type_subcategory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"plant_growth\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public long getFarmerFamilyData(FarmerRegistrationPojo user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", id);\r\n                values.put(\"name\", user.getName());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"monthly_income\", user.getMonthly_income());\r\n                values.put(\"occupation\", user.getOccupation());\r\n                values.put(\"gender\", user.getGender());\r\n                values.put(\"relation_id\", user.getRelation_id());\r\n\r\n                /*if (id == null || id.equals(\"\") || id.equals(\"0\")) {\r\n                    db.insert(\"farmer_family\", null, values);\r\n                    db.close();\r\n                } else {\r\n                    db.update(\"farmer_family\", values, \"id = '\" + id + \"'\", null);\r\n                    db.close(); // Closing database connection\r\n                }*/\r\n                //Inserting Row\r\n                ids = db.insert(\"farmer_family\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public long setCropDetailsData(CropVegitableDetails user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", id);\r\n                values.put(\"crop_name\", user.getCrop_name());\r\n                values.put(\"area\", user.getArea());\r\n                values.put(\"quantity\", user.getQuantity());\r\n                values.put(\"season_id\", user.getSeason_id());\r\n                values.put(\"unit_id\", user.getUnit_id());\r\n                values.put(\"units_id\", user.getUnits_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n\r\n                ids = db.insert(\"crop_vegetable_details\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n\r\n    public void AddPlantData(CropPlaningPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", user.getId());\r\n                values.put(\"plant_id\", user.getPlant_id());\r\n                values.put(\"plant_name\", user.getPlant_name());\r\n                values.put(\"land_id\", user.getLand_id());\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"unit\", user.getUnit());\r\n                values.put(\"latitude\", user.getLatitude());\r\n                values.put(\"longitude\", user.getLongitude());\r\n                values.put(\"plant_image\", user.getPlant_image());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"planted_date\", user.getPlanted_date());\r\n                values.put(\"fruited_date\", user.getFruited_date());\r\n                values.put(\"season\", user.getSeason());\r\n                values.put(\"total_tree\", user.getTotal_tree());\r\n                values.put(\"flag\", 0);\r\n\r\n\r\n                // Inserting Row\r\n                db.insert(\"crop_planning\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void svaeTraningData(TrainingPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"from_date\", user.getFrom_date());\r\n                values.put(\"from_time\", user.getFrom_time());\r\n                values.put(\"to_date\", user.getTo_date());\r\n                values.put(\"to_time\", user.getTo_time());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"training_name\", user.getTraining_name());\r\n                values.put(\"trainer_name\", user.getTrainer_name());\r\n                values.put(\"brief_description\", user.getBrief_description());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"trainer_designation\", user.getTrainer_designation());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", \"0\");\r\n                // Inserting Row\r\n                db.insert(\"training\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void svaeTraning_Attendance(TrainingAttandancePojo atend) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"training_id\", atend.getTraining_id());\r\n                values.put(\"added_by\", atend.getUser_id());\r\n                values.put(\"farmer_id\", atend.getFarmer_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"training_attendance\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<TrainingPojo> getTrainingData() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<TrainingPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from training order by local_id desc\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        TrainingPojo trainingPojo = new TrainingPojo();\r\n                        trainingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        trainingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        trainingPojo.setFrom_date(cursor.getString(cursor.getColumnIndex(\"from_date\")));\r\n                        trainingPojo.setFrom_time(cursor.getString(cursor.getColumnIndex(\"from_time\")));\r\n                        trainingPojo.setTo_time(cursor.getString(cursor.getColumnIndex(\"to_time\")));\r\n                        trainingPojo.setTo_date(cursor.getString(cursor.getColumnIndex(\"to_date\")));\r\n                        trainingPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        trainingPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        trainingPojo.setTrainer_name(cursor.getString(cursor.getColumnIndex(\"trainer_name\")));\r\n                        trainingPojo.setTraining_name(cursor.getString(cursor.getColumnIndex(\"training_name\")));\r\n                        trainingPojo.setBrief_description(cursor.getString(cursor.getColumnIndex(\"brief_description\")));\r\n                        trainingPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        trainingPojo.setTrainer_designation(cursor.getString(cursor.getColumnIndex(\"trainer_designation\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(trainingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<TrainingAttandancePojo> getTrainingAttendance(String training_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<TrainingAttandancePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select id ,training_id,farmer_id,status,added_by from training_attendance where training_id = '\"+ training_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        TrainingAttandancePojo trainingattendancePojo = new TrainingAttandancePojo();\r\n                        trainingattendancePojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        trainingattendancePojo.setTraining_id(cursor.getString(cursor.getColumnIndex(\"training_id\")));\r\n                        trainingattendancePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        trainingattendancePojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        trainingattendancePojo.setAdded_by(cursor.getString(cursor.getColumnIndex(\"added_by\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(trainingattendancePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<TrainingAttandancePojo> getTrainingAttendanceforsync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<TrainingAttandancePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from training_attendance where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        TrainingAttandancePojo trainingattendancePojo = new TrainingAttandancePojo();\r\n                        trainingattendancePojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        trainingattendancePojo.setTraining_id(cursor.getString(cursor.getColumnIndex(\"training_id\")));\r\n                        trainingattendancePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        trainingattendancePojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"added_by\")));\r\n                        trainingattendancePojo.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(trainingattendancePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n\r\n    public TrainingAttandancePojo getTrainingAttendanceData(String farmer_id, String training_id) {\r\n        TrainingAttandancePojo trainingattendancePojo = new TrainingAttandancePojo();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query=null;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                if(!farmer_id.equals(\"\") && training_id.equals(\"\")){\r\n                    query= \"select * from training_attendance  where farmer_id ='\"+ farmer_id +\"'\" ;\r\n\r\n                }else if(!farmer_id.equals(\"\") && !training_id.equals(\"\")){\r\n                    query= \"select * from training_attendance  where farmer_id ='\"+ farmer_id +\"' and training_id='\"+ training_id+\"'\" ;\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    trainingattendancePojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                    trainingattendancePojo.setTraining_id(cursor.getString(cursor.getColumnIndex(\"training_id\")));\r\n                    trainingattendancePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                    trainingattendancePojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"added_by\")));\r\n                    trainingattendancePojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                    trainingattendancePojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));\r\n                    trainingattendancePojo.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));\r\n\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return trainingattendancePojo;\r\n    }\r\n\r\n\r\n\r\n    public long saveVendorRegistrationData(SupplierRegistrationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long inserted_id = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"name\", user.getName());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"pan_no\", user.getPan_no());\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"email\", user.getEmail());\r\n                values.put(\"gstn_no\", user.getGstn_no());\r\n                values.put(\"vender_category\", user.getVender_category());\r\n                values.put(\"aadhar_no\", user.getAadhar_no());\r\n                values.put(\"aadhar_image\", user.getAadhar_image());\r\n                values.put(\"pan_image\", user.getPan_image());\r\n                values.put(\"gstn_image\", user.getGstn_image());\r\n                values.put(\"proprietor_no\", user.getProprietor_no());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n\r\n                // Inserting Row\r\n                inserted_id = db.insert(\"supplier_registration\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public void saveUsersData(UsersPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"first_name\", user.getFirst_name());\r\n                values.put(\"last_name\", user.getLast_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"email\", user.getEmail());\r\n                values.put(\"profile_photo\", user.getProfile_photo());\r\n                values.put(\"id\", user.getId());\r\n\r\n                db.insert(\"users\", null, values);\r\n                db.close();\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public long AddLandData(LandHoldingPojo landHoldingPojo) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"area\", landHoldingPojo.getArea());\r\n                values.put(\"id\", landHoldingPojo.getId());\r\n                values.put(\"land_id\", landHoldingPojo.getLand_id());\r\n                values.put(\"farmer_id\", landHoldingPojo.getFarmer_id());\r\n                values.put(\"land_unit\", landHoldingPojo.getLand_unit());\r\n                values.put(\"image\", landHoldingPojo.getImage());\r\n                values.put(\"user_id\", landHoldingPojo.getUser_id());\r\n                values.put(\"latitude\", sharedPrefHelper.getString(\"LAT\", \"\"));\r\n                values.put(\"longitude\", sharedPrefHelper.getString(\"LONG\", \"\"));\r\n                values.put(\"total_plant\", landHoldingPojo.getTotal_plant());\r\n                values.put(\"soil_type_id\", landHoldingPojo.getSoil_type_id());\r\n                values.put(\"soil_color_id\", landHoldingPojo.getSoil_color_id());\r\n                //    values.put(\"soil_characteristics_id\", landHoldingPojo.getSoil_characteristics_id());\r\n                //    values.put(\"soil_chemical_composition_id\", landHoldingPojo.getSoil_chemical_composition_id());\r\n                values.put(\"filtration_rate\", landHoldingPojo.getFiltration_rate());\r\n                values.put(\"soil_texture\",landHoldingPojo.getSoil_texture());\r\n                values.put(\"ph\",landHoldingPojo.getPh());\r\n                values.put(\"bulk_density\", landHoldingPojo.getBulk_density());\r\n                values.put(\"cation_exchange_capacity\", landHoldingPojo.getCation_exchange_capacity());\r\n                values.put(\"ec\", landHoldingPojo.getEc());\r\n                values.put(\"p\", landHoldingPojo.getP());\r\n                values.put(\"s\", landHoldingPojo.getS());\r\n                values.put(\"mg\", landHoldingPojo.getMg());\r\n                values.put(\"k\", landHoldingPojo.getK());\r\n                values.put(\"n\", landHoldingPojo.getN());\r\n                values.put(\"ca\", landHoldingPojo.getCa());\r\n                values.put(\"land_name\", landHoldingPojo.getLand_name());\r\n                values.put(\"flag\", 0);\r\n                //Inserting Row\r\n                ids = db.insert(\"land_holding\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public long updateLandData(LandHoldingPojo landHoldingPojo, String land_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"area\", landHoldingPojo.getArea());\r\n                values.put(\"land_id\", landHoldingPojo.getLand_id());\r\n                values.put(\"farmer_id\", landHoldingPojo.getFarmer_id());\r\n                values.put(\"land_unit\", landHoldingPojo.getLand_unit());\r\n                values.put(\"image\", landHoldingPojo.getImage());\r\n                values.put(\"user_id\", landHoldingPojo.getUser_id());\r\n                values.put(\"latitude\", sharedPrefHelper.getString(\"LAT\", \"\"));\r\n                values.put(\"longitude\", sharedPrefHelper.getString(\"LONG\", \"\"));\r\n                values.put(\"total_plant\", landHoldingPojo.getTotal_plant());\r\n                values.put(\"soil_type_id\", landHoldingPojo.getSoil_type_id());\r\n                values.put(\"soil_color_id\", landHoldingPojo.getSoil_color_id());\r\n                //      values.put(\"soil_characteristics_id\", landHoldingPojo.getSoil_characteristics_id());\r\n                //      values.put(\"soil_chemical_composition_id\", landHoldingPojo.getSoil_chemical_composition_id());\r\n                values.put(\"filtration_rate\", landHoldingPojo.getFiltration_rate());\r\n                values.put(\"soil_texture\",landHoldingPojo.getSoil_texture());\r\n                values.put(\"ph\",landHoldingPojo.getPh());\r\n                values.put(\"bulk_density\", landHoldingPojo.getBulk_density());\r\n                values.put(\"cation_exchange_capacity\", landHoldingPojo.getCation_exchange_capacity());\r\n                values.put(\"ec\", landHoldingPojo.getEc());\r\n                values.put(\"p\", landHoldingPojo.getP());\r\n                values.put(\"s\", landHoldingPojo.getS());\r\n                values.put(\"mg\", landHoldingPojo.getMg());\r\n                values.put(\"k\", landHoldingPojo.getK());\r\n                values.put(\"n\", landHoldingPojo.getN());\r\n                values.put(\"ca\", landHoldingPojo.getCa());\r\n                values.put(\"land_name\", landHoldingPojo.getLand_name());\r\n                values.put(\"flag\", 0);\r\n                values.put(\"offline_sync\", 1);\r\n\r\n                db.update(\"land_holding\", values, \"id = '\" + land_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public LandHoldingPojo LandDetail(String farmer_id,String land_id_id) {\r\n        LandHoldingPojo landHoldingPojo = new LandHoldingPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from land_holding where id = '\" + land_id_id + \"' and farmer_id = '\"+farmer_id+\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new LandHoldingPojo();\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        //               landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n                        //              landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return landHoldingPojo;\r\n    }\r\n\r\n    public void saveQueryData(HelplinePojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"query\", user.getQuery());\r\n                values.put(\"query_date\", user.getQuery_date());\r\n                values.put(\"image\", user.getImage());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"audio_file\", user.getAudio_file());\r\n                values.put(\"flag\", 0);\r\n\r\n                db.insert(\"help_line\", null, values);\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void saveSoilInfoData(SoilPojo soilPojo,String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"soil_type_id\", soilPojo.getSoil_type_id());\r\n                values.put(\"soil_color_id\", soilPojo.getSoil_color_id());\r\n                values.put(\"updated_soil_date\", soilPojo.getSoil_updated_date());\r\n                values.put(\"filtration_rate\", soilPojo.getFiltration_rate());\r\n//                values.put(\"soil_texture\",soilPojo.getSoil_texture());\r\n                values.put(\"ph\",soilPojo.getPh());\r\n                values.put(\"bulk_density\", soilPojo.getBulk_density());\r\n                values.put(\"cation_exchange_capacity\", soilPojo.getCation_exchange_capacity());\r\n                values.put(\"ec\", soilPojo.getEc());\r\n                values.put(\"p\", soilPojo.getP());\r\n                values.put(\"s\", soilPojo.getS());\r\n                values.put(\"mg\", soilPojo.getMg());\r\n                values.put(\"k\", soilPojo.getK());\r\n                values.put(\"n\", soilPojo.getN());\r\n                values.put(\"ca\", soilPojo.getCa());\r\n                values.put(\"land_id\", soilPojo.getLand_id());\r\n                if (id.equals(\"\")){\r\n                    db.insert(\"updated_soil\", null, values);\r\n\r\n                }else {\r\n                    db.update(\"updated_soil\", values, \"id = '\" + id + \"'\", null);\r\n\r\n                }\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n    public SoilPojo getSoilDetail(String id) {\r\n        SoilPojo soilPojo = new SoilPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from updated_soil where id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        soilPojo = new SoilPojo();\r\n\r\n                        soilPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        soilPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        soilPojo.setSoil_updated_date(cursor.getString(cursor.getColumnIndex(\"updated_soil_date\")));\r\n                        soilPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        soilPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        soilPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        soilPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        soilPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        soilPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        soilPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        soilPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        soilPojo.setS((cursor.getString(cursor.getColumnIndex(\"s\"))));\r\n                        soilPojo.setK((cursor.getString(cursor.getColumnIndex(\"k\"))));\r\n                        soilPojo.setCa((cursor.getString(cursor.getColumnIndex(\"ca\"))));\r\n                        soilPojo.setLand_id((cursor.getString(cursor.getColumnIndex(\"land_id\"))));\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return soilPojo;\r\n    }\r\n    public void updateQueryData(HelplinePojo user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"response_by\", user.getResponse_by());\r\n                values.put(\"response\", user.getResponse());\r\n                values.put(\"flag\", 0);\r\n                db.update(\"help_line\", values, \"id = '\" + id + \"'\", null);\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<HelplinePojo> getQueryListData(String name,String fromAnswer) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<HelplinePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String quer = \"\";\r\n                if (fromAnswer.equals(\"1\")){\r\n                    if (name.equals(\"\"))\r\n                        quer = \"select * from help_line  where  response != '' or  response != null\";\r\n                    else\r\n                        quer = \"select * from help_line where farmer_id = '\" + name + \"' and  response != '' or  response != null\";\r\n                }else if (fromAnswer.equals(\"0\")){\r\n                    if (name.equals(\"\"))\r\n                        quer = \"select * from help_line where response = '' or  response = null\";\r\n                    else\r\n                        quer = \"select * from help_line where farmer_id = '\" + name + \"'  and  response = '' or  response = null\";\r\n                }else {\r\n                    if (name.equals(\"\"))\r\n                        quer = \"select * from help_line\";\r\n                    else\r\n                        quer = \"select * from help_line where farmer_id = '\" + name + \"'\";\r\n                }\r\n                Cursor cursor = db.rawQuery(quer, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        HelplinePojo helplinePojo = new HelplinePojo();\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        helplinePojo.setQuery_date(cursor.getString(cursor.getColumnIndex(\"query_date\")));\r\n                        helplinePojo.setQuery(cursor.getString(cursor.getColumnIndex(\"query\")));\r\n                        helplinePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        helplinePojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        helplinePojo.setResponse(cursor.getString(cursor.getColumnIndex(\"response\")));\r\n                        helplinePojo.setAudio_file(cursor.getString(cursor.getColumnIndex(\"audio_file\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(helplinePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<HelplinePojo> getQueryListDataForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<HelplinePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String quer = \"select * from help_line where flag = 0\";\r\n                Cursor cursor = db.rawQuery(quer, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        HelplinePojo helplinePojo = new HelplinePojo();\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"local_id\")));\r\n                        String incomingDateDob = cursor.getString(cursor.getColumnIndex(\"query_date\"));\r\n                        SimpleDateFormat inputDateFormat = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\r\n                        Date newDate = inputDateFormat.parse(incomingDateDob);\r\n                        inputDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n                        String outputDateDob = inputDateFormat.format(newDate);\r\n                        helplinePojo.setQuery_date(outputDateDob);\r\n                        helplinePojo.setQuery(cursor.getString(cursor.getColumnIndex(\"query\")));\r\n                        helplinePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        helplinePojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(helplinePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<HelplinePojo> getQueryResponseForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<HelplinePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String quer = \"select * from help_line where flag = 0\";\r\n                Cursor cursor = db.rawQuery(quer, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        HelplinePojo helplinePojo = new HelplinePojo();\r\n                        helplinePojo.setHelp_line_id(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"local_id\")));\r\n                        helplinePojo.setResponse(cursor.getString(cursor.getColumnIndex(\"response\")));\r\n                        helplinePojo.setResponse_by(cursor.getString(cursor.getColumnIndex(\"response_by\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(helplinePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public HelplinePojo getQuesryDetail(String id) {\r\n        HelplinePojo helplinePojo = new HelplinePojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from help_line where id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        helplinePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        helplinePojo.setQuery(cursor.getString(cursor.getColumnIndex(\"query\")));\r\n                        helplinePojo.setQuery_date(cursor.getString(cursor.getColumnIndex(\"query_date\")));\r\n                        helplinePojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        helplinePojo.setResponse(cursor.getString(cursor.getColumnIndex(\"response\")));\r\n//                        helplinePojo.setAudio_file(cursor.getString(cursor.getColumnIndex(\"audio_file\")));\r\n\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return helplinePojo;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------------------------*/\r\n    public int getLastInsertedLocalID() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM users ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    public int getSalesCount(String table_name,String ids) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT count(local_id) FROM '\"+ table_name +\"' where unique_id = '\"+ ids +\"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"count(local_id)\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    public int getLastInsertedLocalIdForVendor() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM supplier_registration ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public int getvisitCount(String plant_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"select count(local_id) from plant_growth where plant_id = '\" + plant_id + \"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"count(local_id)\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    public int getlandvisitCount(String plant_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"select count(c.land_id) as co from plant_growth p , crop_planning c where c.id = p.plant_id and c.land_id = '\"+ plant_id +\"' group by c.land_id\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"co\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public int getCountTables(String table, String plant_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"select count(local_id) from '\" + table + \"' where crop_type_catagory_id = '\" + plant_id + \"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"count(local_id)\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getTableDataToBeSync() {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<FarmerRegistrationPojo>();\r\n        FarmerRegistrationPojo registrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select farmer_registration.id as f_id,farmer_registration.user_id as f_user_id,users.id as u_id,first_name,last_name,users.mobile as mobile,email,household_no,farmer_name,father_husband_name,category_id,id_type_id,id_other_name,id_no,bpl,address,age,date_of_birth,what_you_know,physical_challenges,handicapped,alternative_livelihood_id,nof_member_migrated,religion_id,multi_cropping,fertilizer,irrigation_facility,caste,gender,total_land_holding,agro_climat_zone_id,add_by,education_id,education_qualification,education_other_name,profile_photo,state_id,district_id,block_id,village_id,pincode,farmer_registration.offline_sync, farmer_registration.flag from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id WHERE farmer_registration.flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        registrationPojo = new FarmerRegistrationPojo();\r\n                        registrationPojo.setFirst_name(cursor.getString(cursor.getColumnIndex(\"first_name\")));\r\n                        registrationPojo.setLast_name(cursor.getString(cursor.getColumnIndex(\"last_name\")));\r\n                        registrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        registrationPojo.setEmail(cursor.getString(cursor.getColumnIndex(\"email\")));\r\n                        registrationPojo.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                        registrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        registrationPojo.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                        registrationPojo.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                        registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                        registrationPojo.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                        registrationPojo.setId_no(cursor.getString(cursor.getColumnIndex(\"id_no\")));\r\n                        registrationPojo.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                        registrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        registrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        registrationPojo.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                        registrationPojo.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                        registrationPojo.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                        registrationPojo.setHandicapped(cursor.getString(cursor.getColumnIndex(\"handicapped\")));\r\n                        registrationPojo.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                        //registrationPojo.setCrop_vegetable_details(cursor.getString(cursor.getColumnIndex(\"crop_vegetable_details\")));\r\n                        registrationPojo.setNof_member_migrated(cursor.getString(cursor.getColumnIndex(\"nof_member_migrated\")));\r\n                        registrationPojo.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                        registrationPojo.setMulti_cropping(cursor.getString(cursor.getColumnIndex(\"multi_cropping\")));\r\n                        registrationPojo.setFertilizer(cursor.getString(cursor.getColumnIndex(\"fertilizer\")));\r\n                        registrationPojo.setIrrigation_facility(cursor.getString(cursor.getColumnIndex(\"irrigation_facility\")));\r\n                        registrationPojo.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                        registrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                        registrationPojo.setTotal_land_holding(cursor.getString(cursor.getColumnIndex(\"total_land_holding\")));\r\n                        registrationPojo.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                        registrationPojo.setAdd_by(cursor.getString(cursor.getColumnIndex(\"add_by\")));\r\n                        registrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        //registrationPojo.setEducation_qualification(cursor.getString(cursor.getColumnIndex(\"education_qualification\")));\r\n                        registrationPojo.setEducation_other_name(cursor.getString(cursor.getColumnIndex(\"education_other_name\")));\r\n                        registrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                        registrationPojo.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        registrationPojo.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        registrationPojo.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                        registrationPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        registrationPojo.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                        registrationPojo.setOffline_sync(cursor.getInt(cursor.getColumnIndex(\"offline_sync\")));\r\n                        registrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"f_id\")));//(farmer registration table)\r\n                        registrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"f_user_id\")));//(farmer registration table)\r\n                        registrationPojo.setUid(cursor.getString(cursor.getColumnIndex(\"u_id\")));//(users table)\r\n                        registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));//(users table)\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(registrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n//////////////////////\r\n    public ArrayList<ParyavaranSakhiRegistrationPojo> getPSFarmerForSyn() {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ArrayList<ParyavaranSakhiRegistrationPojo> arrayList = new ArrayList<ParyavaranSakhiRegistrationPojo>();\r\n        ParyavaranSakhiRegistrationPojo registrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from ps_farmer_registration WHERE flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        registrationPojo = new ParyavaranSakhiRegistrationPojo();\r\n                        registrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        registrationPojo.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                        registrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        registrationPojo.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                        registrationPojo.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                        registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                        registrationPojo.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                        registrationPojo.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                        registrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        registrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        registrationPojo.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                        registrationPojo.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                        registrationPojo.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                        registrationPojo.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                        registrationPojo.setNo_of_member_migrated(cursor.getString(cursor.getColumnIndex(\"no_of_member_migrated\")));\r\n                        registrationPojo.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                        registrationPojo.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                        registrationPojo.setTotal_land_holding(cursor.getString(cursor.getColumnIndex(\"total_land_holding\")));\r\n                        registrationPojo.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                        registrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        registrationPojo.setFarmer_image(cursor.getString(cursor.getColumnIndex(\"farmer_image\")));\r\n                        registrationPojo.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        registrationPojo.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        registrationPojo.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                        registrationPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        registrationPojo.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                        registrationPojo.setAnnual_income(cursor.getString(cursor.getColumnIndex(\"annual_income\")));\r\n                        registrationPojo.setMartial_category(cursor.getString(cursor.getColumnIndex(\"martial_category\")));\r\n                         //registrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"f_user_id\")));//(farmer registration table)\r\n                        registrationPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));//(users table)\r\n                        registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));//(users table)\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(registrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<FarmerFamilyPojo> getFarmerFamilyTableDataToBeSync() {\r\n        ArrayList<FarmerFamilyPojo> arrayList = new ArrayList<FarmerFamilyPojo>();\r\n        FarmerFamilyPojo familyPojo;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from farmer_family where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        familyPojo = new FarmerFamilyPojo();\r\n                        familyPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        familyPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        familyPojo.setOther_education(cursor.getString(cursor.getColumnIndex(\"other_education\")));\r\n                        familyPojo.setMonthly_income(cursor.getString(cursor.getColumnIndex(\"monthly_income\")));\r\n                        familyPojo.setOccupation(cursor.getString(cursor.getColumnIndex(\"occupation\")));\r\n                        familyPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        familyPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                        familyPojo.setRelation_id(cursor.getString(cursor.getColumnIndex(\"relation_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(familyPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropVegitableDetails> getCropVegetableDataToBeSync() {\r\n        ArrayList<CropVegitableDetails> arrayList = new ArrayList<>();\r\n        CropVegitableDetails familyPojo;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_vegetable_details where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        familyPojo = new CropVegitableDetails();\r\n                        familyPojo.setCrop_name(cursor.getString(cursor.getColumnIndex(\"crop_name\")));\r\n                        familyPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        familyPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        familyPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        familyPojo.setUnit_id(cursor.getString(cursor.getColumnIndex(\"unit_id\")));\r\n                        familyPojo.setUnits_id(cursor.getString(cursor.getColumnIndex(\"units_id\")));\r\n                        familyPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(familyPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public void updateId(String tableName, String updateFieldName, int server_id, int localId, String wherefieldName) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                ContentValues value = new ContentValues();\r\n                value.put(updateFieldName, server_id); // Name\r\n\r\n                long id= db.update(tableName, value, wherefieldName + \" = \" + localId, null);\r\n                db.close();\r\n                Log.e(\"Tag\", \"updateId: \" +id);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n    public long updateHouseHold(String table, String whr, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"household_no\", flag);\r\n                inserted_id = db.update(table, values, whr + \" = '\" + local_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n\r\n\r\n    public void updateLandId(String tableName, String updateFieldName, String server_id, int localId, String wherefieldName) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                ContentValues value = new ContentValues();\r\n                value.put(updateFieldName, server_id); // Name\r\n\r\n                db.update(tableName, value, wherefieldName + \" = \" + localId, null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public long updateFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n                if (table.equals(\"users\")) {\r\n                    inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n                } else {\r\n                    inserted_id = db.update(table, values, \"user_id\" + \" = \" + local_id + \"\", null);\r\n                }\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateLocalFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateInputOrderingStatus(String table, int category_id, String status) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"status\", status);\r\n\r\n                inserted_id = db.update(table, values, \"input_type_id\" + \" = \" + category_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateInputOrderingStatusId(String table, int category_id, String statusId) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"status_id\", statusId);\r\n\r\n                inserted_id = db.update(table, values, \"input_type_id\" + \" = \" + category_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateInputOrderingVendorId(String table, int category_id, String vendorId) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"vender_id\", vendorId);\r\n\r\n                inserted_id = db.update(table, values, \"input_type_id\" + \" = \" + category_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateAddLandFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateAddPlantFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateAddPlantID(String table, int local_id, String flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"plant_id\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = '\" + local_id + \"'\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateServerid(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateLandServeridInCropPlanning(String table, String id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"land_id\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"land_id\" + \" = \" + id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateLandServeridInPlantGrowth(String table, String id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n\r\n                values.put(\"crop_planing_id\", flag);\r\n                values.put(\"plant_id\", flag);\r\n                inserted_id = db.update(table, values, \"crop_planing_id\" + \" = \" + id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateTotalTree(String table, String local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"total_tree\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n\r\n    public long updateCloseId(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"is_close\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateStatusInTrainning(String table, int local_id, String flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"status\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n\r\n    public long updateImageRemarks(String table, int local_id, String remarks,String base64) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"remarks\", remarks);\r\n                values.put(\"plant_image\", base64);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public String getNameById(String tableName, String colName, String whrCol, int whrId) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String name = \"\";\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select \" + colName + \" from \" + tableName + \" where \" + whrCol + \" =\" + whrId;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    name = cursor.getString(cursor.getColumnIndex(colName));\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return name;\r\n    }\r\n    public String getNameByIdLang(String tableName, String colName, String whrCol, int whrId,String whrCol2, int language_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String name = \"\";\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select \" + colName + \" from \" + tableName + \" where \" + whrCol + \" =\" + whrId + \"and\" +whrCol2 + \" =\"+ language_id;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    name = cursor.getString(cursor.getColumnIndex(colName));\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return name;\r\n    }\r\n\r\n    public String getNameByIdlocation(String tableName, String colName, String whrCol, int whrId,String langa) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String name = \"\";\r\n        int lang=0;\r\n        if (langa.equals(\"hin\"))\r\n            lang=2;\r\n        else if (langa.equals(\"kan\"))\r\n            lang=3;\r\n        else\r\n            lang=1;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select \" + colName + \" from \" + tableName + \" where \" + whrCol + \" =\" + whrId + \" and language_id = \"+ lang +\" \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    name = cursor.getString(cursor.getColumnIndex(colName));\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return name.trim();\r\n    }\r\n\r\n\r\n    public ArrayList<LandHoldingPojo> getAddLandDataToBeSync() {\r\n        ArrayList<LandHoldingPojo> arrayList = new ArrayList<LandHoldingPojo>();\r\n        LandHoldingPojo landHoldingPojo;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from land_holding where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new LandHoldingPojo();\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        landHoldingPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        //      landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n                        //      landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n                        landHoldingPojo.setOffline_sync(cursor.getInt(cursor.getColumnIndex(\"offline_sync\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n//    public ArrayList<PSLandHoldingPojo> getPSLandSyn() {\r\n//        ArrayList<PSLandHoldingPojo> arrayList = new ArrayList<PSLandHoldingPojo>();\r\n//        PSLandHoldingPojo landHoldingPojo;\r\n//        SQLiteDatabase db = this.getWritableDatabase();\r\n//        try {\r\n//            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n//                String query = \"select * from ps_land_holding where flag = 0\";\r\n//                Cursor cursor = db.rawQuery(query, null);\r\n//                if (cursor != null && cursor.getCount() > 0) {\r\n//                    cursor.moveToFirst();\r\n//                    while (!cursor.isAfterLast()) {\r\n//                        landHoldingPojo = new PSLandHoldingPojo();\r\n//                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n//                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n//                        landHoldingPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n//                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n//                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n//                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n//                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n//                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n//                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n//                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n//                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n//                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n//                        //landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n//                       // landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n//                        //      landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n//                        //      landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n////                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n////                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n////                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n////                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n////                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n////                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n////                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n////                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n////                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n////                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n////                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n////                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n//                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n//                      //  landHoldingPojo.setOffline_sync(cursor.getInt(cursor.getColumnIndex(\"offline_sync\")));\r\n//\r\n//                        cursor.moveToNext();\r\n//                        arrayList.add(landHoldingPojo);\r\n//                    }\r\n//                    db.close();\r\n//                }\r\n//            }\r\n//        } catch (Exception e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//        return arrayList;\r\n//    }\r\n\r\n\r\n    public ArrayList<CropPlaningPojo> getAddPlantDataToBeSync() {\r\n        ArrayList<CropPlaningPojo> arrayList = new ArrayList<CropPlaningPojo>();\r\n        CropPlaningPojo landHoldingPojo;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_planning where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new CropPlaningPojo();\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        landHoldingPojo.setPlant_name(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        landHoldingPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        landHoldingPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        landHoldingPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        landHoldingPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        landHoldingPojo.setSeason(cursor.getString(cursor.getColumnIndex(\"season\")));\r\n                        landHoldingPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<TrainingPojo> getTrainningToBeSync() {\r\n        ArrayList<TrainingPojo> arrayList = new ArrayList<TrainingPojo>();\r\n        TrainingPojo landHoldingPojo;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from training where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new TrainingPojo();\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setGroup_id(cursor.getString(cursor.getColumnIndex(\"group_id\")));\r\n                        landHoldingPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        landHoldingPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        landHoldingPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        landHoldingPojo.setTo_date(cursor.getString(cursor.getColumnIndex(\"to_date\")));\r\n                        landHoldingPojo.setTo_time(cursor.getString(cursor.getColumnIndex(\"to_time\")));\r\n                        landHoldingPojo.setFrom_time(cursor.getString(cursor.getColumnIndex(\"from_time\")));\r\n                        landHoldingPojo.setFrom_date(cursor.getString(cursor.getColumnIndex(\"from_date\")));\r\n                        landHoldingPojo.setTraining_name(cursor.getString(cursor.getColumnIndex(\"training_name\")));\r\n                        landHoldingPojo.setBrief_description(cursor.getString(cursor.getColumnIndex(\"brief_description\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setTrainer_name(cursor.getString(cursor.getColumnIndex(\"trainer_name\")));\r\n                        landHoldingPojo.setTrainer_designation(cursor.getString(cursor.getColumnIndex(\"trainer_designation\")));\r\n                        landHoldingPojo.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public int getLastInsertedLocalId() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM land_holding ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public long saveInputOrderingDataInTable(InputOrderingPojo inputOrderingPojo) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", sharedPrefHelper.getString(\"user_id\", \"\"));\r\n                values.put(\"request_date_to\", inputOrderingPojo.getRequest_date_to());\r\n                values.put(\"request_date_from\", inputOrderingPojo.getRequest_date_from());\r\n                values.put(\"input_type_id\", inputOrderingPojo.getInput_type_id());\r\n                values.put(\"quantity\", inputOrderingPojo.getQuantity());\r\n                values.put(\"quantity_units\", inputOrderingPojo.getQuantity_units());\r\n                values.put(\"status\", inputOrderingPojo.getStatus());\r\n                values.put(\"status_id\", inputOrderingPojo.getStatus_id());\r\n                values.put(\"farmer_id\", inputOrderingPojo.getFarmer_id());\r\n                values.put(\"remarks\", inputOrderingPojo.getRemarks());\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"input_ordering\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public HashMap<String, Integer> getMasterSpinnerId(int master_type, int language_id) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        MasterPojo masterPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from master where  master_type= '\" + master_type + \"' and language_id ='\"+language_id+\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        masterPojo = new MasterPojo();\r\n                        masterPojo.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        masterPojo.setCaption_id(cursor.getString(cursor.getColumnIndex(\"caption_id\")));\r\n                        cursor.moveToNext();\r\n                        hashMap.put(masterPojo.getMaster_name(), Integer.parseInt(masterPojo.getCaption_id()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getAllPSFARMER() {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        ParyavaranSakhiRegistrationPojo paryavaranSakhiRegistrationPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from ps_farmer_registration order by local_id desc\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        paryavaranSakhiRegistrationPojo = new ParyavaranSakhiRegistrationPojo();\r\n                        paryavaranSakhiRegistrationPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        paryavaranSakhiRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n\r\n                        cursor.moveToNext();\r\n                        hashMap.put(paryavaranSakhiRegistrationPojo.getFarmer_name(), Integer.parseInt(paryavaranSakhiRegistrationPojo.getLocal_id()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n    public DisclaimerPojo getdisclaimer(int id, int language_id) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        DisclaimerPojo disclaimerPojo = new DisclaimerPojo();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \" select * from disclaimer where  id= '\" + id + \"' and language_id ='\"+language_id+\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        disclaimerPojo.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n                        disclaimerPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        cursor.moveToNext();\r\n                        // hashMap.put(disclaimerPojo.getTitle(), Integer.parseInt(disclaimerPojo.getDescription()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return disclaimerPojo;\r\n    }\r\n\r\n    public AboutUs getaboutus(int id, int language_id) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        AboutUs aboutUsPojo = new AboutUs();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \" select * from contact_us where  id= '\" + id + \"' and language_id ='\"+language_id+\"'\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        aboutUsPojo.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n                        aboutUsPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        cursor.moveToNext();\r\n                        // hashMap.put(disclaimerPojo.getTitle(), Integer.parseInt(disclaimerPojo.getDescription()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return aboutUsPojo;\r\n    }\r\n\r\n    public ArrayList<InputOrderingPojo> getInputOrderingList(String selected_farmer, String tab_type) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<InputOrderingPojo> arrayList = new ArrayList<>();\r\n        InputOrderingPojo inputOrderingPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query=\"\";\r\n                if (selected_farmer.equals(\"\") && !tab_type.equals(\"\")) {\r\n                    query = \"SELECT * FROM input_ordering where status_id ='\"+tab_type+\"' order by id DESC \";\r\n                }\r\n                else if (!selected_farmer.equals(\"\") && !tab_type.equals(\"\")) {\r\n                    query = \"SELECT * FROM input_ordering where farmer_id = '\" + selected_farmer + \"' and status_id='\"+tab_type+\"' order by id DESC\";\r\n                }\r\n                else if (selected_farmer.equals(\"\") && tab_type.equals(\"\")) {\r\n                    query = \"SELECT * FROM input_ordering order by id DESC\";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingPojo = new InputOrderingPojo();\r\n                        inputOrderingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        inputOrderingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingPojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        inputOrderingPojo.setRequest_date_to(cursor.getString(cursor.getColumnIndex(\"request_date_to\")));\r\n                        inputOrderingPojo.setRequest_date_from(cursor.getString(cursor.getColumnIndex(\"request_date_from\")));\r\n                        inputOrderingPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        inputOrderingPojo.setQuantity_units(cursor.getString(cursor.getColumnIndex(\"quantity_units\")));\r\n                        inputOrderingPojo.setStatus_id(cursor.getString(cursor.getColumnIndex(\"status_id\")));\r\n                        inputOrderingPojo.setInput_type_id(cursor.getString(cursor.getColumnIndex(\"input_type_id\")));\r\n                        inputOrderingPojo.setVender_id(cursor.getString(cursor.getColumnIndex(\"vender_id\")));\r\n                        inputOrderingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public FarmerRegistrationPojo getFarmerDetailsForEdit(String user_id) {\r\n        FarmerRegistrationPojo registrationPojo = new FarmerRegistrationPojo();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id WHERE farmer_registration.user_id=\" + user_id;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    registrationPojo.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                    registrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                    registrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                    registrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                    registrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                    registrationPojo.setId_no(cursor.getString(cursor.getColumnIndex(\"id_no\")));\r\n                    registrationPojo.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                    registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                    //registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                    registrationPojo.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                    registrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                    registrationPojo.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                    registrationPojo.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                    registrationPojo.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                    registrationPojo.setNof_member_migrated(cursor.getString(cursor.getColumnIndex(\"nof_member_migrated\")));\r\n                    registrationPojo.setEducation_other_name(cursor.getString(cursor.getColumnIndex(\"education_other_name\")));\r\n                    //  registrationPojo.setCrop_vegetable_details(cursor.getString(cursor.getColumnIndex(\"crop_vegetable_details\")));\r\n                    registrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                    registrationPojo.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                    registrationPojo.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                    registrationPojo.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                    registrationPojo.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                    registrationPojo.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                    registrationPojo.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                    registrationPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                    registrationPojo.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                    registrationPojo.setAdd_by(cursor.getString(cursor.getColumnIndex(\"add_by\")));\r\n                    registrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                    registrationPojo.setAnnual_income(cursor.getInt(cursor.getColumnIndex(\"annual_income\")));\r\n                    registrationPojo.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                    registrationPojo.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                    //registrationPojo.setHandicapped(cursor.getString(cursor.getColumnIndex(\"handicapped\")));\r\n                    //registrationPojo.setMulti_cropping(cursor.getString(cursor.getColumnIndex(\"multi_cropping\")));\r\n                    registrationPojo.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                    //registrationPojo.setIrrigation_facility(cursor.getString(cursor.getColumnIndex(\"irrigation_facility\")));\r\n                    //registrationPojo.setEducation_qualification(cursor.getString(cursor.getColumnIndex(\"education_qualification\")));\r\n                    registrationPojo.setEducation_name_other(cursor.getString(cursor.getColumnIndex(\"education_name_other\")));\r\n                    registrationPojo.setTotal_land_holding(cursor.getString(cursor.getColumnIndex(\"total_land_holding\")));\r\n                    registrationPojo.setFertilizer(cursor.getString(cursor.getColumnIndex(\"fertilizer\")));\r\n                    registrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                    registrationPojo.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                    registrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                    registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));//(users table)\r\n\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return registrationPojo;\r\n    }\r\n    public ParyavaranSakhiRegistrationPojo getPSEdit(String farmerId) {\r\n        ParyavaranSakhiRegistrationPojo registrationPojo = new ParyavaranSakhiRegistrationPojo();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from ps_farmer_registration WHERE local_id=\" + farmerId;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    registrationPojo.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                   // registrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                   // registrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                    registrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                    registrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                    //registrationPojo.setId_no(cursor.getString(cursor.getColumnIndex(\"id_no\")));\r\n                    registrationPojo.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                    registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                    registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));\r\n                    //registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                    registrationPojo.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                    registrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                    registrationPojo.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                    registrationPojo.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                    registrationPojo.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                    registrationPojo.setNo_of_member_migrated(cursor.getString(cursor.getColumnIndex(\"no_of_member_migrated\")));\r\n                   // registrationPojo.setEducation_other_name(cursor.getString(cursor.getColumnIndex(\"education_other_name\")));\r\n                    //  registrationPojo.setCrop_vegetable_details(cursor.getString(cursor.getColumnIndex(\"crop_vegetable_details\")));\r\n                    registrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                    registrationPojo.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                    registrationPojo.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                    registrationPojo.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                    registrationPojo.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                    registrationPojo.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                    registrationPojo.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                    registrationPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                    registrationPojo.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                   // registrationPojo.setAdd_by(cursor.getString(cursor.getColumnIndex(\"add_by\")));\r\n                    registrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                  //  registrationPojo.setAnnual_income(cursor.getInt(cursor.getColumnIndex(\"annual_income\")));\r\n                    registrationPojo.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                    registrationPojo.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n//                    registrationPojo.setHandicapped(cursor.getString(cursor.getColumnIndex(\"handicapped\")));\r\n//                    registrationPojo.setMulti_cropping(cursor.getString(cursor.getColumnIndex(\"multi_cropping\")));\r\n                    registrationPojo.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n//                    registrationPojo.setIrrigation_facility(cursor.getString(cursor.getColumnIndex(\"irrigation_facility\")));\r\n                    //registrationPojo.setEducation_qualification(cursor.getString(cursor.getColumnIndex(\"education_qualification\")));\r\n//                    registrationPojo.setEducation_name_other(cursor.getString(cursor.getColumnIndex(\"education_name_other\")));\r\n                    registrationPojo.setTotal_land_holding(cursor.getString(cursor.getColumnIndex(\"total_land_holding\")));\r\n//                    registrationPojo.setFertilizer(cursor.getString(cursor.getColumnIndex(\"fertilizer\")));\r\n                  //  registrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                    registrationPojo.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                    registrationPojo.setFarmer_image(cursor.getString(cursor.getColumnIndex(\"farmer_image\")));\r\n                    registrationPojo.setMartial_category(cursor.getString(cursor.getColumnIndex(\"martial_category\")));\r\n                 //   registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));//(users table)\r\n\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return registrationPojo;\r\n    }\r\n\r\n\r\n    public ArrayList<SupplierRegistrationPojo> getVendorsList(String category_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SupplierRegistrationPojo> arrayList = new ArrayList<>();\r\n        SupplierRegistrationPojo supplierRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"SELECT * FROM supplier_registration WHERE (',' || vender_category || ',') LIKE '%,\" + category_id + \",%'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        supplierRegistrationPojo = new SupplierRegistrationPojo();\r\n                        supplierRegistrationPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        supplierRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        supplierRegistrationPojo.setVender_category(cursor.getString(cursor.getColumnIndex(\"vender_category\")));\r\n                        supplierRegistrationPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(supplierRegistrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<InputOrderingPojo> getInputOrderingDataToBeSync() {\r\n        ArrayList<InputOrderingPojo> arrayList = new ArrayList<InputOrderingPojo>();\r\n        InputOrderingPojo inputOrderingPojo;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from input_ordering where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingPojo = new InputOrderingPojo();\r\n                        inputOrderingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        inputOrderingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingPojo.setRequest_date_from(cursor.getString(cursor.getColumnIndex(\"request_date_from\")));\r\n                        inputOrderingPojo.setRequest_date_to(cursor.getString(cursor.getColumnIndex(\"request_date_to\")));\r\n                        inputOrderingPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        inputOrderingPojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        inputOrderingPojo.setQuantity_units(cursor.getString(cursor.getColumnIndex(\"quantity_units\")));\r\n                        inputOrderingPojo.setStatus_id(cursor.getString(cursor.getColumnIndex(\"status_id\")));\r\n                        inputOrderingPojo.setInput_type_id(cursor.getString(cursor.getColumnIndex(\"input_type_id\")));\r\n                        inputOrderingPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public int getLastInsertedIovId() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM input_ordering_vender ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public long saveInputOrderingVendorDataInTable(InputOrderingVendor inputOrderingVendor) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"input_ordering_id\", inputOrderingVendor.getInput_ordering_id());\r\n                values.put(\"user_id\", inputOrderingVendor.getUser_id());\r\n                values.put(\"vender_id\", inputOrderingVendor.getVendor_id());\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"input_ordering_vender\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<InputOrderingVendor> getInputOrderingVendorDataToBeSync() {\r\n        ArrayList<InputOrderingVendor> arrayList = new ArrayList<InputOrderingVendor>();\r\n        InputOrderingVendor inputOrderingVendor;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from input_ordering_vender where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingVendor = new InputOrderingVendor();\r\n                        inputOrderingVendor.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingVendor.setInput_ordering_id(cursor.getString(cursor.getColumnIndex(\"input_ordering_id\")));\r\n                        inputOrderingVendor.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingVendor.setVender_id(cursor.getString(cursor.getColumnIndex(\"vender_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingVendor);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public void updateStatus(String tableName, String updateFieldName, String server_id, int localId, String wherefieldName) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                ContentValues value = new ContentValues();\r\n                value.put(updateFieldName, server_id); // Name\r\n\r\n                db.update(tableName, value, wherefieldName + \" = \" + localId, null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<VendorRegModal> getVendorRegistrationDataToBeSync() {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ArrayList<VendorRegModal> arrayList = new ArrayList<VendorRegModal>();\r\n        VendorRegModal vendorRegModal;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from supplier_registration WHERE flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        vendorRegModal = new VendorRegModal();\r\n                        //vendorRegModal.setFirst_name(cursor.getString(cursor.getColumnIndex(\"\")));\r\n                        //vendorRegModal.setLast_name(cursor.getString(cursor.getColumnIndex(\"\")));\r\n                        vendorRegModal.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        //vendorRegModal.setEmail(cursor.getString(cursor.getColumnIndex(\"\")));\r\n                        vendorRegModal.setSupplier_name(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        vendorRegModal.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        vendorRegModal.setEmail(cursor.getString(cursor.getColumnIndex(\"email\")));\r\n                        vendorRegModal.setVender_category(cursor.getString(cursor.getColumnIndex(\"vender_category\")));\r\n                        vendorRegModal.setGstn_no(cursor.getString(cursor.getColumnIndex(\"gstn_no\")));\r\n                        vendorRegModal.setGstn_image(cursor.getString(cursor.getColumnIndex(\"gstn_image\")));\r\n                        vendorRegModal.setPan_no(cursor.getString(cursor.getColumnIndex(\"pan_no\")));\r\n                        vendorRegModal.setPan_image(cursor.getString(cursor.getColumnIndex(\"pan_image\")));\r\n                        vendorRegModal.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                        vendorRegModal.setAadhar_image(cursor.getString(cursor.getColumnIndex(\"aadhar_image\")));\r\n                        vendorRegModal.setProprietor_no(cursor.getString(cursor.getColumnIndex(\"proprietor_no\")));\r\n                        vendorRegModal.setProprietor_image(cursor.getString(cursor.getColumnIndex(\"proprietor_image\")));\r\n                        vendorRegModal.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        vendorRegModal.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        //vendorRegModal.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(vendorRegModal);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<InputOrderingPojo> getFilterInputOrderingList(int seeds_id, int farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<InputOrderingPojo> arrayList = new ArrayList<>();\r\n        InputOrderingPojo inputOrderingPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id != 0) {\r\n                    query = \"SELECT * FROM input_ordering WHERE farmer_id = '\" + farmer_id + \"'\";\r\n                } else if (seeds_id != 0) {\r\n                    query = \"SELECT * FROM input_ordering WHERE input_type_id = '\" + seeds_id + \"'\";\r\n                } else {\r\n                    query = \"SELECT * FROM input_ordering WHERE input_type_id = '\" + seeds_id + \"' and farmer_id = '\" + farmer_id + \"'\";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingPojo = new InputOrderingPojo();\r\n                        inputOrderingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        inputOrderingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingPojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        inputOrderingPojo.setRequest_date_to(cursor.getString(cursor.getColumnIndex(\"request_date_to\")));\r\n                        inputOrderingPojo.setRequest_date_from(cursor.getString(cursor.getColumnIndex(\"request_date_from\")));\r\n                        inputOrderingPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        inputOrderingPojo.setQuantity_units(cursor.getString(cursor.getColumnIndex(\"quantity_units\")));\r\n                        inputOrderingPojo.setStatus_id(cursor.getString(cursor.getColumnIndex(\"status_id\")));\r\n                        inputOrderingPojo.setInput_type_id(cursor.getString(cursor.getColumnIndex(\"input_type_id\")));\r\n                        inputOrderingPojo.setVender_id(cursor.getString(cursor.getColumnIndex(\"vender_id\")));\r\n                        inputOrderingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public int getPlantId(int ids,int farmer_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM crop_planning where crop_type_subcatagory_id = '\"+ ids +\"' and farmer_id = '\"+ farmer_id +\"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public int getSupplierID() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM supplier_registration ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public long updateUsersData(UsersPojo user, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long inserted_id = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"first_name\", user.getFirst_name());\r\n                values.put(\"last_name\", user.getLast_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"email\", user.getEmail());\r\n                values.put(\"profile_photo\", user.getProfile_photo());\r\n                values.put(\"flag\", 0);\r\n\r\n                db.update(\"users\", values, \"id =\" + user_id, null);\r\n                db.close();\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateFarmerRegistrationData(FarmerRegistrationPojo user, String farmer_id, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", user_id);\r\n                values.put(\"household_no\", user.getHousehold_no());\r\n                values.put(\"farmer_name\", user.getFarmer_name());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"date_of_birth\", user.getDate_of_birth());\r\n                values.put(\"what_you_know\", user.getWhat_you_know());\r\n                values.put(\"id_type_id\", user.getId_type_id());\r\n                values.put(\"id_no\", user.getId_no());\r\n                values.put(\"father_husband_name\", user.getFather_husband_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"bpl\", user.getBpl());\r\n                //values.put(\"education_qualification\", user.getEducation_qualification());\r\n                values.put(\"physical_challenges\", user.getPhysical_challenges());\r\n                values.put(\"handicapped\", user.getHandicapped());\r\n                values.put(\"total_land_holding\", user.getTotal_land_holding());\r\n                values.put(\"nof_member_migrated\", user.getNof_member_migrated());\r\n                //values.put(\"crop_vegetable_details\", user.getCrop_vegetable_details());\r\n                values.put(\"multi_cropping\", user.getMulti_cropping());\r\n                values.put(\"fertilizer\", user.getFertilizer());\r\n                values.put(\"irrigation_facility\", user.getIrrigation_facility());\r\n                values.put(\"religion_id\", user.getReligion_id());\r\n                values.put(\"category_id\", user.getCategory_id());\r\n                values.put(\"caste\", user.getCaste());\r\n                values.put(\"annual_income\", user.getAnnual_income());\r\n                values.put(\"agro_climat_zone_id\", user.getAgro_climat_zone_id());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n                values.put(\"block_id\", user.getBlock_id());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"pincode\", user.getPincode());\r\n                values.put(\"id_other_name\", user.getId_other_name());\r\n                values.put(\"alternative_livelihood_id\", user.getAlternative_livelihood_id());\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"flag\", 0);\r\n                values.put(\"offline_sync\", 1);\r\n\r\n                //Inserting Row\r\n                ids = db.update(\"farmer_registration\", values, \"id = '\" + farmer_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<VisitPlantModel> getVisitPlantList(String selected_farmer, String land_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<VisitPlantModel> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query;\r\n                if (!selected_farmer.equals(\"\")) {\r\n                    query = \"select * from crop_planning where farmer_id = '\" + selected_farmer + \"' \";\r\n\r\n                }else\r\n                if (!land_id.equals(\"\")) {\r\n                    query = \"select * from crop_planning where land_id = '\" + land_id + \"' \";\r\n\r\n                } else {\r\n                    query = \"select * from crop_planning\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        VisitPlantModel visitPlantModel = new VisitPlantModel();\r\n                        visitPlantModel.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        visitPlantModel.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        visitPlantModel.setPlant_name(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        visitPlantModel.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        visitPlantModel.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        visitPlantModel.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        visitPlantModel.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        visitPlantModel.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        visitPlantModel.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        visitPlantModel.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(visitPlantModel);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public long sendVisitPlantDataInDB(VisitPlantModel visitPlantModel) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"remarks\", visitPlantModel.getRemarks());\r\n                values.put(\"plant_image\", visitPlantModel.getPlant_image());\r\n                values.put(\"growth_date\", visitPlantModel.getGrowth_date());\r\n                values.put(\"farmer_id\", visitPlantModel.getFarmer_id());\r\n                values.put(\"crop_status_id\", visitPlantModel.getCrop_status_id());\r\n                values.put(\"crop_planing_id\", visitPlantModel.getCrop_planing_id());\r\n                values.put(\"plant_id\", visitPlantModel.getPlant_id());\r\n                values.put(\"user_id\", visitPlantModel.getUser_id());\r\n                values.put(\"crop_type_category_id\", visitPlantModel.getCrop_type_category_id());\r\n                values.put(\"crop_type_subcategory_id\", visitPlantModel.getCrop_type_subcategory_id());\r\n                values.put(\"flag\", \"0\");\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"plant_growth\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n\r\n    public ArrayList<VisitPlantModel> getPlantGrowthData() {\r\n        ArrayList<VisitPlantModel> arrayList = new ArrayList<VisitPlantModel>();\r\n        VisitPlantModel visitPlantModel;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        visitPlantModel = new VisitPlantModel();\r\n                        visitPlantModel.setCrop_planing_id(cursor.getString(cursor.getColumnIndex(\"crop_planing_id\")));\r\n                        visitPlantModel.setCrop_status_id(cursor.getString(cursor.getColumnIndex(\"crop_status_id\")));\r\n                        visitPlantModel.setGrowth_date(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        visitPlantModel.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        visitPlantModel.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        visitPlantModel.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        visitPlantModel.setCrop_type_category_id(cursor.getString(cursor.getColumnIndex(\"crop_type_category_id\")));\r\n                        visitPlantModel.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        visitPlantModel.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        visitPlantModel.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        visitPlantModel.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));;\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(visitPlantModel);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public long updateVisitPlantFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"flag\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public int getSupplierLastInsertedLocalID() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM supplier_registration ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    public boolean updateEditFlagInTable(String tablename) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String updateQuery = \"Update '\" + tablename + \"' set flag = '1' where flag='0' \";\r\n        Log.d(\"update query\", updateQuery);\r\n        db.execSQL(updateQuery);\r\n        db.close();\r\n\r\n        return true;\r\n    }\r\n\r\n    public long getPSFarmerRegistrationData(ParyavaranSakhiRegistrationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n\r\n                values.put(\"id\",user.getId());\r\n                values.put(\"household_no\", user.getHousehold_no());\r\n                values.put(\"farmer_image\", user.getFarmer_image());\r\n\r\n                values.put(\"farmer_name\", user.getFarmer_name());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"date_of_birth\", user.getDate_of_birth());\r\n                values.put(\"aadhar_no\", user.getAadhar_no());\r\n                values.put(\"what_you_know\", user.getWhat_you_know());\r\n                values.put(\"father_husband_name\", user.getFather_husband_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"bpl\", user.getBpl());\r\n                //values.put(\"education_qualification\", user.getEducation_qualification());\r\n                values.put(\"physical_challenges\", user.getPhysical_challenges());\r\n                values.put(\"total_land_holding\", user.getTotal_land_holding());\r\n                values.put(\"no_of_Member_migrated\", user.getNo_of_member_migrated());\r\n                //  values.put(\"crop_vegetable_details\", user.getCrop_vegetable_details());\r\n                values.put(\"religion_id\", user.getReligion_id());\r\n                values.put(\"category_id\", user.getCategory_id());\r\n                values.put(\"caste\", user.getCaste());\r\n                values.put(\"annual_income\", user.getAnnual_income());\r\n                values.put(\"agro_climat_zone_id\", user.getAgro_climat_zone_id());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n                values.put(\"block_id\", user.getBlock_id());\r\n                values.put(\"aadhar_no\", user.getAadhar_no());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"pincode\", user.getPincode());\r\n                values.put(\"id_other_name\", user.getId_other_name());\r\n                values.put(\"id_type_id\", user.getId_type_id());\r\n                values.put(\"flag\", \"0\");\r\n                values.put(\"alternative_livelihood_id\", user.getAlternative_livelihood_id());\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"martial_category\", user.getMartial_category());\r\n\r\n                /*if (id == null || id.equals(\"\") || id.equals(\"0\")) {\r\n                    db.insert(\"farmer_registration\", null, values);\r\n                    db.close();\r\n                } else {\r\n                    db.update(\"farmer_registration\", values, \"id = '\" + id + \"'\", null);\r\n                    db.close(); // Closing database connection\r\n                }*/\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"ps_farmer_registration\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n\r\n        return ids;\r\n        //New Registration\r\n    }\r\n\r\n    public ArrayList<ParyavaranSakhiRegistrationPojo> PS_getRegistrationData1() {\r\n        ArrayList<ParyavaranSakhiRegistrationPojo> registerTableArrayList1 = new ArrayList<>();\r\n        SQLiteDatabase db1 = this.getWritableDatabase();\r\n        try {\r\n            if (db1 != null && db1.isOpen() && !db1.isReadOnly()) {\r\n                String query = \"select * from ps_farmer_registration \";\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db1.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        ParyavaranSakhiRegistrationPojo list1 = new ParyavaranSakhiRegistrationPojo();\r\n                        list1.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        list1.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        list1.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                        list1.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                        list1.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        list1.setFarmer_image(cursor.getString(cursor.getColumnIndex(\"farmer_image\")));\r\n                        list1.setMartial_category(cursor.getString(cursor.getColumnIndex(\"martial_category\")));\r\n\r\n                        // list1.setId_type_name(cursor.getString(cursor.getColumnIndex(\"id_type_name\")));\r\n                        list1.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                        list1.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                        list1.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        list1.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        list1.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                        list1.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        list1.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        list1.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        list1.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                        list1.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        list1.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                        list1.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                        list1.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                        list1.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                        list1.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        list1.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                        list1.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                        list1.setAnnual_income(cursor.getString(cursor.getColumnIndex(\"annual_income\")));\r\n                        list1.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                        list1.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                        list1.setNo_of_member_migrated(cursor.getString(cursor.getColumnIndex(\"no_of_member_migrated\")));\r\n                        list1.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                        list1.setMartial_category(cursor.getString(cursor.getColumnIndex(\"martial_category\")));\r\n\r\n                        registerTableArrayList1.add(list1);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db1.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db1.close();\r\n        }\r\n        return registerTableArrayList1;\r\n    }\r\n\r\n\r\n\r\n    public long PSsaveHousehold(PSNeemPlantationPojo householdMasterModel)\r\n    {\r\n        SQLiteDatabase DB1 =this.getWritableDatabase();\r\n        long ids =0;\r\n        try\r\n        {\r\n            if(DB1 !=null && !DB1.isReadOnly())\r\n            {\r\n                ContentValues values =new ContentValues();\r\n                values.put(\"id\",householdMasterModel.getId());\r\n                values.put(\"neem_plantation_Image\",householdMasterModel.getNeem_plantation_image());\r\n                values.put(\"land_id\",householdMasterModel.getLand_id());\r\n                values.put(\"plantation_date\",householdMasterModel.getPlantation_Date());\r\n                values.put(\"geo_coordinates\",householdMasterModel.getGeo_coordinates());\r\n\r\n\r\n                ids =DB1.insert(\"ps_neem_plantation\",null, values);\r\n                DB1.close();\r\n            }\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n            DB1.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n\r\n    public long pslandholding1(PSLandHoldingPojo householdMasterModel)\r\n    {\r\n        SQLiteDatabase DB1 =this.getWritableDatabase();\r\n        long ids =0;\r\n        try\r\n        {\r\n            if(DB1 !=null && !DB1.isReadOnly())\r\n            {\r\n                ContentValues values =new ContentValues();\r\n               // values.put(\"id\",householdMasterModel.getId());\r\n                //values.put(\"farmer_id\",householdMasterModel.getFarmer_id());\r\n\r\n                values.put(\"land_id\",householdMasterModel.getLand_id());\r\n                values.put(\"farmer_id\",householdMasterModel.getFarmer_id());\r\n                values.put(\"land_unit\",householdMasterModel.getLand_unit());\r\n               // values.put(\"farmer_name\",householdMasterModel.getFarmer_name());\r\n                values.put(\"land_image\",householdMasterModel.getLand_image());\r\n               // values.put(\"Farmer_Selection\",householdMasterModel.getFarmer_Selection());\r\n                values.put(\"land_area\",householdMasterModel.getLand_area());\r\n                values.put(\"land_name\",householdMasterModel.getLand_name());\r\n\r\n\r\n                ids =DB1.insert(\"ps_land_holding\",null, values);\r\n                DB1.close();\r\n            }\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n            DB1.close();\r\n        }\r\n        return ids;\r\n    }\r\n    public long updatePsLandData(PSLandHoldingPojo psLandHoldingPojo, String land_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"land_area\", psLandHoldingPojo.getLand_area());\r\n                values.put(\"land_id\", psLandHoldingPojo.getLand_id());\r\n                values.put(\"farmer_id\", psLandHoldingPojo.getFarmer_id());\r\n                values.put(\"land_unit\", psLandHoldingPojo.getLand_unit());\r\n                values.put(\"land_image\", psLandHoldingPojo.getLand_image());\r\n//                values.put(\"latitude\", sharedPrefHelper.getString(\"LAT\", \"\"));\r\n//                values.put(\"longitude\", sharedPrefHelper.getString(\"LONG\", \"\"));\r\n\r\n                values.put(\"land_name\", psLandHoldingPojo.getLand_name());\r\n//                values.put(\"flag\", 0);\r\n//                values.put(\"offline_sync\", 1);\r\n                ids=db.update(\"ps_land_holding\", values, \"land_id = '\" + land_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n    public PSLandHoldingPojo PSLandDetail(String farmer_id,String land_id) {\r\n        PSLandHoldingPojo landHoldingPojo = new PSLandHoldingPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        String query=\"\";\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                if(!farmer_id.equals(\"\")) {\r\n                     query = \"select * from ps_land_holding where land_id = '\" + land_id + \"' and farmer_id = '\" + farmer_id + \"'\";\r\n                }else{\r\n                     query = \"select * from ps_land_holding where land_id = '\" + land_id + \"'\";\r\n\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new PSLandHoldingPojo();\r\n\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setLand_area(cursor.getString(cursor.getColumnIndex(\"land_area\")));\r\n                        landHoldingPojo.setLand_image(cursor.getString(cursor.getColumnIndex(\"land_image\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return landHoldingPojo;\r\n    }\r\n\r\n    public ArrayList<PSLandHoldingPojo> PSgetRegistrationData(String local_id)\r\n    {\r\n        ArrayList<PSLandHoldingPojo> psLandHoldingPojoArrayList = new ArrayList<>();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query=\"\";\r\n        try\r\n        {\r\n            if (db != null && db.isOpen() && !db.isReadOnly())\r\n            {\r\n\r\n                if(!local_id.equals(\"\")){\r\n                    query = \"select * from ps_land_holding where local_id='\"+local_id+\"'\";\r\n\r\n                }else{\r\n                    query = \"select * from ps_land_holding \";\r\n\r\n                }\r\n\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0)\r\n                {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast())\r\n                    {\r\n\r\n                        PSLandHoldingPojo psLandHoldingPojo = new PSLandHoldingPojo();\r\n                        psLandHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        psLandHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        psLandHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        psLandHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        psLandHoldingPojo.setLand_image(cursor.getString(cursor.getColumnIndex(\"land_image\")));\r\n                        psLandHoldingPojo.setLand_area(cursor.getString(cursor.getColumnIndex(\"land_area\")));\r\n                        psLandHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n                        psLandHoldingPojoArrayList.add(psLandHoldingPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return psLandHoldingPojoArrayList;\r\n\r\n    }\r\n\r\n    public long SkillTracking(SkillTrackingPojo householdMasterModel) {\r\n        SQLiteDatabase DB1 = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (DB1 != null && !DB1.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", householdMasterModel.getId());\r\n                values.put(\"name\", householdMasterModel.getName());\r\n                values.put(\"email\", householdMasterModel.getEmail());\r\n                values.put(\"qualification\", householdMasterModel.getQualification());\r\n                values.put(\"mobileno\", householdMasterModel.getMobileno());\r\n                values.put(\"training_stream\", householdMasterModel.getTraining_stream());\r\n                values.put(\"skill_center\", householdMasterModel.getSkill_center());\r\n                values.put(\"date_of_completion_of_training\", householdMasterModel.getDate_of_completion_of_training());\r\n\r\n\r\n                ids = DB1.insert(\"skill_tracking\", null, values);\r\n                DB1.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            DB1.close();\r\n        }\r\n        return ids;\r\n    }\r\n    public ArrayList<SkillTrackingPojo> getPsSkillTrackingData() {\r\n        ArrayList<SkillTrackingPojo> registerTableArrayList1 = new ArrayList<>();\r\n        SQLiteDatabase db1 = this.getWritableDatabase();\r\n        try {\r\n            if (db1 != null && db1.isOpen() && !db1.isReadOnly()) {\r\n                String query = \"select * from skill_tracking \";\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db1.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        SkillTrackingPojo list1 = new SkillTrackingPojo();\r\n                        list1.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        list1.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        list1.setEmail(cursor.getString(cursor.getColumnIndex(\"email\")));\r\n                        list1.setQualification(cursor.getString(cursor.getColumnIndex(\"qualification\")));\r\n                        list1.setMobileno(cursor.getString(cursor.getColumnIndex(\"mobileno\")));\r\n                        list1.setTraining_stream(cursor.getString(cursor.getColumnIndex(\"training_stream\")));\r\n                        list1.setSkill_center(cursor.getString(cursor.getColumnIndex(\"skill_center\")));\r\n                        list1.setDate_of_completion_of_training(cursor.getString(cursor.getColumnIndex(\"date_of_completion_of_training\")));\r\n\r\n                        registerTableArrayList1.add(list1);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db1.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db1.close();\r\n        }\r\n        return registerTableArrayList1;\r\n    }\r\n\r\n\r\n    public ArrayList<PSNeemPlantationPojo> getneemplantation() {\r\n        ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos = new ArrayList<>();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try\r\n        {\r\n            if(db != null && !db.isReadOnly())\r\n            {\r\n                String query = \"select * from ps_neem_plantation\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if(cursor != null && cursor.getCount() > 0)\r\n                {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast())\r\n                    {\r\n                        PSNeemPlantationPojo ps_neem_plantation = new PSNeemPlantationPojo();\r\n                        ps_neem_plantation.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        ps_neem_plantation.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        ps_neem_plantation.setGeo_coordinates(cursor.getString(cursor.getColumnIndex(\"geo_coordinates\")));\r\n                        ps_neem_plantation.setNeem_plantation_image(cursor.getString(cursor.getColumnIndex(\"neem_plantation_image\")));\r\n                        cursor.moveToNext();\r\n                        psNeemPlantationPojos.add(ps_neem_plantation);\r\n                    }\r\n                }\r\n                db.close();\r\n            }\r\n        }\r\n        catch(Exception e){\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return psNeemPlantationPojos;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllPSLAND() {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        PSLandHoldingPojo psLandHoldingPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from ps_land_holding\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        psLandHoldingPojo = new PSLandHoldingPojo();\r\n                        psLandHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        psLandHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        hashMap.put(psLandHoldingPojo.getLand_id(), Integer.parseInt(psLandHoldingPojo.getLocal_id()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java b/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java
--- a/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java	(date 1653977909780)
@@ -10,7 +10,7 @@
 import android.util.Log;
 
 
-
+import com.sanket.jubifarm.Livelihood.Model.Neem_Monitoring_Pojo;
 import com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;
 import com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;
 import com.sanket.jubifarm.Livelihood.Model.ParyavaranSakhiRegistrationPojo;
@@ -109,6 +109,7 @@
         db.execSQL(PSNeemPlantationPojo.CREATE_TABLE);
         db.execSQL(PSLandHoldingPojo.CREATE_TABLE);
         db.execSQL(SkillTrackingPojo.CREATE_TABLE);
+        db.execSQL(Neem_Monitoring_Pojo.CREATE_TABLE);
 
 
 
@@ -5199,4 +5200,27 @@
         }
         return hashMap;
     }
+
+    public long AddneemMonitoring(Neem_Monitoring_Pojo neem_monitoring) {
+        SQLiteDatabase db = this.getWritableDatabase();
+        long ids = 0;
+        try {
+            if (db != null && !db.isReadOnly()) {
+                ContentValues values = new ContentValues();
+                values.put("id", neem_monitoring.getId());
+                values.put("land_id", neem_monitoring.getLand_id());
+                values.put("neem_id", neem_monitoring.getLocal_id());
+                values.put("monitoring", neem_monitoring.getMonitoring_date());
+                values.put("neem_monitoring_image", neem_monitoring.getNeem_monitoring_image());
+                values.put("remarks", neem_monitoring.getRemarks());
+
+                ids = db.insert("neem_monitoring", null, values);
+                db.close();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            db.close();
+        }
+        return ids;
+    }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/btn_submit_background.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/buttan_shap.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/buttanshapbalck.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/buttanshape.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/callbutton.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/ic_baseline_sync_24.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/ic_farmer2.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/ic_land_holding.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout-w1240dp/activity_ps_neem_land_holding_list.xml\" value=\"0.24765625\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout-w936dp/activity_ps_neem_land_holding_list.xml\" value=\"0.153125\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/accept_reject_dialog.xml\" value=\"0.10507246376811594\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_about_us.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_lang.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_plant_acivity.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_plant_growth.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_query.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_tranner.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_app_drawer.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_change_password.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_detail.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_detals_in_put.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_monitoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_planning.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_sale.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_sale_sub.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_disclaimer.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_deatil.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_recycle.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_registration_form.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_forgot_password.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_help_line.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_hepline_menu.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_home_acivity.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_land_details_custom_type.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_land_holding.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_login_screen.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_main_menu.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_monitoring.xml\" value=\"0.19010416666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_plantation.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_plant_growth_list.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_plant_view.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_post_plantation_acivity.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_land_holding.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_land_holding_list.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_land_holding_list.xml\" value=\"0.19814814814814816\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_land_holding_list2.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_plantation_list.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_synchronize.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_query_list.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_query_view.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_recycle_details_view.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_registration.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_registration_list.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_select_crop.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_skill_tracking.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_skill_tracking_list.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_soil_in_fo.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_splash_screen.xml\" value=\"0.215625\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sub_crop_planinig.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sub_monitoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sub_plantation.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_supplayer_otp.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sync_data.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_trainning_survey_form.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_vendor_registration.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_view_crop.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_view_land.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/add_crop_details.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/cropmonetoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/cropplaning_seccustom.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_crop_details.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_family_deatails.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_farmer_filter.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_inputordiring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_land_details.xml\" value=\"0.203125\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_plant_growth.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_ps_landholding.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_regsitration.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_skill_center_list.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_soil_in_fo.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_spinner.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_training.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/customlandholding.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/farmer_registration_custom.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/nav_header.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/spinner_list.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/sub_monitoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/sub_plantation_custom.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/subcroping_filter.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/toolbar.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/update_pic_layout.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/viewattendance.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/visit_remarks.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/menu/home.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/drawable/ic_baseline_add_24.xml\" value=\"0.2203125\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_add_plant_growth.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_farmer_deatil.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_farmer_recycle.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_farmer_registration_form.xml\" value=\"0.23685800604229607\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_main_menu.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_neem_plantation.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_plant_growth_list.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_ps_farmer_detail.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_ps_farmer_details.xml\" value=\"0.43352601156069365\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_ps_synchronize.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_registration.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_sync_data.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_vendor_registration.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_plant_growth.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_regsitration.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_vender.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_village_filter.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/farmer_registration_custom.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/neemplantationresource.xml\" value=\"0.2\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/.idea/misc.xml	(date 1653984946201)
@@ -82,7 +82,7 @@
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_plant_growth.xml" value="0.25" />
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_ps_landholding.xml" value="0.33" />
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_regsitration.xml" value="0.33" />
-        <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_skill_center_list.xml" value="0.5" />
+        <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_skill_center_list.xml" value="0.33" />
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_soil_in_fo.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_spinner.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_training.xml" value="0.20416666666666666" />
@@ -99,26 +99,28 @@
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/visit_remarks.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/menu/home.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/drawable/ic_baseline_add_24.xml" value="0.2203125" />
-        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_add_plant_growth.xml" value="0.25" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_farmer_deatil.xml" value="0.33" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_farmer_recycle.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_farmer_registration_form.xml" value="0.23685800604229607" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_main_menu.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_neem_plantation.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml" value="0.20416666666666666" />
-        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_plant_growth_list.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_ps_farmer_detail.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_ps_farmer_details.xml" value="0.43352601156069365" />
-        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_ps_synchronize.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_registration.xml" value="0.20416666666666666" />
-        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_sync_data.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_vendor_registration.xml" value="0.20416666666666666" />
-        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_plant_growth.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_regsitration.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_vender.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/custom_village_filter.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/farmer_registration_custom.xml" value="0.5" />
-        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/neemplantationresource.xml" value="0.2" />
+        <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/neemplantationresource.xml" value="0.33" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_neem_monitoring.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_recycle.xml" value="0.20102564102564102" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_monitoring.xml" value="0.20102564102564102" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_plantation.xml" value="0.20102564102564102" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml" value="0.20102564102564102" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_plantation_list.xml" value="0.20102564102564102" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/neemplantationresource.xml" value="0.20102564102564102" />
       </map>
     </option>
   </component>
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Adapter.NeemPlantationAdapter;\r\nimport com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;\r\nimport com.sanket.jubifarm.R;\r\nimport com.sanket.jubifarm.data_base.SqliteHelper;\r\nimport com.shamanland.fab.FloatingActionButton;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class PS_NeemPlantationList extends AppCompatActivity {\r\n\r\n  ImageButton fab;\r\n  RecyclerView rv_neem_Plantation;\r\n  SqliteHelper sqliteHelper;\r\n  ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_ps_neem_plantation_list);\r\n        getSupportActionBar().setTitle(\"Neem Plantation List\");\r\n        fab=findViewById(R.id.fab);\r\n        initiliaze();\r\n        rv_neem_Plantation = findViewById(R.id.rv_neem_Plantation);\r\n\r\n\r\n        psNeemPlantationPojos = sqliteHelper.getneemplantation();\r\n        if(psNeemPlantationPojos.size()>0)\r\n        {\r\n            NeemPlantationAdapter neemPlantationAdapter = new NeemPlantationAdapter(this, psNeemPlantationPojos);\r\n            rv_neem_Plantation.setHasFixedSize(true);\r\n            rv_neem_Plantation.setLayoutManager(new LinearLayoutManager(this));\r\n            rv_neem_Plantation.setAdapter(neemPlantationAdapter);\r\n        }\r\n\r\n        fab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                Intent intent =new Intent(PS_NeemPlantationList.this, NeemPlantation.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initiliaze() {\r\n        psNeemPlantationPojos = new ArrayList<>();\r\n        rv_neem_Plantation = findViewById(R.id.rv_neem_Plantation);\r\n        sqliteHelper = new SqliteHelper(this);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java	(revision 9a31ca0de82096cd99b7453caef7e5b760b7fc03)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java	(date 1653982712177)
@@ -22,6 +22,7 @@
   ImageButton fab;
   RecyclerView rv_neem_Plantation;
   SqliteHelper sqliteHelper;
+  String screenType = "";
   ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos;
 
     @Override
