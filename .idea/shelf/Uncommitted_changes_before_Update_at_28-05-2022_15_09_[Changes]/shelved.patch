Index: app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.data_base;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.SQLException;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\nimport android.util.Log;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;\r\nimport com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;\r\nimport com.sanket.jubifarm.Livelihood.Model.ParyavaranSakhiRegistrationPojo;\r\nimport com.sanket.jubifarm.Livelihood.Model.SkillTrackingPojo;\r\nimport com.sanket.jubifarm.Modal.AboutUs;\r\nimport com.sanket.jubifarm.Modal.Attendance_Approval;\r\nimport com.sanket.jubifarm.Modal.BlockPojo;\r\nimport com.sanket.jubifarm.Modal.CropPlaningPojo;\r\nimport com.sanket.jubifarm.Modal.CropTypePojo;\r\nimport com.sanket.jubifarm.Modal.CropVegitableDetails;\r\nimport com.sanket.jubifarm.Modal.Crop_Type_Status;\r\nimport com.sanket.jubifarm.Modal.DisclaimerPojo;\r\nimport com.sanket.jubifarm.Modal.DistrictPojo;\r\nimport com.sanket.jubifarm.Modal.FarmerFamilyPojo;\r\nimport com.sanket.jubifarm.Modal.FarmerRegistrationPojo;\r\nimport com.sanket.jubifarm.Modal.HelplinePojo;\r\nimport com.sanket.jubifarm.Modal.InputOrderingPojo;\r\nimport com.sanket.jubifarm.Modal.InputOrderingVendor;\r\nimport com.sanket.jubifarm.Modal.KnowledgePojo;\r\nimport com.sanket.jubifarm.Modal.LandHoldingPojo;\r\nimport com.sanket.jubifarm.Modal.MasterPojo;\r\nimport com.sanket.jubifarm.Modal.MasterTypePojo;\r\nimport com.sanket.jubifarm.Modal.PlantGrowthModal;\r\nimport com.sanket.jubifarm.Modal.PlantGrowthPojo;\r\nimport com.sanket.jubifarm.Modal.PlantSubCategoryPojo;\r\nimport com.sanket.jubifarm.Modal.PostPlantationPojo;\r\nimport com.sanket.jubifarm.Modal.ProductionDetailsPojo;\r\nimport com.sanket.jubifarm.Modal.SaleDetailsPojo;\r\nimport com.sanket.jubifarm.Modal.SoilPojo;\r\nimport com.sanket.jubifarm.Modal.StatePojo;\r\nimport com.sanket.jubifarm.Modal.SubPlantationPojo;\r\nimport com.sanket.jubifarm.Modal.SupplierRegistrationPojo;\r\nimport com.sanket.jubifarm.Modal.TrainingAttandancePojo;\r\nimport com.sanket.jubifarm.Modal.TrainingPojo;\r\nimport com.sanket.jubifarm.Modal.UserTypePojo;\r\nimport com.sanket.jubifarm.Modal.UsersPojo;\r\nimport com.sanket.jubifarm.Modal.VendorRegModal;\r\nimport com.sanket.jubifarm.Modal.VillagePojo;\r\nimport com.sanket.jubifarm.Modal.VisitPlantModel;\r\n\r\nimport java.io.File;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\n\r\npublic class SqliteHelper extends SQLiteOpenHelper {\r\n    static final String DATABASE_NAME = \"jubi_farm.db\";\r\n    static final int DATABASE_VERSION = 5;\r\n    String DB_PATH_SUFFIX = \"/databases/\";\r\n    int version;\r\n    Context ctx;\r\n    SharedPrefHelper sharedPrefHelper;\r\n\r\n    public SqliteHelper(@Nullable Context context) {\r\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\r\n        ctx = context;\r\n        sharedPrefHelper = new SharedPrefHelper(context);\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase db) {\r\n        db.execSQL(UsersPojo.CREATE_TABLE);\r\n        db.execSQL(FarmerFamilyPojo.CREATE_TABLE);\r\n        db.execSQL(SupplierRegistrationPojo.CREATE_TABLE);\r\n        db.execSQL(UserTypePojo.CREATE_TABLE);\r\n        db.execSQL(CropPlaningPojo.CREATE_TABLE);\r\n        db.execSQL(InputOrderingPojo.CREATE_TABLE);\r\n        db.execSQL(InputOrderingVendor.CREATE_TABLE);\r\n        db.execSQL(ProductionDetailsPojo.CREATE_TABLE);\r\n        db.execSQL(SaleDetailsPojo.CREATE_TABLE);\r\n        db.execSQL(TrainingAttandancePojo.CREATE_TABLE);\r\n        db.execSQL(KnowledgePojo.CREATE_TABLE);\r\n        db.execSQL(SubPlantationPojo.CREATE_TABLE);\r\n        db.execSQL(PostPlantationPojo.CREATE_TABLE);\r\n        db.execSQL(PlantGrowthPojo.CREATE_TABLE);\r\n        db.execSQL(HelplinePojo.CREATE_TABLE);\r\n        db.execSQL(LandHoldingPojo.CREATE_TABLE);\r\n        db.execSQL(TrainingPojo.CREATE_TABLE);\r\n        db.execSQL(CropTypePojo.CREATE_TABLE);\r\n        db.execSQL(MasterPojo.CREATE_TABLE);\r\n        db.execSQL(DisclaimerPojo.CREATE_TABLE);\r\n        db.execSQL(AboutUs.CREATE_TABLE);\r\n        db.execSQL(FarmerRegistrationPojo.CREATE_TABLE);\r\n        db.execSQL(MasterTypePojo.CREATE_TABLE);\r\n        db.execSQL(StatePojo.CREATE_TABLE);\r\n        db.execSQL(DistrictPojo.CREATE_TABLE);\r\n        db.execSQL(BlockPojo.CREATE_TABLE);\r\n        db.execSQL(VillagePojo.CREATE_TABLE);\r\n        db.execSQL(PlantSubCategoryPojo.CREATE_TABLE);\r\n        db.execSQL(CropVegitableDetails.CREATE_TABLE);\r\n        db.execSQL(SoilPojo.CREATE_TABLE);\r\n        db.execSQL(ParyavaranSakhiRegistrationPojo.CREATE_TABLE);\r\n        db.execSQL(PSNeemPlantationPojo.CREATE_TABLE);\r\n        db.execSQL(PSLandHoldingPojo.CREATE_TABLE);\r\n        db.execSQL(SkillTrackingPojo.CREATE_TABLE);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\r\n        if (oldVersion < 5) {\r\n            db.execSQL(\"ALTER TABLE farmer_registration ADD offline_sync INTEGER DEFAULT 0\");\r\n            db.execSQL(\"ALTER TABLE land_holding ADD offline_sync INTEGER DEFAULT 0\");\r\n            db.execSQL(\"ALTER TABLE supplier_registration ADD offline_sync INTEGER DEFAULT 0\");\r\n        }\r\n    }\r\n\r\n    public SQLiteDatabase openDataBase() throws SQLException {\r\n        Log.e(\"version\", \"outside\" + version);\r\n\r\n        File dbFile = ctx.getDatabasePath(DATABASE_NAME);\r\n        return SQLiteDatabase.openDatabase(dbFile.getPath(), null, SQLiteDatabase.NO_LOCALIZED_COLLATORS | SQLiteDatabase.CREATE_IF_NECESSARY);\r\n    }\r\n\r\n    public void dropTable(String tablename) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"'\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void dropTableFamily(String tablename, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"' where user_id = '\" + user_id + \"' \");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    public void dropTableSale(String tablename, String user_id,String crop_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"' where unique_id = '\" + user_id + \"' and crop_type_subcatagory_id = '\"+ crop_id +\"' and flag = 0 \");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n    public void deleteTableSale(String tablename, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            db.execSQL(\"DELETE FROM'\" + tablename + \"' where id = '\" + user_id + \"'\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n    public void saveMasterTable(ContentValues contentValues, String tablename) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        if (tablename.equals(\"users\") || tablename.equals(\"farmer_registration\") ||\r\n                tablename.equals(\"farmer_family\") || tablename.equals(\"land_holding\") ||\r\n                tablename.equals(\"crop_planning\") || tablename.equals(\"input_ordering\") ||\r\n                tablename.equals(\"input_ordering_vender\") || tablename.equals(\"supplier_registration\") ||\r\n                tablename.equals(\"production_details\") ||\r\n                tablename.equals(\"crop_vegetable_details\")) {\r\n            contentValues.put(\"flag\", 1);\r\n        }else if ( tablename.equals(\"sale_details\")){\r\n            contentValues.put(\"flag\", 1);\r\n            contentValues.put(\"is_close\", 0);\r\n        }\r\n\r\n        long idsds = db.insert(tablename, null, contentValues);\r\n        Log.d(\"LOG\", idsds + \" id\");\r\n        db.close();\r\n    }\r\n\r\n    public long getFarmerRegistrationData(FarmerRegistrationPojo user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", id);\r\n                values.put(\"id\", id);\r\n                values.put(\"household_no\", user.getHousehold_no());\r\n                values.put(\"farmer_name\", user.getFarmer_name());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"date_of_birth\", user.getDate_of_birth());\r\n                values.put(\"what_you_know\", user.getWhat_you_know());\r\n                values.put(\"id_type_id\", user.getId_type_id());\r\n                values.put(\"id_no\", user.getId_no());\r\n                values.put(\"father_husband_name\", user.getFather_husband_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"bpl\", user.getBpl());\r\n                //values.put(\"education_qualification\", user.getEducation_qualification());\r\n                values.put(\"physical_challenges\", user.getPhysical_challenges());\r\n                values.put(\"handicapped\", user.getHandicapped());\r\n                values.put(\"total_land_holding\", user.getTotal_land_holding());\r\n                values.put(\"nof_member_migrated\", user.getNof_member_migrated());\r\n                //  values.put(\"crop_vegetable_details\", user.getCrop_vegetable_details());\r\n                values.put(\"multi_cropping\", user.getMulti_cropping());\r\n                values.put(\"fertilizer\", user.getFertilizer());\r\n                values.put(\"irrigation_facility\", user.getIrrigation_facility());\r\n                values.put(\"religion_id\", user.getReligion_id());\r\n                values.put(\"category_id\", user.getCategory_id());\r\n                values.put(\"caste\", user.getCaste());\r\n                values.put(\"annual_income\", user.getAnnual_income());\r\n                values.put(\"agro_climat_zone_id\", user.getAgro_climat_zone_id());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n                values.put(\"block_id\", user.getBlock_id());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"pincode\", user.getPincode());\r\n                values.put(\"id_other_name\", user.getId_other_name());\r\n                values.put(\"alternative_livelihood_id\", user.getAlternative_livelihood_id());\r\n                values.put(\"address\", user.getAddress());\r\n\r\n                /*if (id == null || id.equals(\"\") || id.equals(\"0\")) {\r\n                    db.insert(\"farmer_registration\", null, values);\r\n                    db.close();\r\n                } else {\r\n                    db.update(\"farmer_registration\", values, \"id = '\" + id + \"'\", null);\r\n                    db.close(); // Closing database connection\r\n                }*/\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"farmer_registration\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n\r\n        return ids;\r\n        //New Registration\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public void updateMasterTable(ContentValues contentValues, String tablename,String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long idsds = db.update(tablename,  contentValues, \"id = \" + id,null);\r\n        Log.d(\"LOG\", idsds + \" id\");\r\n        db.close();\r\n    }\r\n    public boolean checkIdExist(String table_name,String id) {\r\n        boolean ids = false;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"SELECT id FROM '\"+ table_name +\"' WHERE id = '\" + id + \"'\";\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    ids=true;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        db.close();\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getFarmerList(String name) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (name.equals(\"\")) {\r\n\r\n                    //  query = \"select * from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id \";\r\n                    query = \"select f.farmer_name, f.address, f.mobile, f.user_id, f.id,u.profile_photo from farmer_registration f INNER JOIN users u ON f.user_id = u.id order by f.id desc\";\r\n\r\n                } else {\r\n\r\n                    query = \"select f.farmer_name, f.address, f.mobile, f.user_id, f.id,u.profile_photo from farmer_registration f INNER JOIN users u ON f.user_id = u.id where f.farmer_name LIKE \" + \"'\" + name + \"%'\" ;\r\n                    //   query = \"select * from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id  where farmer_registration.farmer_name LIKE \" + \"'\" + name + \"%'\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        FarmerRegistrationPojo farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        farmerRegistrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        farmerRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        farmerRegistrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n\r\n                        // farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getFarmerListforfilter(String name) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String   query = \"select f.farmer_name, f.address, f.mobile, f.user_id, f.id,u.profile_photo from farmer_registration f INNER JOIN users u ON f.user_id = u.id where f.village_id = '\"+ name +\"'\" ;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        FarmerRegistrationPojo farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        farmerRegistrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        farmerRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        farmerRegistrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n\r\n                        // farmerRegistrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getFarmerFamily(String user_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<>();\r\n        FarmerRegistrationPojo farmerRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from farmer_family where user_id = '\" + user_id + \"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        farmerRegistrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        farmerRegistrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                        farmerRegistrationPojo.setOccupation(Integer.parseInt(cursor.getString(cursor.getColumnIndex(\"occupation\"))));\r\n                        farmerRegistrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        farmerRegistrationPojo.setMonthly_income(cursor.getInt(cursor.getColumnIndex(\"monthly_income\")));\r\n                        farmerRegistrationPojo.setRelation_id(cursor.getInt(cursor.getColumnIndex(\"relation_id\")));\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<SoilPojo> getDateSoil(String land_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SoilPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select updated_soil_date, id from updated_soil where land_id = '\"+ land_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SoilPojo soilPojo = new SoilPojo();\r\n                        soilPojo.setSoil_updated_date(cursor.getString(cursor.getColumnIndex(\"updated_soil_date\")));\r\n                        soilPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(soilPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropVegitableDetails> getCropDetailsData(String user_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropVegitableDetails> arrayList = new ArrayList<>();\r\n        CropVegitableDetails farmerRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_vegetable_details where user_id = '\" + user_id + \"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new CropVegitableDetails();\r\n                        farmerRegistrationPojo.setCrop_name(cursor.getString(cursor.getColumnIndex(\"crop_name\")));\r\n                        farmerRegistrationPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        farmerRegistrationPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        farmerRegistrationPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        farmerRegistrationPojo.setUnit_id(cursor.getString(cursor.getColumnIndex(\"unit_id\")));\r\n                        farmerRegistrationPojo.setUnits_id(cursor.getString(cursor.getColumnIndex(\"units_id\")));\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<CropVegitableDetails> getCropDetails(String user_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropVegitableDetails> arrayList = new ArrayList<>();\r\n        CropVegitableDetails farmerRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_vegetable_details where user_id = '\" + user_id + \"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new CropVegitableDetails();\r\n                        farmerRegistrationPojo.setCrop_name(cursor.getString(cursor.getColumnIndex(\"crop_name\")));\r\n                        farmerRegistrationPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        farmerRegistrationPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        farmerRegistrationPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        farmerRegistrationPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        farmerRegistrationPojo.setUnit_id(cursor.getString(cursor.getColumnIndex(\"unit_id\")));\r\n                        farmerRegistrationPojo.setUnits_id(cursor.getString(cursor.getColumnIndex(\"units_id\")));\r\n                        arrayList.add(farmerRegistrationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<PlantGrowthPojo> getPlantgrwthList(String plant_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantGrowthPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where plant_id = '\"+ plant_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantGrowthPojo plantGrowthPojo = new PlantGrowthPojo();\r\n                        plantGrowthPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        plantGrowthPojo.setDate(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        plantGrowthPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        plantGrowthPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantGrowthPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantGrowthPojo.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        plantGrowthPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantGrowthPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<PlantGrowthPojo> getPlantgrwthListForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantGrowthPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantGrowthPojo plantGrowthPojo = new PlantGrowthPojo();\r\n                        plantGrowthPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        plantGrowthPojo.setGrowth_date(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        plantGrowthPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        plantGrowthPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantGrowthPojo.setCrop_planing_id(cursor.getString(cursor.getColumnIndex(\"crop_planing_id\")));\r\n                        plantGrowthPojo.setCrop_status_id(cursor.getString(cursor.getColumnIndex(\"crop_status_id\")));\r\n                        plantGrowthPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantGrowthPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        plantGrowthPojo.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        plantGrowthPojo.setCrop_type_category_id(cursor.getString(cursor.getColumnIndex(\"crop_type_category_id\")));\r\n                        plantGrowthPojo.setDead_plants(cursor.getString(cursor.getColumnIndex(\"dead_plants\")));\r\n                        plantGrowthPojo.setUnhealthy_plants(cursor.getString(cursor.getColumnIndex(\"unhealthy_plants\")));\r\n                        plantGrowthPojo.setHealthy_plants(cursor.getString(cursor.getColumnIndex(\"healthy_plants\")));\r\n                        plantGrowthPojo.setRole_id(sharedPrefHelper.getString(\"role_id\", \"\"));\r\n\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantGrowthPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<KnowledgePojo> getKnowledge() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<KnowledgePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from knowledge\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        KnowledgePojo plantGrowthPojo = new KnowledgePojo();\r\n                        plantGrowthPojo.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n                        plantGrowthPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        plantGrowthPojo.setKnowledge_image(cursor.getString(cursor.getColumnIndex(\"knowledge_image\")));\r\n                        plantGrowthPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        plantGrowthPojo.setVideo_url(cursor.getString(cursor.getColumnIndex(\"video_url\")));\r\n                        plantGrowthPojo.setCreated_at(cursor.getString(cursor.getColumnIndex(\"created_at\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantGrowthPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<PlantSubCategoryPojo> getSubCategoryList(String id, String farmer_id,String land_id,String screen_type) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantSubCategoryPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (screen_type.equals(\"crop_monitoring\")){\r\n                    query = \"select *,sum(total_tree) as totals from crop_planning where crop_type_catagory_id = '\" + id + \"' and land_id = '\" + land_id + \"' group by crop_type_subcatagory_id  \";\r\n\r\n                }else\r\n                if (!screen_type.equals(\"view_land\")){\r\n                    if (farmer_id.equals(\"\")) {\r\n                        query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' order by local_id desc\";\r\n\r\n                    } else {\r\n                        query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and farmer_id = '\" + farmer_id + \"' order by local_id desc\";\r\n\r\n                    }}else  {\r\n\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and land_id = '\" + land_id + \"' order by local_id desc\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantSubCategoryPojo plantSubCategoryPojo = new PlantSubCategoryPojo();\r\n                        plantSubCategoryPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        plantSubCategoryPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        plantSubCategoryPojo.setName(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        plantSubCategoryPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        plantSubCategoryPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        plantSubCategoryPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        plantSubCategoryPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantSubCategoryPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        if (screen_type.equals(\"crop_monitoring\"))\r\n                            plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"totals\")));\r\n                        else\r\n                            plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n\r\n                        plantSubCategoryPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        plantSubCategoryPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantSubCategoryPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<PlantSubCategoryPojo> getSubCategoryListFilter(String id, String sub, String land, int farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantSubCategoryPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id != 0 && land != null && land != \"\" && !land.equals(\"null\")){\r\n                    query = \"select * from crop_planning where land_id = '\" + land + \"' and farmer_id = '\" + farmer_id + \"'  \";\r\n                }else if (!id.equals(\"\") && !sub.equals(\"\") && id != null && sub != null && land != null  && !land.equals(\"\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' and land_id = '\" + land + \"' \";\r\n                } else if (farmer_id != 0 && id != null && id != \"\" && !id.equals(\"null\") && sub != null && sub != \"\" && !sub.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' and farmer_id = '\" + farmer_id + \"' \";\r\n                } else if (farmer_id != 0 && id != null && id != \"\" && !id.equals(\"null\") && sub != null && sub != \"\" && !sub.equals(\"null\") && land != null && land != \"\" && !land.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' and land_id = '\" + land + \"' and farmer_id = '\" + farmer_id + \"' \";\r\n                }else  if (land != null && land != \"\" && !land.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where land_id = '\" + land + \"' \";\r\n                } else if (id != null && id != \"\" && !id.equals(\"null\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' \";\r\n                } else if (id != null && !id.equals(\"\") && sub != null && !sub.equals(\"\")) {\r\n                    query = \"select * from crop_planning where crop_type_catagory_id = '\" + id + \"' and crop_type_subcatagory_id = '\" + sub + \"' \";\r\n                } else if (farmer_id != 0) {\r\n                    query = \"select * from crop_planning where farmer_id = '\" + farmer_id + \"'\";\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantSubCategoryPojo plantSubCategoryPojo = new PlantSubCategoryPojo();\r\n                        plantSubCategoryPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        plantSubCategoryPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        plantSubCategoryPojo.setName(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        plantSubCategoryPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        plantSubCategoryPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        plantSubCategoryPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        plantSubCategoryPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantSubCategoryPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantSubCategoryPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<PlantSubCategoryPojo> getPlantDeatails(String id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PlantSubCategoryPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_planning where id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PlantSubCategoryPojo plantSubCategoryPojo = new PlantSubCategoryPojo();\r\n                        plantSubCategoryPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        plantSubCategoryPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        plantSubCategoryPojo.setName(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        plantSubCategoryPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        plantSubCategoryPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        plantSubCategoryPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        plantSubCategoryPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        plantSubCategoryPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        plantSubCategoryPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantSubCategoryPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        plantSubCategoryPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        plantSubCategoryPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        plantSubCategoryPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(plantSubCategoryPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public PlantGrowthPojo getPlantgrwthDetail(String id) {\r\n        PlantGrowthPojo plantGrowthPojo = new PlantGrowthPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where local_id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        plantGrowthPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        plantGrowthPojo.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        plantGrowthPojo.setCrop_status(cursor.getString(cursor.getColumnIndex(\"crop_status_id\")));\r\n                        plantGrowthPojo.setGrowth_date(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        plantGrowthPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return plantGrowthPojo;\r\n\r\n    }\r\n\r\n    public Attendance_Approval getFarmerDetails(String id) {\r\n        Attendance_Approval attendance_approval = new Attendance_Approval();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select id, user_id, farmer_name, mobile from farmer_registration where user_id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        attendance_approval.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        attendance_approval.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        attendance_approval.setName(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        attendance_approval.setMobile_no(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return attendance_approval;\r\n\r\n    }\r\n\r\n    public String getmasterName(int id,String lang) {\r\n        String sum = \"\";\r\n        if (lang.equals(\"hin\")){\r\n            lang=\"2\";\r\n        }else {\r\n            lang=\"1\";\r\n        }\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select master_name from master where caption_id ='\" + id + \"' and language_id = '\"+ lang +\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"master_name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getUserID(int id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select user_id from farmer_registration where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"user_id\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getFarmerName(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select farmer_name from farmer_registration where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"farmer_name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getLandName(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select land_id from land_holding where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"land_id\"));\r\n        return sum;\r\n    }\r\n\r\n\r\n    public String getCategotyName(int id,String lang) {\r\n        String sum = \"\";\r\n        if (lang.equals(\"hin\")){\r\n            lang=\"2\";\r\n        }else {\r\n            lang=\"1\";\r\n        }\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select name from crop_type_catagory_language where id ='\" + id + \"' and language_id = '\"+ lang +\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getCategotyTypeId(String id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select crop_type_catagory_id from crop_type_sub_catagory_language where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\"));\r\n        return sum;\r\n    }\r\n    public String getInputOrderingVenderId(String id, String venderID) {\r\n        String idss = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select id from input_ordering_vender where input_ordering_id ='\" + id + \"' and vender_id='\"+venderID+\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            idss = cursor.getString(cursor.getColumnIndex(\"id\"));\r\n        return idss;\r\n    }\r\n    public String getInputOrderingVenderVendorId(String id, String venderID) {\r\n        String idss = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select vender_id from input_ordering_vender where input_ordering_id ='\" + id + \"' and vender_id='\"+venderID+\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            idss = cursor.getString(cursor.getColumnIndex(\"vender_id\"));\r\n        return idss;\r\n    }\r\n\r\n    public String getSubCategotyName(int id,String lang) {\r\n        String sum = \"\";\r\n        if (lang.equals(\"hin\")){\r\n            lang=\"2\";\r\n        }else {\r\n            lang=\"1\";\r\n        }\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select name from crop_type_sub_catagory_language where id ='\" + id + \"' and language_id = '\"+ lang +\"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"name\"));\r\n        return sum;\r\n    }\r\n\r\n    public String getVillageName(int id) {\r\n        String sum = \"\";\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        Cursor cursor = db.rawQuery(\"select pincode from village_language where id ='\" + id + \"' \", null);\r\n        if (cursor.moveToFirst())\r\n            sum = cursor.getString(cursor.getColumnIndex(\"pincode\"));\r\n        return sum;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getFarmerspinner() {\r\n        HashMap<String, Integer> stat = new HashMap<>();\r\n        FarmerRegistrationPojo farmerRegistrationPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select id, farmer_name from farmer_registration\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new FarmerRegistrationPojo();\r\n                        farmerRegistrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        farmerRegistrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        stat.put(farmerRegistrationPojo.getFarmer_name(), farmerRegistrationPojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return stat;\r\n    }\r\n\r\n    public HashMap<String, Integer> getPlantSpinner(String farmer_id) {\r\n        HashMap<String, Integer> stat = new HashMap<>();\r\n        CropPlaningPojo farmerRegistrationPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id.equals(\"\")) {\r\n                    query = \"select crop_type_subcatagory_id, plant_name from crop_planning\";\r\n\r\n                } else {\r\n                    query = \"select crop_type_subcatagory_id, plant_name from crop_planning where farmer_id = '\" + farmer_id + \"'\";\r\n\r\n                }\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        farmerRegistrationPojo = new CropPlaningPojo();\r\n                        farmerRegistrationPojo.setPlant_name(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        farmerRegistrationPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        cursor.moveToNext();\r\n                        stat.put(farmerRegistrationPojo.getPlant_name(), Integer.valueOf((farmerRegistrationPojo.getCrop_type_subcatagory_id())));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return stat;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getAllState(int lang) {\r\n        HashMap<String, Integer> state = new HashMap<>();\r\n        StatePojo statePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from state_language where language_id ='\"+ lang +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        statePojo = new StatePojo();\r\n                        statePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        statePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        state.put(statePojo.getName(), statePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return state;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllCategoryType(int language_id) {\r\n        HashMap<String, Integer> state = new HashMap<>();\r\n        CropTypePojo statePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"  Select id, name from crop_type_catagory_language where language_id ='\"+language_id+\"' order by id asc \";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        statePojo = new CropTypePojo();\r\n                        statePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        statePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        state.put(statePojo.getName(), statePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return state;\r\n    }\r\n\r\n    public String getgrowthSpndata(String id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from crop_type_catagory_language where id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"name\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n\r\n    public String getLandIDbyid(String id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select land_id from land_holding where id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"land_id\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n    public String getDatesfromCrop(int id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select planted_date,fruited_date,season from crop_planning where id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"planted_date\"))+\",\"+cursor.getString(cursor.getColumnIndex(\"fruited_date\"))+\",\"+cursor.getString(cursor.getColumnIndex(\"season\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n\r\n    public String getTotalPlantbyid(String id) {\r\n        String cropname = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select count(id) from crop_planning where land_id = '\"+ id +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropname = cursor.getString(cursor.getColumnIndex(\"count(id)\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropname;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    public String getgrowthStatus_Spn(String id) {\r\n        String cropstatus = \"\";\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select master_name from master where caption_id= '\" + id + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropstatus = cursor.getString(cursor.getColumnIndex(\"master_name\"));\r\n                        cursor.moveToNext();\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return cropstatus;\r\n    }\r\n\r\n\r\n    public HashMap<String, Integer> getPlantGrowth_Status(int master_type, int language_id) {\r\n        HashMap<String, Integer> state = new HashMap<>();\r\n        Crop_Type_Status cropstate;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from master where  master_type= '\" + master_type + \"' and language_id = '\"+language_id+\"'\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropstate = new Crop_Type_Status();\r\n                        cropstate.setCaption_id(cursor.getInt(cursor.getColumnIndex(\"caption_id\")));\r\n                        cropstate.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        cursor.moveToNext();\r\n                        state.put(cropstate.getMaster_name(), cropstate.getCaption_id());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return state;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllDistrict(int state_id,int lang) {\r\n        HashMap<String, Integer> district = new HashMap<>();\r\n        DistrictPojo districtPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from district_language where state_id=\" + state_id + \" and language_id = '\"+ lang +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        districtPojo = new DistrictPojo();\r\n                        districtPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        districtPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        district.put(districtPojo.getName().trim(), districtPojo.getId());\r\n                    }\r\n                }\r\n            }\r\n            sqLiteDatabase.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return district;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllSubCategory(int state_id, int language_id) {\r\n        HashMap<String, Integer> district = new HashMap<>();\r\n        PlantSubCategoryPojo districtPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from crop_type_sub_catagory_language where crop_type_catagory_id='\" + state_id + \"' and language_id = '\"+language_id+\"' order by id asc \";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        districtPojo = new PlantSubCategoryPojo();\r\n                        districtPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        districtPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        district.put(districtPojo.getName().trim(), Integer.valueOf(districtPojo.getId()));\r\n                    }\r\n                }\r\n            }\r\n            sqLiteDatabase.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return district;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllBlock(int district_id,int lang) {\r\n        HashMap<String, Integer> block1 = new HashMap<>();\r\n        BlockPojo blockPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from block_language where district_id = \" + district_id +\" and language_id = '\"+ lang +\"'\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        blockPojo = new BlockPojo();\r\n                        blockPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        blockPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        block1.put(blockPojo.getName().trim(), blockPojo.getId());\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return block1;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllVillage(int block_id,int lang) {\r\n        HashMap<String, Integer> village = new HashMap<>();\r\n        VillagePojo villagePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from village_language where block_id  = '\" + block_id + \"' and asigned != 0 and language_id = '\"+ lang +\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        villagePojo = new VillagePojo();\r\n                        villagePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        villagePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        village.put(villagePojo.getName(), villagePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n\r\n        return village;\r\n    }\r\n\r\n    public HashMap<String, Integer> getAllVillageforfilter(int lang) {\r\n        HashMap<String, Integer> village = new HashMap<>();\r\n        VillagePojo villagePojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"Select id, name from village_language where asigned  = '\" + sharedPrefHelper.getString(\"user_id\",\"\") + \"' and language_id = '\"+ lang +\"' \";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        villagePojo = new VillagePojo();\r\n                        villagePojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        villagePojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        cursor.moveToNext();\r\n                        village.put(villagePojo.getName(), villagePojo.getId());\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n\r\n        return village;\r\n    }\r\n\r\n\r\n    public ArrayList<LandHoldingPojo> getLandList(String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<LandHoldingPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id.equals(\"\")) {\r\n                    query = \"SELECT * FROM land_holding order by local_id desc\";\r\n                } else {\r\n                    query = \"SELECT * FROM land_holding where farmer_id = '\" + farmer_id + \"'  order by local_id desc\";\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        LandHoldingPojo landHoldingPojo = new LandHoldingPojo();\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        //               landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n                        //              landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public HashMap<String, Integer> getLandHoldingListforFarmer(String farmerId) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        CropPlaningPojo cropPlaningPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from land_holding where farmer_id= '\" + farmerId + \"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        cropPlaningPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        hashMap.put(cropPlaningPojo.getLand_id(), Integer.parseInt(cropPlaningPojo.getId()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n    public HashMap<String, Integer> getLandHoldingList() {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        CropPlaningPojo cropPlaningPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from land_holding\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        cropPlaningPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        hashMap.put(cropPlaningPojo.getLand_id(), Integer.parseInt(cropPlaningPojo.getId()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n    public ArrayList<String> getLandHoldingList1(String user) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<String> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"SELECT * FROM land_holding where farmer_id = '\" + user + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        String land = cursor.getString(cursor.getColumnIndex(\"land_id\"));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(land);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropPlaningPojo> getPlantList(String selected_farmer,String land_id,String screen_type) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropPlaningPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query;\r\n                if (screen_type.equals(\"crop_monitoring\")){\r\n                    if (selected_farmer.equals(\"\")) {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning where land_id = '\"+ land_id +\"'  group by crop_type_catagory_id  \";\r\n\r\n                    } else {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning where land_id = '\"+ land_id +\"' and farmer_id = '\" + selected_farmer + \"' group by crop_type_catagory_id  \";\r\n                    }\r\n                }else {\r\n                    if (selected_farmer.equals(\"\")) {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning  group by crop_type_catagory_id  \";\r\n\r\n                    } else {\r\n                        query = \"select crop_type_catagory_id, count(local_id), plant_id  from crop_planning where farmer_id = '\" + selected_farmer + \"' group by crop_type_catagory_id  \";\r\n                    }\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        CropPlaningPojo cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        cropPlaningPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"count(local_id)\")));\r\n                        cropPlaningPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        //cropPlaningPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(cropPlaningPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropPlaningPojo> filterPlantList(String plant_name, String land, int farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<CropPlaningPojo> filterList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                /*String query = \"select crop_type_catagory_id, count(local_id), plant_id from crop_planning WHERE \" +\r\n                        \"crop_type_catagory_id='\" + plant_name + \"' or  land_id ='\" + land + \"'\";*/\r\n                String query = \"\";\r\n                if (plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\") && land != \"\" && land != \"null\" && !land.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where land_id ='\" + land + \"' and crop_type_catagory_id='\" + plant_name + \"'  GROUP BY crop_type_catagory_id \";\r\n                } else if (plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\") && farmer_id != 0) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where  crop_type_catagory_id='\" + plant_name + \"' and farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (land != \"\" && land != \"null\" && !land.equals(\"null\") && farmer_id != 0) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where  land_id ='\" + land + \"' and farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                }else if (land != \"\" && land != \"null\" && !land.equals(\"null\") && farmer_id != 0 && plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where crop_type_catagory_id='\" + plant_name + \"' and  land_id ='\" + land + \"' and farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (farmer_id != 0) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where farmer_id='\" + farmer_id + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (plant_name != \"\" && plant_name != \"null\" && !plant_name.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where crop_type_catagory_id='\" + plant_name + \"' GROUP BY crop_type_catagory_id \";\r\n                } else if (land != \"\" && land != \"null\" && !land.equals(\"null\")) {\r\n                    query = \"select crop_type_catagory_id, plant_id, count(local_id), land_id from crop_planning where land_id ='\" + land + \"' GROUP BY crop_type_catagory_id \";\r\n                }\r\n\r\n                Log.e(\"Query : \", \"===\" + query);\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        CropPlaningPojo cropPlaningPojo = new CropPlaningPojo();\r\n                        cropPlaningPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        cropPlaningPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"count(local_id)\")));\r\n                        cropPlaningPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        cropPlaningPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        cursor.moveToNext();\r\n                        filterList.add(cropPlaningPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return filterList;\r\n    }\r\n\r\n    public ArrayList<PostPlantationPojo> getPostPlant(int language_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PostPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select master_name, caption_id from master where master_type = 15 and language_id = '\"+ language_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PostPlantationPojo postplantation = new PostPlantationPojo();\r\n                        postplantation.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        postplantation.setCaption_id(cursor.getInt(cursor.getColumnIndex(\"caption_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(postplantation);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<SaleDetailsPojo> getCropList(String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query=\"\";\r\n                if (farmer_id.equals(\"\")){\r\n                    query = \"select * from sale_details  group by crop_type_subcatagory_id order by local_id desc\";\r\n\r\n                }else {\r\n                    query = \"select * from sale_details where farmer_id = '\"+ farmer_id +\"' group by crop_type_subcatagory_id order by local_id desc\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<SaleDetailsPojo> getSubCropList(String sub_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from sale_details where crop_type_subcatagory_id = '\"+ sub_id +\"' and is_close = 0 order by local_id desc\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<SaleDetailsPojo> getSubCropListArchived() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from sale_details where is_close = 1 order by local_id desc\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n\r\n    public ArrayList<SubPlantationPojo> getSubPlantationMasterList(int language_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SubPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select caption_id, master_name from master where master_type = 16 and language_id = '\"+ language_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SubPlantationPojo saleDetailsPojo = new SubPlantationPojo();\r\n                        saleDetailsPojo.setCaption_id(cursor.getInt(cursor.getColumnIndex(\"caption_id\")));\r\n                        saleDetailsPojo.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<SubPlantationPojo> getSubPlantationList(String plant_id ,String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SubPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select value, sub_plantation_id from sub_plantation where crop_type_catagory_id = '\"+ plant_id +\"' and farmer_id = '\"+ farmer_id +\"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SubPlantationPojo saleDetailsPojo = new SubPlantationPojo();\r\n                        saleDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        saleDetailsPojo.setSub_plantation_id(cursor.getString(cursor.getColumnIndex(\"sub_plantation_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<PostPlantationPojo> getPostPlantationList(String plant_id ,String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PostPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select value, post_plantation_id from post_plantation where crop_type_catagory_id = '\"+ plant_id +\"' and farmer_id = '\"+ farmer_id +\"' \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PostPlantationPojo saleDetailsPojo = new PostPlantationPojo();\r\n                        saleDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        saleDetailsPojo.setPost_plantation_id(cursor.getString(cursor.getColumnIndex(\"post_plantation_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n\r\n    public ArrayList<SaleDetailsPojo> getCropListFilter(int season_id, String year, int farmerId) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from sale_details where season_id = '\" + season_id + \"' and year = '\" + year + \"'  group by crop_type_subcatagory_id \";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\" && farmerId != 0) {\r\n                    query = \"select * from sale_details where farmer_id = '\" + farmerId + \"' and year = '\" + year + \"'  group by crop_type_subcatagory_id \";\r\n                } else if (farmerId != 0 && season_id != 0) {\r\n                    query = \"select * from sale_details where farmer_id = '\" + farmerId + \"' and season_id = '\" + season_id + \"'  group by crop_type_subcatagory_id \";\r\n                } else if (farmerId != 0 && year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from sale_details where season_id = '\" + season_id + \"' and year = '\" + year + \"' and farmer_id = '\" + farmerId + \"'  group by crop_type_subcatagory_id \";\r\n                }else   if (farmerId != 0) {\r\n                    query = \"select * from sale_details where farmer_id = '\" + farmerId + \"'  group by crop_type_subcatagory_id\";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\") {\r\n                    query = \"select * from sale_details where year = '\" + year + \"' \";\r\n                } else if (season_id != 0) {\r\n                    query = \"select * from sale_details where season_id = '\" + season_id + \"'  group by crop_type_subcatagory_id\";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<ProductionDetailsPojo> getProductionList(String farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<ProductionDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query=\"\";\r\n                if (farmer_id.equals(\"\")){\r\n                    query = \"select * from production_details  order by local_id desc\";\r\n\r\n                }else {\r\n                    query = \"select * from production_details where farmer_id = '\"+ farmer_id +\"' order by local_id desc\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        ProductionDetailsPojo saleDetailsPojo = new ProductionDetailsPojo();\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<ProductionDetailsPojo> getProductionListFilter(int season_id, String year, int farmerId) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<ProductionDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from production_details where season_id = '\" + season_id + \"' and year = '\" + year + \"' \";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\" && farmerId != 0) {\r\n                    query = \"select * from production_details where farmer_id = '\" + farmerId + \"' and year = '\" + year + \"' \";\r\n                } else if (farmerId != 0 && season_id != 0) {\r\n                    query = \"select * from production_details where farmer_id = '\" + farmerId + \"' and season_id = '\" + season_id + \"' \";\r\n                } else if (farmerId != 0 && year != \"\" && !year.equals(\"null\") && year != \"null\" && season_id != 0) {\r\n                    query = \"select * from production_details where season_id = '\" + season_id + \"' and year = '\" + year + \"' and farmer_id = '\" + farmerId + \"' \";\r\n                }else if (farmerId != 0) {\r\n                    query = \"select * from production_details where farmer_id = '\" + farmerId + \"' \";\r\n                } else if (year != \"\" && !year.equals(\"null\") && year != \"null\") {\r\n                    query = \"select * from production_details where year = '\" + year + \"' \";\r\n                } else if (season_id != 0) {\r\n                    query = \"select * from production_details where season_id = '\" + season_id + \"' \";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        ProductionDetailsPojo saleDetailsPojo = new ProductionDetailsPojo();\r\n                        saleDetailsPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<SaleDetailsPojo> getCropListForSync(String fromSalesDetials) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SaleDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                String query = \"\";\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    query = \"select * from sale_details where flag = 0\";\r\n                } else {\r\n                    query = \"select * from production_details where flag = 0\";\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SaleDetailsPojo saleDetailsPojo = new SaleDetailsPojo();\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        if (fromSalesDetials.equals(\"2\")) {\r\n                            saleDetailsPojo.setCrop_type_price(cursor.getString(cursor.getColumnIndex(\"crop_type_price\")));\r\n                        }\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        saleDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        saleDetailsPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        saleDetailsPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<ProductionDetailsPojo> getProductionListForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<ProductionDetailsPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from production_details where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        ProductionDetailsPojo saleDetailsPojo = new ProductionDetailsPojo();\r\n                        saleDetailsPojo.setYear(cursor.getString(cursor.getColumnIndex(\"year\")));\r\n                        saleDetailsPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        saleDetailsPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        saleDetailsPojo.setQuanity_unit_id(cursor.getString(cursor.getColumnIndex(\"quanity_unit_id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        saleDetailsPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        saleDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        saleDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public void getAddProductionDetailData(ProductionDetailsPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"year\", user.getYear());\r\n                values.put(\"season_id\", user.getSeason_id());\r\n                values.put(\"quantity\", user.getQuantity());\r\n                values.put(\"quanity_unit_id\", user.getQuanity_unit_id());\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"production_details\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void getAddseleDetailData(SaleDetailsPojo user, String fromSalesDetials) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"season_id\", user.getSeason_id());\r\n                values.put(\"quantity\", user.getQuantity());\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    values.put(\"crop_type_price\", user.getCrop_type_price());\r\n                }\r\n                values.put(\"quanity_unit_id\", user.getQuanity_unit_id());\r\n                values.put(\"year\", user.getYear());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"unique_id\", user.getUnique_id());\r\n                values.put(\"planted_date\", user.getPlanted_date());\r\n                values.put(\"fruited_date\", user.getFruited_date());\r\n                values.put(\"flag\", 0);\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    values.put(\"is_close\", 0);\r\n                }\r\n                // Inserting Row\r\n\r\n                if (fromSalesDetials.equals(\"2\")) {\r\n                    db.insert(\"sale_details\", null, values);\r\n                } else {\r\n                    db.insert(\"production_details\", null, values);\r\n                }\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void getSubPlantationData(SubPlantationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"sub_plantation_id\", user.getSub_plantation_id());\r\n                values.put(\"value\", user.getValue());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"sub_plantation\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void getPostPlantationData(PostPlantationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"post_plantation_id\", user.getPost_plantation_id());\r\n                values.put(\"value\", user.getValue());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"post_plantation\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<SubPlantationPojo> getSubPlantatationForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SubPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from sub_plantation where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        SubPlantationPojo saleDetailsPojo = new SubPlantationPojo();\r\n                        saleDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        saleDetailsPojo.setSub_plantation_id(cursor.getString(cursor.getColumnIndex(\"sub_plantation_id\")));\r\n                        saleDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        saleDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        saleDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        saleDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(saleDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<PostPlantationPojo> getPostPlantatationForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<PostPlantationPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from post_plantation where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        PostPlantationPojo postDetailsPojo = new PostPlantationPojo();\r\n                        postDetailsPojo.setValue(cursor.getString(cursor.getColumnIndex(\"value\")));\r\n                        postDetailsPojo.setPost_plantation_id(cursor.getString(cursor.getColumnIndex(\"post_plantation_id\")));\r\n                        postDetailsPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        postDetailsPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        postDetailsPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        postDetailsPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(postDetailsPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public void getAddplantgrowth(PlantGrowthModal user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", user.getId());\r\n                values.put(\"crop_status_id\", user.getCrop_status_id());\r\n                values.put(\"crop_planing_id\", user.getCrop_planing_id());\r\n                values.put(\"plant_id\", user.getCrop_planing_id());\r\n                values.put(\"growth_date\", user.getGrowth_date());\r\n                values.put(\"remarks\", user.getRemarks());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"healthy_plants\", user.getHealthy_plants());\r\n                values.put(\"unhealthy_plants\", user.getUnhealthy_plants());\r\n                values.put(\"dead_plants\", user.getDead_plants());\r\n                values.put(\"plant_image\", user.getPlant_image());\r\n                values.put(\"crop_type_category_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"crop_type_subcategory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"plant_growth\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public long getFarmerFamilyData(FarmerRegistrationPojo user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", id);\r\n                values.put(\"name\", user.getName());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"monthly_income\", user.getMonthly_income());\r\n                values.put(\"occupation\", user.getOccupation());\r\n                values.put(\"gender\", user.getGender());\r\n                values.put(\"relation_id\", user.getRelation_id());\r\n\r\n                /*if (id == null || id.equals(\"\") || id.equals(\"0\")) {\r\n                    db.insert(\"farmer_family\", null, values);\r\n                    db.close();\r\n                } else {\r\n                    db.update(\"farmer_family\", values, \"id = '\" + id + \"'\", null);\r\n                    db.close(); // Closing database connection\r\n                }*/\r\n                //Inserting Row\r\n                ids = db.insert(\"farmer_family\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public long setCropDetailsData(CropVegitableDetails user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", id);\r\n                values.put(\"crop_name\", user.getCrop_name());\r\n                values.put(\"area\", user.getArea());\r\n                values.put(\"quantity\", user.getQuantity());\r\n                values.put(\"season_id\", user.getSeason_id());\r\n                values.put(\"unit_id\", user.getUnit_id());\r\n                values.put(\"units_id\", user.getUnits_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n\r\n                ids = db.insert(\"crop_vegetable_details\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n\r\n    public void AddPlantData(CropPlaningPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", user.getId());\r\n                values.put(\"plant_id\", user.getPlant_id());\r\n                values.put(\"plant_name\", user.getPlant_name());\r\n                values.put(\"land_id\", user.getLand_id());\r\n                values.put(\"crop_type_catagory_id\", user.getCrop_type_catagory_id());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"crop_type_subcatagory_id\", user.getCrop_type_subcatagory_id());\r\n                values.put(\"unit\", user.getUnit());\r\n                values.put(\"latitude\", user.getLatitude());\r\n                values.put(\"longitude\", user.getLongitude());\r\n                values.put(\"plant_image\", user.getPlant_image());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"planted_date\", user.getPlanted_date());\r\n                values.put(\"fruited_date\", user.getFruited_date());\r\n                values.put(\"season\", user.getSeason());\r\n                values.put(\"total_tree\", user.getTotal_tree());\r\n                values.put(\"flag\", 0);\r\n\r\n\r\n                // Inserting Row\r\n                db.insert(\"crop_planning\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void svaeTraningData(TrainingPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"from_date\", user.getFrom_date());\r\n                values.put(\"from_time\", user.getFrom_time());\r\n                values.put(\"to_date\", user.getTo_date());\r\n                values.put(\"to_time\", user.getTo_time());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"training_name\", user.getTraining_name());\r\n                values.put(\"trainer_name\", user.getTrainer_name());\r\n                values.put(\"brief_description\", user.getBrief_description());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"trainer_designation\", user.getTrainer_designation());\r\n                values.put(\"user_id\", user.getUser_id());\r\n                values.put(\"flag\", \"0\");\r\n                // Inserting Row\r\n                db.insert(\"training\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void svaeTraning_Attendance(TrainingAttandancePojo atend) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"training_id\", atend.getTraining_id());\r\n                values.put(\"added_by\", atend.getUser_id());\r\n                values.put(\"farmer_id\", atend.getFarmer_id());\r\n                values.put(\"flag\", 0);\r\n                // Inserting Row\r\n                db.insert(\"training_attendance\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<TrainingPojo> getTrainingData() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<TrainingPojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from training order by local_id desc\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        TrainingPojo trainingPojo = new TrainingPojo();\r\n                        trainingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        trainingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        trainingPojo.setFrom_date(cursor.getString(cursor.getColumnIndex(\"from_date\")));\r\n                        trainingPojo.setFrom_time(cursor.getString(cursor.getColumnIndex(\"from_time\")));\r\n                        trainingPojo.setTo_time(cursor.getString(cursor.getColumnIndex(\"to_time\")));\r\n                        trainingPojo.setTo_date(cursor.getString(cursor.getColumnIndex(\"to_date\")));\r\n                        trainingPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        trainingPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        trainingPojo.setTrainer_name(cursor.getString(cursor.getColumnIndex(\"trainer_name\")));\r\n                        trainingPojo.setTraining_name(cursor.getString(cursor.getColumnIndex(\"training_name\")));\r\n                        trainingPojo.setBrief_description(cursor.getString(cursor.getColumnIndex(\"brief_description\")));\r\n                        trainingPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        trainingPojo.setTrainer_designation(cursor.getString(cursor.getColumnIndex(\"trainer_designation\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(trainingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public ArrayList<TrainingAttandancePojo> getTrainingAttendance(String training_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<TrainingAttandancePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select id ,training_id,farmer_id,status,added_by from training_attendance where training_id = '\"+ training_id +\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        TrainingAttandancePojo trainingattendancePojo = new TrainingAttandancePojo();\r\n                        trainingattendancePojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        trainingattendancePojo.setTraining_id(cursor.getString(cursor.getColumnIndex(\"training_id\")));\r\n                        trainingattendancePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        trainingattendancePojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        trainingattendancePojo.setAdded_by(cursor.getString(cursor.getColumnIndex(\"added_by\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(trainingattendancePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<TrainingAttandancePojo> getTrainingAttendanceforsync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<TrainingAttandancePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from training_attendance where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        TrainingAttandancePojo trainingattendancePojo = new TrainingAttandancePojo();\r\n                        trainingattendancePojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        trainingattendancePojo.setTraining_id(cursor.getString(cursor.getColumnIndex(\"training_id\")));\r\n                        trainingattendancePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        trainingattendancePojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"added_by\")));\r\n                        trainingattendancePojo.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(trainingattendancePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n\r\n    public TrainingAttandancePojo getTrainingAttendanceData(String farmer_id, String training_id) {\r\n        TrainingAttandancePojo trainingattendancePojo = new TrainingAttandancePojo();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query=null;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                if(!farmer_id.equals(\"\") && training_id.equals(\"\")){\r\n                    query= \"select * from training_attendance  where farmer_id ='\"+ farmer_id +\"'\" ;\r\n\r\n                }else if(!farmer_id.equals(\"\") && !training_id.equals(\"\")){\r\n                    query= \"select * from training_attendance  where farmer_id ='\"+ farmer_id +\"' and training_id='\"+ training_id+\"'\" ;\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    trainingattendancePojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                    trainingattendancePojo.setTraining_id(cursor.getString(cursor.getColumnIndex(\"training_id\")));\r\n                    trainingattendancePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                    trainingattendancePojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"added_by\")));\r\n                    trainingattendancePojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                    trainingattendancePojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));\r\n                    trainingattendancePojo.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));\r\n\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return trainingattendancePojo;\r\n    }\r\n\r\n\r\n\r\n    public long saveVendorRegistrationData(SupplierRegistrationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long inserted_id = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"name\", user.getName());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"pan_no\", user.getPan_no());\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"email\", user.getEmail());\r\n                values.put(\"gstn_no\", user.getGstn_no());\r\n                values.put(\"vender_category\", user.getVender_category());\r\n                values.put(\"aadhar_no\", user.getAadhar_no());\r\n                values.put(\"aadhar_image\", user.getAadhar_image());\r\n                values.put(\"pan_image\", user.getPan_image());\r\n                values.put(\"gstn_image\", user.getGstn_image());\r\n                values.put(\"proprietor_no\", user.getProprietor_no());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n\r\n                // Inserting Row\r\n                inserted_id = db.insert(\"supplier_registration\", null, values);\r\n                db.close();\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public void saveUsersData(UsersPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"first_name\", user.getFirst_name());\r\n                values.put(\"last_name\", user.getLast_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"email\", user.getEmail());\r\n                values.put(\"profile_photo\", user.getProfile_photo());\r\n                values.put(\"id\", user.getId());\r\n\r\n                db.insert(\"users\", null, values);\r\n                db.close();\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public long AddLandData(LandHoldingPojo landHoldingPojo) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"area\", landHoldingPojo.getArea());\r\n                values.put(\"id\", landHoldingPojo.getId());\r\n                values.put(\"land_id\", landHoldingPojo.getLand_id());\r\n                values.put(\"farmer_id\", landHoldingPojo.getFarmer_id());\r\n                values.put(\"land_unit\", landHoldingPojo.getLand_unit());\r\n                values.put(\"image\", landHoldingPojo.getImage());\r\n                values.put(\"user_id\", landHoldingPojo.getUser_id());\r\n                values.put(\"latitude\", sharedPrefHelper.getString(\"LAT\", \"\"));\r\n                values.put(\"longitude\", sharedPrefHelper.getString(\"LONG\", \"\"));\r\n                values.put(\"total_plant\", landHoldingPojo.getTotal_plant());\r\n                values.put(\"soil_type_id\", landHoldingPojo.getSoil_type_id());\r\n                values.put(\"soil_color_id\", landHoldingPojo.getSoil_color_id());\r\n                //    values.put(\"soil_characteristics_id\", landHoldingPojo.getSoil_characteristics_id());\r\n                //    values.put(\"soil_chemical_composition_id\", landHoldingPojo.getSoil_chemical_composition_id());\r\n                values.put(\"filtration_rate\", landHoldingPojo.getFiltration_rate());\r\n                values.put(\"soil_texture\",landHoldingPojo.getSoil_texture());\r\n                values.put(\"ph\",landHoldingPojo.getPh());\r\n                values.put(\"bulk_density\", landHoldingPojo.getBulk_density());\r\n                values.put(\"cation_exchange_capacity\", landHoldingPojo.getCation_exchange_capacity());\r\n                values.put(\"ec\", landHoldingPojo.getEc());\r\n                values.put(\"p\", landHoldingPojo.getP());\r\n                values.put(\"s\", landHoldingPojo.getS());\r\n                values.put(\"mg\", landHoldingPojo.getMg());\r\n                values.put(\"k\", landHoldingPojo.getK());\r\n                values.put(\"n\", landHoldingPojo.getN());\r\n                values.put(\"ca\", landHoldingPojo.getCa());\r\n                values.put(\"land_name\", landHoldingPojo.getLand_name());\r\n                values.put(\"flag\", 0);\r\n                //Inserting Row\r\n                ids = db.insert(\"land_holding\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public long updateLandData(LandHoldingPojo landHoldingPojo, String land_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"area\", landHoldingPojo.getArea());\r\n                values.put(\"land_id\", landHoldingPojo.getLand_id());\r\n                values.put(\"farmer_id\", landHoldingPojo.getFarmer_id());\r\n                values.put(\"land_unit\", landHoldingPojo.getLand_unit());\r\n                values.put(\"image\", landHoldingPojo.getImage());\r\n                values.put(\"user_id\", landHoldingPojo.getUser_id());\r\n                values.put(\"latitude\", sharedPrefHelper.getString(\"LAT\", \"\"));\r\n                values.put(\"longitude\", sharedPrefHelper.getString(\"LONG\", \"\"));\r\n                values.put(\"total_plant\", landHoldingPojo.getTotal_plant());\r\n                values.put(\"soil_type_id\", landHoldingPojo.getSoil_type_id());\r\n                values.put(\"soil_color_id\", landHoldingPojo.getSoil_color_id());\r\n                //      values.put(\"soil_characteristics_id\", landHoldingPojo.getSoil_characteristics_id());\r\n                //      values.put(\"soil_chemical_composition_id\", landHoldingPojo.getSoil_chemical_composition_id());\r\n                values.put(\"filtration_rate\", landHoldingPojo.getFiltration_rate());\r\n                values.put(\"soil_texture\",landHoldingPojo.getSoil_texture());\r\n                values.put(\"ph\",landHoldingPojo.getPh());\r\n                values.put(\"bulk_density\", landHoldingPojo.getBulk_density());\r\n                values.put(\"cation_exchange_capacity\", landHoldingPojo.getCation_exchange_capacity());\r\n                values.put(\"ec\", landHoldingPojo.getEc());\r\n                values.put(\"p\", landHoldingPojo.getP());\r\n                values.put(\"s\", landHoldingPojo.getS());\r\n                values.put(\"mg\", landHoldingPojo.getMg());\r\n                values.put(\"k\", landHoldingPojo.getK());\r\n                values.put(\"n\", landHoldingPojo.getN());\r\n                values.put(\"ca\", landHoldingPojo.getCa());\r\n                values.put(\"land_name\", landHoldingPojo.getLand_name());\r\n                values.put(\"flag\", 0);\r\n                values.put(\"offline_sync\", 1);\r\n\r\n                db.update(\"land_holding\", values, \"id = '\" + land_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public LandHoldingPojo LandDetail(String farmer_id,String land_id_id) {\r\n        LandHoldingPojo landHoldingPojo = new LandHoldingPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from land_holding where id = '\" + land_id_id + \"' and farmer_id = '\"+farmer_id+\"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new LandHoldingPojo();\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        //               landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n                        //              landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return landHoldingPojo;\r\n    }\r\n\r\n    public void saveQueryData(HelplinePojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"query\", user.getQuery());\r\n                values.put(\"query_date\", user.getQuery_date());\r\n                values.put(\"image\", user.getImage());\r\n                values.put(\"farmer_id\", user.getFarmer_id());\r\n                values.put(\"audio_file\", user.getAudio_file());\r\n                values.put(\"flag\", 0);\r\n\r\n                db.insert(\"help_line\", null, values);\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public void saveSoilInfoData(SoilPojo soilPojo,String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"soil_type_id\", soilPojo.getSoil_type_id());\r\n                values.put(\"soil_color_id\", soilPojo.getSoil_color_id());\r\n                values.put(\"updated_soil_date\", soilPojo.getSoil_updated_date());\r\n                values.put(\"filtration_rate\", soilPojo.getFiltration_rate());\r\n//                values.put(\"soil_texture\",soilPojo.getSoil_texture());\r\n                values.put(\"ph\",soilPojo.getPh());\r\n                values.put(\"bulk_density\", soilPojo.getBulk_density());\r\n                values.put(\"cation_exchange_capacity\", soilPojo.getCation_exchange_capacity());\r\n                values.put(\"ec\", soilPojo.getEc());\r\n                values.put(\"p\", soilPojo.getP());\r\n                values.put(\"s\", soilPojo.getS());\r\n                values.put(\"mg\", soilPojo.getMg());\r\n                values.put(\"k\", soilPojo.getK());\r\n                values.put(\"n\", soilPojo.getN());\r\n                values.put(\"ca\", soilPojo.getCa());\r\n                values.put(\"land_id\", soilPojo.getLand_id());\r\n                if (id.equals(\"\")){\r\n                    db.insert(\"updated_soil\", null, values);\r\n\r\n                }else {\r\n                    db.update(\"updated_soil\", values, \"id = '\" + id + \"'\", null);\r\n\r\n                }\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n    public SoilPojo getSoilDetail(String id) {\r\n        SoilPojo soilPojo = new SoilPojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from updated_soil where id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        soilPojo = new SoilPojo();\r\n\r\n                        soilPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        soilPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        soilPojo.setSoil_updated_date(cursor.getString(cursor.getColumnIndex(\"updated_soil_date\")));\r\n                        soilPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        soilPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        soilPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        soilPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        soilPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        soilPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        soilPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        soilPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        soilPojo.setS((cursor.getString(cursor.getColumnIndex(\"s\"))));\r\n                        soilPojo.setK((cursor.getString(cursor.getColumnIndex(\"k\"))));\r\n                        soilPojo.setCa((cursor.getString(cursor.getColumnIndex(\"ca\"))));\r\n                        soilPojo.setLand_id((cursor.getString(cursor.getColumnIndex(\"land_id\"))));\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return soilPojo;\r\n    }\r\n    public void updateQueryData(HelplinePojo user, String id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"response_by\", user.getResponse_by());\r\n                values.put(\"response\", user.getResponse());\r\n                values.put(\"flag\", 0);\r\n                db.update(\"help_line\", values, \"id = '\" + id + \"'\", null);\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<HelplinePojo> getQueryListData(String name,String fromAnswer) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<HelplinePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String quer = \"\";\r\n                if (fromAnswer.equals(\"1\")){\r\n                    if (name.equals(\"\"))\r\n                        quer = \"select * from help_line  where  response != '' or  response != null\";\r\n                    else\r\n                        quer = \"select * from help_line where farmer_id = '\" + name + \"' and  response != '' or  response != null\";\r\n                }else if (fromAnswer.equals(\"0\")){\r\n                    if (name.equals(\"\"))\r\n                        quer = \"select * from help_line where response = '' or  response = null\";\r\n                    else\r\n                        quer = \"select * from help_line where farmer_id = '\" + name + \"'  and  response = '' or  response = null\";\r\n                }else {\r\n                    if (name.equals(\"\"))\r\n                        quer = \"select * from help_line\";\r\n                    else\r\n                        quer = \"select * from help_line where farmer_id = '\" + name + \"'\";\r\n                }\r\n                Cursor cursor = db.rawQuery(quer, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        HelplinePojo helplinePojo = new HelplinePojo();\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        helplinePojo.setQuery_date(cursor.getString(cursor.getColumnIndex(\"query_date\")));\r\n                        helplinePojo.setQuery(cursor.getString(cursor.getColumnIndex(\"query\")));\r\n                        helplinePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        helplinePojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        helplinePojo.setResponse(cursor.getString(cursor.getColumnIndex(\"response\")));\r\n                        helplinePojo.setAudio_file(cursor.getString(cursor.getColumnIndex(\"audio_file\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(helplinePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<HelplinePojo> getQueryListDataForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<HelplinePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String quer = \"select * from help_line where flag = 0\";\r\n                Cursor cursor = db.rawQuery(quer, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        HelplinePojo helplinePojo = new HelplinePojo();\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"local_id\")));\r\n                        String incomingDateDob = cursor.getString(cursor.getColumnIndex(\"query_date\"));\r\n                        SimpleDateFormat inputDateFormat = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\r\n                        Date newDate = inputDateFormat.parse(incomingDateDob);\r\n                        inputDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n                        String outputDateDob = inputDateFormat.format(newDate);\r\n                        helplinePojo.setQuery_date(outputDateDob);\r\n                        helplinePojo.setQuery(cursor.getString(cursor.getColumnIndex(\"query\")));\r\n                        helplinePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        helplinePojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(helplinePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<HelplinePojo> getQueryResponseForSync() {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<HelplinePojo> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String quer = \"select * from help_line where flag = 0\";\r\n                Cursor cursor = db.rawQuery(quer, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        HelplinePojo helplinePojo = new HelplinePojo();\r\n                        helplinePojo.setHelp_line_id(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"local_id\")));\r\n                        helplinePojo.setResponse(cursor.getString(cursor.getColumnIndex(\"response\")));\r\n                        helplinePojo.setResponse_by(cursor.getString(cursor.getColumnIndex(\"response_by\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(helplinePojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public HelplinePojo getQuesryDetail(String id) {\r\n        HelplinePojo helplinePojo = new HelplinePojo();\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from help_line where id = '\" + id + \"'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        helplinePojo.setLocal_id(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                        helplinePojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        helplinePojo.setQuery(cursor.getString(cursor.getColumnIndex(\"query\")));\r\n                        helplinePojo.setQuery_date(cursor.getString(cursor.getColumnIndex(\"query_date\")));\r\n                        helplinePojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        helplinePojo.setResponse(cursor.getString(cursor.getColumnIndex(\"response\")));\r\n//                        helplinePojo.setAudio_file(cursor.getString(cursor.getColumnIndex(\"audio_file\")));\r\n\r\n                        cursor.moveToNext();\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return helplinePojo;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------------------------*/\r\n    public int getLastInsertedLocalID() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM users ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    public int getSalesCount(String table_name,String ids) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT count(local_id) FROM '\"+ table_name +\"' where unique_id = '\"+ ids +\"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"count(local_id)\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    public int getLastInsertedLocalIdForVendor() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM supplier_registration ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public int getvisitCount(String plant_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"select count(local_id) from plant_growth where plant_id = '\" + plant_id + \"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"count(local_id)\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    public int getlandvisitCount(String plant_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"select count(c.land_id) as co from plant_growth p , crop_planning c where c.id = p.plant_id and c.land_id = '\"+ plant_id +\"' group by c.land_id\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"co\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public int getCountTables(String table, String plant_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"select count(local_id) from '\" + table + \"' where crop_type_catagory_id = '\" + plant_id + \"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"count(local_id)\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    public ArrayList<FarmerRegistrationPojo> getTableDataToBeSync() {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ArrayList<FarmerRegistrationPojo> arrayList = new ArrayList<FarmerRegistrationPojo>();\r\n        FarmerRegistrationPojo registrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select farmer_registration.id as f_id,farmer_registration.user_id as f_user_id,users.id as u_id,first_name,last_name,users.mobile as mobile,email,household_no,farmer_name,father_husband_name,category_id,id_type_id,id_other_name,id_no,bpl,address,age,date_of_birth,what_you_know,physical_challenges,handicapped,alternative_livelihood_id,nof_member_migrated,religion_id,multi_cropping,fertilizer,irrigation_facility,caste,gender,total_land_holding,agro_climat_zone_id,add_by,education_id,education_qualification,education_other_name,profile_photo,state_id,district_id,block_id,village_id,pincode,farmer_registration.offline_sync, farmer_registration.flag from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id WHERE farmer_registration.flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        registrationPojo = new FarmerRegistrationPojo();\r\n                        registrationPojo.setFirst_name(cursor.getString(cursor.getColumnIndex(\"first_name\")));\r\n                        registrationPojo.setLast_name(cursor.getString(cursor.getColumnIndex(\"last_name\")));\r\n                        registrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        registrationPojo.setEmail(cursor.getString(cursor.getColumnIndex(\"email\")));\r\n                        registrationPojo.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                        registrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        registrationPojo.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                        registrationPojo.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                        registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                        registrationPojo.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                        registrationPojo.setId_no(cursor.getString(cursor.getColumnIndex(\"id_no\")));\r\n                        registrationPojo.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                        registrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        registrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        registrationPojo.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                        registrationPojo.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                        registrationPojo.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                        registrationPojo.setHandicapped(cursor.getString(cursor.getColumnIndex(\"handicapped\")));\r\n                        registrationPojo.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                        //registrationPojo.setCrop_vegetable_details(cursor.getString(cursor.getColumnIndex(\"crop_vegetable_details\")));\r\n                        registrationPojo.setNof_member_migrated(cursor.getString(cursor.getColumnIndex(\"nof_member_migrated\")));\r\n                        registrationPojo.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                        registrationPojo.setMulti_cropping(cursor.getString(cursor.getColumnIndex(\"multi_cropping\")));\r\n                        registrationPojo.setFertilizer(cursor.getString(cursor.getColumnIndex(\"fertilizer\")));\r\n                        registrationPojo.setIrrigation_facility(cursor.getString(cursor.getColumnIndex(\"irrigation_facility\")));\r\n                        registrationPojo.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                        registrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                        registrationPojo.setTotal_land_holding(cursor.getString(cursor.getColumnIndex(\"total_land_holding\")));\r\n                        registrationPojo.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                        registrationPojo.setAdd_by(cursor.getString(cursor.getColumnIndex(\"add_by\")));\r\n                        registrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        //registrationPojo.setEducation_qualification(cursor.getString(cursor.getColumnIndex(\"education_qualification\")));\r\n                        registrationPojo.setEducation_other_name(cursor.getString(cursor.getColumnIndex(\"education_other_name\")));\r\n                        registrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                        registrationPojo.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        registrationPojo.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        registrationPojo.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                        registrationPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        registrationPojo.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                        registrationPojo.setOffline_sync(cursor.getInt(cursor.getColumnIndex(\"offline_sync\")));\r\n                        registrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"f_id\")));//(farmer registration table)\r\n                        registrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"f_user_id\")));//(farmer registration table)\r\n                        registrationPojo.setUid(cursor.getString(cursor.getColumnIndex(\"u_id\")));//(users table)\r\n                        registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));//(users table)\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(registrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<FarmerFamilyPojo> getFarmerFamilyTableDataToBeSync() {\r\n        ArrayList<FarmerFamilyPojo> arrayList = new ArrayList<FarmerFamilyPojo>();\r\n        FarmerFamilyPojo familyPojo;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from farmer_family where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        familyPojo = new FarmerFamilyPojo();\r\n                        familyPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        familyPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        familyPojo.setOther_education(cursor.getString(cursor.getColumnIndex(\"other_education\")));\r\n                        familyPojo.setMonthly_income(cursor.getString(cursor.getColumnIndex(\"monthly_income\")));\r\n                        familyPojo.setOccupation(cursor.getString(cursor.getColumnIndex(\"occupation\")));\r\n                        familyPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        familyPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                        familyPojo.setRelation_id(cursor.getString(cursor.getColumnIndex(\"relation_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(familyPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropVegitableDetails> getCropVegetableDataToBeSync() {\r\n        ArrayList<CropVegitableDetails> arrayList = new ArrayList<>();\r\n        CropVegitableDetails familyPojo;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_vegetable_details where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        familyPojo = new CropVegitableDetails();\r\n                        familyPojo.setCrop_name(cursor.getString(cursor.getColumnIndex(\"crop_name\")));\r\n                        familyPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        familyPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        familyPojo.setSeason_id(cursor.getString(cursor.getColumnIndex(\"season_id\")));\r\n                        familyPojo.setUnit_id(cursor.getString(cursor.getColumnIndex(\"unit_id\")));\r\n                        familyPojo.setUnits_id(cursor.getString(cursor.getColumnIndex(\"units_id\")));\r\n                        familyPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(familyPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public void updateId(String tableName, String updateFieldName, int server_id, int localId, String wherefieldName) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                ContentValues value = new ContentValues();\r\n                value.put(updateFieldName, server_id); // Name\r\n\r\n                long id= db.update(tableName, value, wherefieldName + \" = \" + localId, null);\r\n                db.close();\r\n                Log.e(\"Tag\", \"updateId: \" +id);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n\r\n    public long updateHouseHold(String table, String whr, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"household_no\", flag);\r\n                inserted_id = db.update(table, values, whr + \" = '\" + local_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n\r\n\r\n    public void updateLandId(String tableName, String updateFieldName, String server_id, int localId, String wherefieldName) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                ContentValues value = new ContentValues();\r\n                value.put(updateFieldName, server_id); // Name\r\n\r\n                db.update(tableName, value, wherefieldName + \" = \" + localId, null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public long updateFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n                if (table.equals(\"users\")) {\r\n                    inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n                } else {\r\n                    inserted_id = db.update(table, values, \"user_id\" + \" = \" + local_id + \"\", null);\r\n                }\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateLocalFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateInputOrderingStatus(String table, int category_id, String status) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"status\", status);\r\n\r\n                inserted_id = db.update(table, values, \"input_type_id\" + \" = \" + category_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateInputOrderingStatusId(String table, int category_id, String statusId) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"status_id\", statusId);\r\n\r\n                inserted_id = db.update(table, values, \"input_type_id\" + \" = \" + category_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateInputOrderingVendorId(String table, int category_id, String vendorId) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"vender_id\", vendorId);\r\n\r\n                inserted_id = db.update(table, values, \"input_type_id\" + \" = \" + category_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateAddLandFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateAddPlantFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateAddPlantID(String table, int local_id, String flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"plant_id\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = '\" + local_id + \"'\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateServerid(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateLandServeridInCropPlanning(String table, String id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"land_id\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"land_id\" + \" = \" + id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n    public long updateLandServeridInPlantGrowth(String table, String id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n\r\n                values.put(\"crop_planing_id\", flag);\r\n                values.put(\"plant_id\", flag);\r\n                inserted_id = db.update(table, values, \"crop_planing_id\" + \" = \" + id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateTotalTree(String table, String local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"total_tree\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n\r\n    public long updateCloseId(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"is_close\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateStatusInTrainning(String table, int local_id, String flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"status\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n\r\n    public long updateImageRemarks(String table, int local_id, String remarks,String base64) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"remarks\", remarks);\r\n                values.put(\"plant_image\", base64);\r\n\r\n                inserted_id = db.update(table, values, \"local_id\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public String getNameById(String tableName, String colName, String whrCol, int whrId) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String name = \"\";\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select \" + colName + \" from \" + tableName + \" where \" + whrCol + \" =\" + whrId;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    name = cursor.getString(cursor.getColumnIndex(colName));\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return name;\r\n    }\r\n    public String getNameByIdLang(String tableName, String colName, String whrCol, int whrId,String whrCol2, int language_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String name = \"\";\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select \" + colName + \" from \" + tableName + \" where \" + whrCol + \" =\" + whrId + \"and\" +whrCol2 + \" =\"+ language_id;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    name = cursor.getString(cursor.getColumnIndex(colName));\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return name;\r\n    }\r\n\r\n    public String getNameByIdlocation(String tableName, String colName, String whrCol, int whrId,String langa) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String name = \"\";\r\n        int lang=0;\r\n        if (langa.equals(\"hin\"))\r\n            lang=2;\r\n        else if (langa.equals(\"kan\"))\r\n            lang=3;\r\n        else\r\n            lang=1;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select \" + colName + \" from \" + tableName + \" where \" + whrCol + \" =\" + whrId + \" and language_id = \"+ lang +\" \";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    name = cursor.getString(cursor.getColumnIndex(colName));\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return name.trim();\r\n    }\r\n\r\n\r\n    public ArrayList<LandHoldingPojo> getAddLandDataToBeSync() {\r\n        ArrayList<LandHoldingPojo> arrayList = new ArrayList<LandHoldingPojo>();\r\n        LandHoldingPojo landHoldingPojo;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from land_holding where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new LandHoldingPojo();\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setArea(cursor.getString(cursor.getColumnIndex(\"area\")));\r\n                        landHoldingPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        landHoldingPojo.setTotal_plant(cursor.getString(cursor.getColumnIndex(\"total_plant\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setImage(cursor.getString(cursor.getColumnIndex(\"image\")));\r\n                        landHoldingPojo.setLand_unit(cursor.getString(cursor.getColumnIndex(\"land_unit\")));\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setSoil_type_id(cursor.getString(cursor.getColumnIndex(\"soil_type_id\")));\r\n                        landHoldingPojo.setSoil_color_id(cursor.getString(cursor.getColumnIndex(\"soil_color_id\")));\r\n                        //      landHoldingPojo.setSoil_characteristics_id(cursor.getString(cursor.getColumnIndex(\"soil_characteristics_id\")));\r\n                        //      landHoldingPojo.setSoil_chemical_composition_id(cursor.getString(cursor.getColumnIndex(\"soil_chemical_composition_id\")));\r\n                        landHoldingPojo.setFiltration_rate(cursor.getString(cursor.getColumnIndex(\"filtration_rate\")));\r\n                        landHoldingPojo.setSoil_texture(cursor.getString(cursor.getColumnIndex(\"soil_texture\")));\r\n                        landHoldingPojo.setPh(cursor.getString(cursor.getColumnIndex(\"ph\")));\r\n                        landHoldingPojo.setBulk_density(cursor.getString(cursor.getColumnIndex(\"bulk_density\")));\r\n                        landHoldingPojo.setCation_exchange_capacity(cursor.getString(cursor.getColumnIndex(\"cation_exchange_capacity\")));\r\n                        landHoldingPojo.setEc(cursor.getString(cursor.getColumnIndex(\"ec\")));\r\n                        landHoldingPojo.setP(cursor.getString(cursor.getColumnIndex(\"p\")));\r\n                        landHoldingPojo.setS(cursor.getString(cursor.getColumnIndex(\"s\")));\r\n                        landHoldingPojo.setMg(cursor.getString(cursor.getColumnIndex(\"mg\")));\r\n                        landHoldingPojo.setK(cursor.getString(cursor.getColumnIndex(\"k\")));\r\n                        landHoldingPojo.setN(cursor.getString(cursor.getColumnIndex(\"n\")));\r\n                        landHoldingPojo.setCa(cursor.getString(cursor.getColumnIndex(\"ca\")));\r\n                        landHoldingPojo.setLand_name(cursor.getString(cursor.getColumnIndex(\"land_name\")));\r\n                        landHoldingPojo.setOffline_sync(cursor.getInt(cursor.getColumnIndex(\"offline_sync\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<CropPlaningPojo> getAddPlantDataToBeSync() {\r\n        ArrayList<CropPlaningPojo> arrayList = new ArrayList<CropPlaningPojo>();\r\n        CropPlaningPojo landHoldingPojo;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from crop_planning where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new CropPlaningPojo();\r\n                        landHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        landHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        landHoldingPojo.setPlant_name(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        landHoldingPojo.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        landHoldingPojo.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        landHoldingPojo.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        landHoldingPojo.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        landHoldingPojo.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        landHoldingPojo.setFruited_date(cursor.getString(cursor.getColumnIndex(\"fruited_date\")));\r\n                        landHoldingPojo.setPlanted_date(cursor.getString(cursor.getColumnIndex(\"planted_date\")));\r\n                        landHoldingPojo.setSeason(cursor.getString(cursor.getColumnIndex(\"season\")));\r\n                        landHoldingPojo.setTotal_tree(cursor.getString(cursor.getColumnIndex(\"total_tree\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<TrainingPojo> getTrainningToBeSync() {\r\n        ArrayList<TrainingPojo> arrayList = new ArrayList<TrainingPojo>();\r\n        TrainingPojo landHoldingPojo;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from training where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        landHoldingPojo = new TrainingPojo();\r\n                        landHoldingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        landHoldingPojo.setGroup_id(cursor.getString(cursor.getColumnIndex(\"group_id\")));\r\n                        landHoldingPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        landHoldingPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        landHoldingPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        landHoldingPojo.setTo_date(cursor.getString(cursor.getColumnIndex(\"to_date\")));\r\n                        landHoldingPojo.setTo_time(cursor.getString(cursor.getColumnIndex(\"to_time\")));\r\n                        landHoldingPojo.setFrom_time(cursor.getString(cursor.getColumnIndex(\"from_time\")));\r\n                        landHoldingPojo.setFrom_date(cursor.getString(cursor.getColumnIndex(\"from_date\")));\r\n                        landHoldingPojo.setTraining_name(cursor.getString(cursor.getColumnIndex(\"training_name\")));\r\n                        landHoldingPojo.setBrief_description(cursor.getString(cursor.getColumnIndex(\"brief_description\")));\r\n                        landHoldingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        landHoldingPojo.setTrainer_name(cursor.getString(cursor.getColumnIndex(\"trainer_name\")));\r\n                        landHoldingPojo.setTrainer_designation(cursor.getString(cursor.getColumnIndex(\"trainer_designation\")));\r\n                        landHoldingPojo.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(landHoldingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public int getLastInsertedLocalId() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM land_holding ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public long saveInputOrderingDataInTable(InputOrderingPojo inputOrderingPojo) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", sharedPrefHelper.getString(\"user_id\", \"\"));\r\n                values.put(\"request_date_to\", inputOrderingPojo.getRequest_date_to());\r\n                values.put(\"request_date_from\", inputOrderingPojo.getRequest_date_from());\r\n                values.put(\"input_type_id\", inputOrderingPojo.getInput_type_id());\r\n                values.put(\"quantity\", inputOrderingPojo.getQuantity());\r\n                values.put(\"quantity_units\", inputOrderingPojo.getQuantity_units());\r\n                values.put(\"status\", inputOrderingPojo.getStatus());\r\n                values.put(\"status_id\", inputOrderingPojo.getStatus_id());\r\n                values.put(\"farmer_id\", inputOrderingPojo.getFarmer_id());\r\n                values.put(\"remarks\", inputOrderingPojo.getRemarks());\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"input_ordering\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public HashMap<String, Integer> getMasterSpinnerId(int master_type, int language_id) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        MasterPojo masterPojo;\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \"select * from master where  master_type= '\" + master_type + \"' and language_id ='\"+language_id+\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        masterPojo = new MasterPojo();\r\n                        masterPojo.setMaster_name(cursor.getString(cursor.getColumnIndex(\"master_name\")));\r\n                        masterPojo.setCaption_id(cursor.getString(cursor.getColumnIndex(\"caption_id\")));\r\n                        cursor.moveToNext();\r\n                        hashMap.put(masterPojo.getMaster_name(), Integer.parseInt(masterPojo.getCaption_id()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return hashMap;\r\n    }\r\n\r\n    public DisclaimerPojo getdisclaimer(int id, int language_id) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        DisclaimerPojo disclaimerPojo = new DisclaimerPojo();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \" select * from disclaimer where  id= '\" + id + \"' and language_id ='\"+language_id+\"'\";\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        disclaimerPojo.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n                        disclaimerPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        cursor.moveToNext();\r\n                        // hashMap.put(disclaimerPojo.getTitle(), Integer.parseInt(disclaimerPojo.getDescription()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return disclaimerPojo;\r\n    }\r\n\r\n    public AboutUs getaboutus(int id, int language_id) {\r\n        HashMap<String, Integer> hashMap = new HashMap<>();\r\n        SQLiteDatabase sqLiteDatabase = this.getWritableDatabase();\r\n        AboutUs aboutUsPojo = new AboutUs();\r\n        try {\r\n            if (sqLiteDatabase != null && sqLiteDatabase.isOpen() && !sqLiteDatabase.isReadOnly()) {\r\n                String query = \" select * from contact_us where  id= '\" + id + \"' and language_id ='\"+language_id+\"'\";\r\n\r\n                Cursor cursor = sqLiteDatabase.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        aboutUsPojo.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n                        aboutUsPojo.setDescription(cursor.getString(cursor.getColumnIndex(\"description\")));\r\n                        cursor.moveToNext();\r\n                        // hashMap.put(disclaimerPojo.getTitle(), Integer.parseInt(disclaimerPojo.getDescription()));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            sqLiteDatabase.close();\r\n        }\r\n        return aboutUsPojo;\r\n    }\r\n\r\n    public ArrayList<InputOrderingPojo> getInputOrderingList(String selected_farmer, String tab_type) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<InputOrderingPojo> arrayList = new ArrayList<>();\r\n        InputOrderingPojo inputOrderingPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query=\"\";\r\n                if (selected_farmer.equals(\"\") && !tab_type.equals(\"\")) {\r\n                    query = \"SELECT * FROM input_ordering where status_id ='\"+tab_type+\"' order by id DESC \";\r\n                }\r\n                else if (!selected_farmer.equals(\"\") && !tab_type.equals(\"\")) {\r\n                    query = \"SELECT * FROM input_ordering where farmer_id = '\" + selected_farmer + \"' and status_id='\"+tab_type+\"' order by id DESC\";\r\n                }\r\n                else if (selected_farmer.equals(\"\") && tab_type.equals(\"\")) {\r\n                    query = \"SELECT * FROM input_ordering order by id DESC\";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingPojo = new InputOrderingPojo();\r\n                        inputOrderingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        inputOrderingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingPojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        inputOrderingPojo.setRequest_date_to(cursor.getString(cursor.getColumnIndex(\"request_date_to\")));\r\n                        inputOrderingPojo.setRequest_date_from(cursor.getString(cursor.getColumnIndex(\"request_date_from\")));\r\n                        inputOrderingPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        inputOrderingPojo.setQuantity_units(cursor.getString(cursor.getColumnIndex(\"quantity_units\")));\r\n                        inputOrderingPojo.setStatus_id(cursor.getString(cursor.getColumnIndex(\"status_id\")));\r\n                        inputOrderingPojo.setInput_type_id(cursor.getString(cursor.getColumnIndex(\"input_type_id\")));\r\n                        inputOrderingPojo.setVender_id(cursor.getString(cursor.getColumnIndex(\"vender_id\")));\r\n                        inputOrderingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public FarmerRegistrationPojo getFarmerDetailsForEdit(String user_id) {\r\n        FarmerRegistrationPojo registrationPojo = new FarmerRegistrationPojo();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from farmer_registration INNER JOIN users ON farmer_registration.user_id = users.id WHERE farmer_registration.user_id=\" + user_id;\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    registrationPojo.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                    registrationPojo.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n                    registrationPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                    registrationPojo.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                    registrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                    registrationPojo.setId_no(cursor.getString(cursor.getColumnIndex(\"id_no\")));\r\n                    registrationPojo.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                    registrationPojo.setId_type_id(cursor.getString(cursor.getColumnIndex(\"id_type_id\")));\r\n                    registrationPojo.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n                    registrationPojo.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                    registrationPojo.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                    registrationPojo.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                    registrationPojo.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                    registrationPojo.setNof_member_migrated(cursor.getString(cursor.getColumnIndex(\"nof_member_migrated\")));\r\n                    registrationPojo.setEducation_other_name(cursor.getString(cursor.getColumnIndex(\"education_other_name\")));\r\n                    //  registrationPojo.setCrop_vegetable_details(cursor.getString(cursor.getColumnIndex(\"crop_vegetable_details\")));\r\n                    registrationPojo.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                    registrationPojo.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                    registrationPojo.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                    registrationPojo.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                    registrationPojo.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                    registrationPojo.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                    registrationPojo.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                    registrationPojo.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                    registrationPojo.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                    registrationPojo.setAdd_by(cursor.getString(cursor.getColumnIndex(\"add_by\")));\r\n                    registrationPojo.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                    registrationPojo.setAnnual_income(cursor.getInt(cursor.getColumnIndex(\"annual_income\")));\r\n                    registrationPojo.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                    registrationPojo.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                    registrationPojo.setHandicapped(cursor.getString(cursor.getColumnIndex(\"handicapped\")));\r\n                    registrationPojo.setMulti_cropping(cursor.getString(cursor.getColumnIndex(\"multi_cropping\")));\r\n                    registrationPojo.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                    registrationPojo.setIrrigation_facility(cursor.getString(cursor.getColumnIndex(\"irrigation_facility\")));\r\n                    //registrationPojo.setEducation_qualification(cursor.getString(cursor.getColumnIndex(\"education_qualification\")));\r\n                    registrationPojo.setEducation_name_other(cursor.getString(cursor.getColumnIndex(\"education_name_other\")));\r\n                    registrationPojo.setTotal_land_holding(cursor.getString(cursor.getColumnIndex(\"total_land_holding\")));\r\n                    registrationPojo.setFertilizer(cursor.getString(cursor.getColumnIndex(\"fertilizer\")));\r\n                    registrationPojo.setGender(cursor.getString(cursor.getColumnIndex(\"gender\")));\r\n                    registrationPojo.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                    registrationPojo.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"profile_photo\")));\r\n                    registrationPojo.setFlag(cursor.getString(cursor.getColumnIndex(\"flag\")));//(users table)\r\n\r\n                    cursor.moveToNext();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return registrationPojo;\r\n    }\r\n\r\n    public ArrayList<SupplierRegistrationPojo> getVendorsList(String category_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<SupplierRegistrationPojo> arrayList = new ArrayList<>();\r\n        SupplierRegistrationPojo supplierRegistrationPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"SELECT * FROM supplier_registration WHERE (',' || vender_category || ',') LIKE '%,\" + category_id + \",%'\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        supplierRegistrationPojo = new SupplierRegistrationPojo();\r\n                        supplierRegistrationPojo.setName(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        supplierRegistrationPojo.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        supplierRegistrationPojo.setVender_category(cursor.getString(cursor.getColumnIndex(\"vender_category\")));\r\n                        supplierRegistrationPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(supplierRegistrationPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<InputOrderingPojo> getInputOrderingDataToBeSync() {\r\n        ArrayList<InputOrderingPojo> arrayList = new ArrayList<InputOrderingPojo>();\r\n        InputOrderingPojo inputOrderingPojo;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from input_ordering where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingPojo = new InputOrderingPojo();\r\n                        inputOrderingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        inputOrderingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingPojo.setRequest_date_from(cursor.getString(cursor.getColumnIndex(\"request_date_from\")));\r\n                        inputOrderingPojo.setRequest_date_to(cursor.getString(cursor.getColumnIndex(\"request_date_to\")));\r\n                        inputOrderingPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        inputOrderingPojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        inputOrderingPojo.setQuantity_units(cursor.getString(cursor.getColumnIndex(\"quantity_units\")));\r\n                        inputOrderingPojo.setStatus_id(cursor.getString(cursor.getColumnIndex(\"status_id\")));\r\n                        inputOrderingPojo.setInput_type_id(cursor.getString(cursor.getColumnIndex(\"input_type_id\")));\r\n                        inputOrderingPojo.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public int getLastInsertedIovId() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM input_ordering_vender ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public long saveInputOrderingVendorDataInTable(InputOrderingVendor inputOrderingVendor) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"input_ordering_id\", inputOrderingVendor.getInput_ordering_id());\r\n                values.put(\"user_id\", inputOrderingVendor.getUser_id());\r\n                values.put(\"vender_id\", inputOrderingVendor.getVendor_id());\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"input_ordering_vender\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<InputOrderingVendor> getInputOrderingVendorDataToBeSync() {\r\n        ArrayList<InputOrderingVendor> arrayList = new ArrayList<InputOrderingVendor>();\r\n        InputOrderingVendor inputOrderingVendor;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from input_ordering_vender where flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingVendor = new InputOrderingVendor();\r\n                        inputOrderingVendor.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingVendor.setInput_ordering_id(cursor.getString(cursor.getColumnIndex(\"input_ordering_id\")));\r\n                        inputOrderingVendor.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingVendor.setVender_id(cursor.getString(cursor.getColumnIndex(\"vender_id\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingVendor);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public void updateStatus(String tableName, String updateFieldName, String server_id, int localId, String wherefieldName) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n\r\n                ContentValues value = new ContentValues();\r\n                value.put(updateFieldName, server_id); // Name\r\n\r\n                db.update(tableName, value, wherefieldName + \" = \" + localId, null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<VendorRegModal> getVendorRegistrationDataToBeSync() {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ArrayList<VendorRegModal> arrayList = new ArrayList<VendorRegModal>();\r\n        VendorRegModal vendorRegModal;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from supplier_registration WHERE flag=0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        vendorRegModal = new VendorRegModal();\r\n                        //vendorRegModal.setFirst_name(cursor.getString(cursor.getColumnIndex(\"\")));\r\n                        //vendorRegModal.setLast_name(cursor.getString(cursor.getColumnIndex(\"\")));\r\n                        vendorRegModal.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        //vendorRegModal.setEmail(cursor.getString(cursor.getColumnIndex(\"\")));\r\n                        vendorRegModal.setSupplier_name(cursor.getString(cursor.getColumnIndex(\"name\")));\r\n                        vendorRegModal.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        vendorRegModal.setEmail(cursor.getString(cursor.getColumnIndex(\"email\")));\r\n                        vendorRegModal.setVender_category(cursor.getString(cursor.getColumnIndex(\"vender_category\")));\r\n                        vendorRegModal.setGstn_no(cursor.getString(cursor.getColumnIndex(\"gstn_no\")));\r\n                        vendorRegModal.setGstn_image(cursor.getString(cursor.getColumnIndex(\"gstn_image\")));\r\n                        vendorRegModal.setPan_no(cursor.getString(cursor.getColumnIndex(\"pan_no\")));\r\n                        vendorRegModal.setPan_image(cursor.getString(cursor.getColumnIndex(\"pan_image\")));\r\n                        vendorRegModal.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                        vendorRegModal.setAadhar_image(cursor.getString(cursor.getColumnIndex(\"aadhar_image\")));\r\n                        vendorRegModal.setProprietor_no(cursor.getString(cursor.getColumnIndex(\"proprietor_no\")));\r\n                        vendorRegModal.setProprietor_image(cursor.getString(cursor.getColumnIndex(\"proprietor_image\")));\r\n                        vendorRegModal.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        vendorRegModal.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        //vendorRegModal.setProfile_photo(cursor.getString(cursor.getColumnIndex(\"\")));\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(vendorRegModal);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public ArrayList<InputOrderingPojo> getFilterInputOrderingList(int seeds_id, int farmer_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<InputOrderingPojo> arrayList = new ArrayList<>();\r\n        InputOrderingPojo inputOrderingPojo;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"\";\r\n                if (farmer_id != 0) {\r\n                    query = \"SELECT * FROM input_ordering WHERE farmer_id = '\" + farmer_id + \"'\";\r\n                } else if (seeds_id != 0) {\r\n                    query = \"SELECT * FROM input_ordering WHERE input_type_id = '\" + seeds_id + \"'\";\r\n                } else {\r\n                    query = \"SELECT * FROM input_ordering WHERE input_type_id = '\" + seeds_id + \"' and farmer_id = '\" + farmer_id + \"'\";\r\n                }\r\n\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        inputOrderingPojo = new InputOrderingPojo();\r\n                        inputOrderingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        inputOrderingPojo.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        inputOrderingPojo.setStatus(cursor.getString(cursor.getColumnIndex(\"status\")));\r\n                        inputOrderingPojo.setRequest_date_to(cursor.getString(cursor.getColumnIndex(\"request_date_to\")));\r\n                        inputOrderingPojo.setRequest_date_from(cursor.getString(cursor.getColumnIndex(\"request_date_from\")));\r\n                        inputOrderingPojo.setQuantity(cursor.getString(cursor.getColumnIndex(\"quantity\")));\r\n                        inputOrderingPojo.setQuantity_units(cursor.getString(cursor.getColumnIndex(\"quantity_units\")));\r\n                        inputOrderingPojo.setStatus_id(cursor.getString(cursor.getColumnIndex(\"status_id\")));\r\n                        inputOrderingPojo.setInput_type_id(cursor.getString(cursor.getColumnIndex(\"input_type_id\")));\r\n                        inputOrderingPojo.setVender_id(cursor.getString(cursor.getColumnIndex(\"vender_id\")));\r\n                        inputOrderingPojo.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        inputOrderingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(inputOrderingPojo);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public int getPlantId(int ids,int farmer_id) {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM crop_planning where crop_type_subcatagory_id = '\"+ ids +\"' and farmer_id = '\"+ farmer_id +\"'\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public int getSupplierID() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM supplier_registration ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public long updateUsersData(UsersPojo user, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long inserted_id = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"first_name\", user.getFirst_name());\r\n                values.put(\"last_name\", user.getLast_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"email\", user.getEmail());\r\n                values.put(\"profile_photo\", user.getProfile_photo());\r\n                values.put(\"flag\", 0);\r\n\r\n                db.update(\"users\", values, \"id =\" + user_id, null);\r\n                db.close();\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public long updateFarmerRegistrationData(FarmerRegistrationPojo user, String farmer_id, String user_id) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"user_id\", user_id);\r\n                values.put(\"household_no\", user.getHousehold_no());\r\n                values.put(\"farmer_name\", user.getFarmer_name());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"date_of_birth\", user.getDate_of_birth());\r\n                values.put(\"what_you_know\", user.getWhat_you_know());\r\n                values.put(\"id_type_id\", user.getId_type_id());\r\n                values.put(\"id_no\", user.getId_no());\r\n                values.put(\"father_husband_name\", user.getFather_husband_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"bpl\", user.getBpl());\r\n                //values.put(\"education_qualification\", user.getEducation_qualification());\r\n                values.put(\"physical_challenges\", user.getPhysical_challenges());\r\n                values.put(\"handicapped\", user.getHandicapped());\r\n                values.put(\"total_land_holding\", user.getTotal_land_holding());\r\n                values.put(\"nof_member_migrated\", user.getNof_member_migrated());\r\n                //values.put(\"crop_vegetable_details\", user.getCrop_vegetable_details());\r\n                values.put(\"multi_cropping\", user.getMulti_cropping());\r\n                values.put(\"fertilizer\", user.getFertilizer());\r\n                values.put(\"irrigation_facility\", user.getIrrigation_facility());\r\n                values.put(\"religion_id\", user.getReligion_id());\r\n                values.put(\"category_id\", user.getCategory_id());\r\n                values.put(\"caste\", user.getCaste());\r\n                values.put(\"annual_income\", user.getAnnual_income());\r\n                values.put(\"agro_climat_zone_id\", user.getAgro_climat_zone_id());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n                values.put(\"block_id\", user.getBlock_id());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"pincode\", user.getPincode());\r\n                values.put(\"id_other_name\", user.getId_other_name());\r\n                values.put(\"alternative_livelihood_id\", user.getAlternative_livelihood_id());\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"flag\", 0);\r\n                values.put(\"offline_sync\", 1);\r\n\r\n                //Inserting Row\r\n                ids = db.update(\"farmer_registration\", values, \"id = '\" + farmer_id + \"'\", null);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<VisitPlantModel> getVisitPlantList(String selected_farmer, String land_id) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        ArrayList<VisitPlantModel> arrayList = new ArrayList<>();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query;\r\n                if (!selected_farmer.equals(\"\")) {\r\n                    query = \"select * from crop_planning where farmer_id = '\" + selected_farmer + \"' \";\r\n\r\n                }else\r\n                if (!land_id.equals(\"\")) {\r\n                    query = \"select * from crop_planning where land_id = '\" + land_id + \"' \";\r\n\r\n                } else {\r\n                    query = \"select * from crop_planning\";\r\n\r\n                }\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n\r\n                    while (!cursor.isAfterLast()) {\r\n                        VisitPlantModel visitPlantModel = new VisitPlantModel();\r\n                        visitPlantModel.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        visitPlantModel.setPlant_id(cursor.getString(cursor.getColumnIndex(\"plant_id\")));\r\n                        visitPlantModel.setPlant_name(cursor.getString(cursor.getColumnIndex(\"plant_name\")));\r\n                        visitPlantModel.setLand_id(cursor.getString(cursor.getColumnIndex(\"land_id\")));\r\n                        visitPlantModel.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        visitPlantModel.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        visitPlantModel.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        visitPlantModel.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        visitPlantModel.setCrop_type_catagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_catagory_id\")));\r\n                        visitPlantModel.setCrop_type_subcatagory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcatagory_id\")));\r\n                        cursor.moveToNext();\r\n                        arrayList.add(visitPlantModel);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n    public long sendVisitPlantDataInDB(VisitPlantModel visitPlantModel) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"remarks\", visitPlantModel.getRemarks());\r\n                values.put(\"plant_image\", visitPlantModel.getPlant_image());\r\n                values.put(\"growth_date\", visitPlantModel.getGrowth_date());\r\n                values.put(\"farmer_id\", visitPlantModel.getFarmer_id());\r\n                values.put(\"crop_status_id\", visitPlantModel.getCrop_status_id());\r\n                values.put(\"crop_planing_id\", visitPlantModel.getCrop_planing_id());\r\n                values.put(\"plant_id\", visitPlantModel.getPlant_id());\r\n                values.put(\"user_id\", visitPlantModel.getUser_id());\r\n                values.put(\"crop_type_category_id\", visitPlantModel.getCrop_type_category_id());\r\n                values.put(\"crop_type_subcategory_id\", visitPlantModel.getCrop_type_subcategory_id());\r\n                values.put(\"flag\", \"0\");\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"plant_growth\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n\r\n    public ArrayList<VisitPlantModel> getPlantGrowthData() {\r\n        ArrayList<VisitPlantModel> arrayList = new ArrayList<VisitPlantModel>();\r\n        VisitPlantModel visitPlantModel;\r\n\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                String query = \"select * from plant_growth where flag = 0\";\r\n                Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n                        visitPlantModel = new VisitPlantModel();\r\n                        visitPlantModel.setCrop_planing_id(cursor.getString(cursor.getColumnIndex(\"crop_planing_id\")));\r\n                        visitPlantModel.setCrop_status_id(cursor.getString(cursor.getColumnIndex(\"crop_status_id\")));\r\n                        visitPlantModel.setGrowth_date(cursor.getString(cursor.getColumnIndex(\"growth_date\")));\r\n                        visitPlantModel.setRemarks(cursor.getString(cursor.getColumnIndex(\"remarks\")));\r\n                        visitPlantModel.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n                        visitPlantModel.setUser_id(cursor.getString(cursor.getColumnIndex(\"user_id\")));\r\n                        visitPlantModel.setCrop_type_category_id(cursor.getString(cursor.getColumnIndex(\"crop_type_category_id\")));\r\n                        visitPlantModel.setCrop_type_subcategory_id(cursor.getString(cursor.getColumnIndex(\"crop_type_subcategory_id\")));\r\n                        visitPlantModel.setPlant_image(cursor.getString(cursor.getColumnIndex(\"plant_image\")));\r\n                        visitPlantModel.setLocal_id(cursor.getString(cursor.getColumnIndex(\"local_id\")));\r\n                        visitPlantModel.setRole_id(sharedPrefHelper.getString(\"role_id\",\"\"));;\r\n\r\n                        cursor.moveToNext();\r\n                        arrayList.add(visitPlantModel);\r\n                    }\r\n                    db.close();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return arrayList;\r\n    }\r\n\r\n\r\n    public long updateVisitPlantFlag(String table, int local_id, int flag) {\r\n        long inserted_id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"flag\", flag);\r\n\r\n                inserted_id = db.update(table, values, \"flag\" + \" = \" + local_id + \"\", null);\r\n\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return inserted_id;\r\n    }\r\n\r\n    public int getSupplierLastInsertedLocalID() {\r\n        int id = 0;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String query = \"SELECT id FROM supplier_registration ORDER BY id DESC LIMIT 1\";\r\n        if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n            Cursor cur = db.rawQuery(query, null);\r\n            if (cur != null && cur.getCount() > 0) {\r\n                cur.move(0);\r\n                while (cur.moveToNext()) {\r\n                    try {\r\n                        id = cur.getInt(cur.getColumnIndex(\"id\"));\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    public boolean updateEditFlagInTable(String tablename) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        String updateQuery = \"Update '\" + tablename + \"' set flag = '1' where flag='0' \";\r\n        Log.d(\"update query\", updateQuery);\r\n        db.execSQL(updateQuery);\r\n        db.close();\r\n\r\n        return true;\r\n    }\r\n\r\n    public long getPSFarmerRegistrationData(ParyavaranSakhiRegistrationPojo user) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (db != null && db.isOpen() && !db.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n\r\n                values.put(\"id\",user.getId());\r\n                values.put(\"household_no\", user.getHousehold_no());\r\n                values.put(\"farmer_image\", user.getFarmer_image());\r\n\r\n                values.put(\"farmer_name\", user.getFarmer_name());\r\n                values.put(\"age\", user.getAge());\r\n                values.put(\"date_of_birth\", user.getDate_of_birth());\r\n                values.put(\"father_husband_name\", user.getFather_husband_name());\r\n                values.put(\"mobile\", user.getMobile());\r\n                values.put(\"bpl\", user.getBpl());\r\n                //values.put(\"education_qualification\", user.getEducation_qualification());\r\n                values.put(\"physical_challenges\", user.getPhysical_challenges());\r\n                values.put(\"total_land_holding\", user.getTotal_land_holding());\r\n                values.put(\"no_of_Member_migrated\", user.getNo_of_member_migrated());\r\n                //  values.put(\"crop_vegetable_details\", user.getCrop_vegetable_details());\r\n                values.put(\"religion_id\", user.getReligion_id());\r\n                values.put(\"category_id\", user.getCategory_id());\r\n                values.put(\"caste\", user.getCaste());\r\n                values.put(\"annual_income\", user.getAnnual_income());\r\n                values.put(\"agro_climat_zone_id\", user.getAgro_climat_zone_id());\r\n                values.put(\"education_id\", user.getEducation_id());\r\n                values.put(\"state_id\", user.getState_id());\r\n                values.put(\"district_id\", user.getDistrict_id());\r\n                values.put(\"block_id\", user.getBlock_id());\r\n                values.put(\"village_id\", user.getVillage_id());\r\n                values.put(\"pincode\", user.getPincode());\r\n                values.put(\"id_other_name\", user.getId_other_name());\r\n                values.put(\"alternative_livelihood_id\", user.getAlternative_livelihood_id());\r\n                values.put(\"address\", user.getAddress());\r\n                values.put(\"martial_category\", user.getMartial_category());\r\n\r\n                /*if (id == null || id.equals(\"\") || id.equals(\"0\")) {\r\n                    db.insert(\"farmer_registration\", null, values);\r\n                    db.close();\r\n                } else {\r\n                    db.update(\"farmer_registration\", values, \"id = '\" + id + \"'\", null);\r\n                    db.close(); // Closing database connection\r\n                }*/\r\n\r\n                //Inserting Row\r\n                ids = db.insert(\"ps_farmer_registration\", null, values);\r\n                db.close();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n\r\n        return ids;\r\n        //New Registration\r\n    }\r\n\r\n    public ArrayList<ParyavaranSakhiRegistrationPojo> PS_getRegistrationData1() {\r\n        ArrayList<ParyavaranSakhiRegistrationPojo> registerTableArrayList1 = new ArrayList<>();\r\n        SQLiteDatabase db1 = this.getWritableDatabase();\r\n        try {\r\n            if (db1 != null && db1.isOpen() && !db1.isReadOnly()) {\r\n                String query = \"select * from ps_farmer_registration \";\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db1.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        ParyavaranSakhiRegistrationPojo list1 = new ParyavaranSakhiRegistrationPojo();\r\n                        list1.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        list1.setHousehold_no(cursor.getString(cursor.getColumnIndex(\"household_no\")));\r\n                        list1.setAadhar_no(cursor.getString(cursor.getColumnIndex(\"aadhar_no\")));\r\n                        list1.setFarmer_name(cursor.getString(cursor.getColumnIndex(\"farmer_name\")));\r\n                        list1.setFarmer_image(cursor.getString(cursor.getColumnIndex(\"farmer_image\")));\r\n\r\n                        // list1.setId_type_name(cursor.getString(cursor.getColumnIndex(\"id_type_name\")));\r\n                        list1.setId_other_name(cursor.getString(cursor.getColumnIndex(\"id_other_name\")));\r\n                        list1.setFather_husband_name(cursor.getString(cursor.getColumnIndex(\"father_husband_name\")));\r\n                        list1.setMobile(cursor.getString(cursor.getColumnIndex(\"mobile\")));\r\n                        list1.setAge(cursor.getString(cursor.getColumnIndex(\"age\")));\r\n                        list1.setDate_of_birth(cursor.getString(cursor.getColumnIndex(\"date_of_birth\")));\r\n                        list1.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        list1.setState_id(cursor.getString(cursor.getColumnIndex(\"state_id\")));\r\n                        list1.setDistrict_id(cursor.getString(cursor.getColumnIndex(\"district_id\")));\r\n                        list1.setBlock_id(cursor.getString(cursor.getColumnIndex(\"block_id\")));\r\n                        list1.setVillage_id(cursor.getString(cursor.getColumnIndex(\"village_id\")));\r\n                        list1.setPincode(cursor.getString(cursor.getColumnIndex(\"pincode\")));\r\n                        list1.setBpl(cursor.getString(cursor.getColumnIndex(\"bpl\")));\r\n                        list1.setReligion_id(cursor.getString(cursor.getColumnIndex(\"religion_id\")));\r\n                        list1.setCaste(cursor.getString(cursor.getColumnIndex(\"caste\")));\r\n                        list1.setEducation_id(cursor.getString(cursor.getColumnIndex(\"education_id\")));\r\n                        list1.setPhysical_challenges(cursor.getString(cursor.getColumnIndex(\"physical_challenges\")));\r\n                        list1.setCategory_id(cursor.getString(cursor.getColumnIndex(\"category_id\")));\r\n                        list1.setAnnual_income(cursor.getString(cursor.getColumnIndex(\"annual_income\")));\r\n                        list1.setAgro_climat_zone_id(cursor.getString(cursor.getColumnIndex(\"agro_climat_zone_id\")));\r\n                        list1.setAlternative_livelihood_id(cursor.getString(cursor.getColumnIndex(\"alternative_livelihood_id\")));\r\n                        list1.setNo_of_member_migrated(cursor.getString(cursor.getColumnIndex(\"no_of_member_migrated\")));\r\n                        list1.setWhat_you_know(cursor.getString(cursor.getColumnIndex(\"what_you_know\")));\r\n\r\n                        registerTableArrayList1.add(list1);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db1.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db1.close();\r\n        }\r\n        return registerTableArrayList1;\r\n    }\r\n\r\n\r\n\r\n    public long PSsaveHousehold(PSNeemPlantationPojo householdMasterModel)\r\n    {\r\n        SQLiteDatabase DB1 =this.getWritableDatabase();\r\n        long ids =0;\r\n        try\r\n        {\r\n            if(DB1 !=null && !DB1.isReadOnly())\r\n            {\r\n                ContentValues values =new ContentValues();\r\n                values.put(\"id\",householdMasterModel.getId());\r\n                values.put(\"NeemPlantation_Image\",householdMasterModel.getNeemPlantation_Image());\r\n                values.put(\"Neem_Plantation\",householdMasterModel.getNeem_Plantation());\r\n                //               values.put(\"Sub_Neem_Category\",householdMasterModel.getSub_Neem_Category());\r\n                values.put(\"Land\",householdMasterModel.getLand());\r\n\r\n                values.put(\"Plantation_Date\",householdMasterModel.getPlantation_Date());\r\n                values.put(\"Geo_Coordinates\",householdMasterModel.getGeo_Coordinates());\r\n\r\n\r\n                ids =DB1.insert(\"Ps_Neem_Plantation\",null, values);\r\n                DB1.close();\r\n            }\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n            DB1.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<PSNeemPlantationPojo> getRegistrationData()\r\n    {\r\n        ArrayList<PSNeemPlantationPojo> psNeemPlantationPojoArrayList = new ArrayList<>();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try\r\n        {\r\n            if (db != null && db.isOpen() && !db.isReadOnly())\r\n            {\r\n                String query = \"select * from Ps_Neem_Plantation \";\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0)\r\n                {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast())\r\n                    {\r\n\r\n                        PSNeemPlantationPojo psNeemPlantationPojo = new PSNeemPlantationPojo();\r\n                        psNeemPlantationPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        psNeemPlantationPojo.setNeemPlantation_Image(cursor.getString(cursor.getColumnIndex(\"NeemPlantation_Image\")));\r\n                        psNeemPlantationPojo.setNeem_Plantation(cursor.getString(cursor.getColumnIndex(\"Neem_Plantation\")));\r\n//                        psNeemPlantationPojo.setSub_Neem_Category(cursor.getString(cursor.getColumnIndex(\"Sub_Neem_Category\")));\r\n                        psNeemPlantationPojo.setLand(cursor.getString(cursor.getColumnIndex(\"Land\")));\r\n                        psNeemPlantationPojo.setPlantation_Date(cursor.getString(cursor.getColumnIndex(\"Plantation_Date\")));\r\n                        psNeemPlantationPojo.setGeo_Coordinates(cursor.getString(cursor.getColumnIndex(\"Geo_Coordinates\")));\r\n\r\n                        psNeemPlantationPojoArrayList.add(psNeemPlantationPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return psNeemPlantationPojoArrayList;\r\n\r\n    }\r\n\r\n    public long pslandholding1(PSLandHoldingPojo householdMasterModel)\r\n    {\r\n        SQLiteDatabase DB1 =this.getWritableDatabase();\r\n        long ids =0;\r\n        try\r\n        {\r\n            if(DB1 !=null && !DB1.isReadOnly())\r\n            {\r\n                ContentValues values =new ContentValues();\r\n                values.put(\"id\",householdMasterModel.getId());\r\n                // values.put(\"farmer_id\",householdMasterModel.getFarmer_id());\r\n\r\n                values.put(\"Land_id\",householdMasterModel.getLand_id());\r\n\r\n                values.put(\"btn_upload_land\",householdMasterModel.getBtn_upload_land());\r\n                values.put(\"Farmer_Selection\",householdMasterModel.getFarmer_Selection());\r\n                values.put(\"Land_Area\",householdMasterModel.getLand_Area());\r\n                values.put(\"Land_Name\",householdMasterModel.getLand_Name());\r\n\r\n\r\n                ids =DB1.insert(\"Ps_Land_Holding\",null, values);\r\n                DB1.close();\r\n            }\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n            DB1.close();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    public ArrayList<PSLandHoldingPojo> PSgetRegistrationData()\r\n    {\r\n        ArrayList<PSLandHoldingPojo> psLandHoldingPojoArrayList = new ArrayList<>();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        try\r\n        {\r\n            if (db != null && db.isOpen() && !db.isReadOnly())\r\n            {\r\n                String query = \"select * from Ps_Land_Holding \";\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0)\r\n                {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast())\r\n                    {\r\n\r\n                        PSLandHoldingPojo psLandHoldingPojo = new PSLandHoldingPojo();\r\n                        psLandHoldingPojo.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        // psLandHoldingPojo.setFarmer_id(cursor.getString(cursor.getColumnIndex(\"farmer_id\")));\r\n\r\n                        psLandHoldingPojo.setLand_id(cursor.getString(cursor.getColumnIndex(\"Land_id\")));\r\n\r\n                        psLandHoldingPojo.setBtn_upload_land(cursor.getString(cursor.getColumnIndex(\"btn_upload_land\")));\r\n                        psLandHoldingPojo.setFarmer_Selection(cursor.getString(cursor.getColumnIndex(\"Farmer_Selection\")));\r\n                        psLandHoldingPojo.setLand_Area(cursor.getString(cursor.getColumnIndex(\"Land_Area\")));\r\n                        psLandHoldingPojo.setLand_Name(cursor.getString(cursor.getColumnIndex(\"Land_Name\")));\r\n\r\n                        psLandHoldingPojoArrayList.add(psLandHoldingPojo);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db.close();\r\n        }\r\n        return psLandHoldingPojoArrayList;\r\n\r\n    }\r\n    public long SkillTracking(SkillTrackingPojo householdMasterModel) {\r\n        SQLiteDatabase DB1 = this.getWritableDatabase();\r\n        long ids = 0;\r\n        try {\r\n            if (DB1 != null && !DB1.isReadOnly()) {\r\n                ContentValues values = new ContentValues();\r\n                values.put(\"id\", householdMasterModel.getId());\r\n                values.put(\"skill\", householdMasterModel.getSkill());\r\n                values.put(\"address\", householdMasterModel.getAddress());\r\n                values.put(\"contact\", householdMasterModel.getContact());\r\n                values.put(\"mobileno\", householdMasterModel.getMobileno());\r\n                values.put(\"latitude\", householdMasterModel.getLatitude());\r\n                values.put(\"longitude\", householdMasterModel.getLongitude());\r\n                values.put(\"state\", householdMasterModel.getState());\r\n                values.put(\"district\", householdMasterModel.getDistrict());\r\n                values.put(\"village\", householdMasterModel.getVillage());\r\n\r\n\r\n                ids = DB1.insert(\"Skill_Training\", null, values);\r\n                DB1.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            DB1.close();\r\n        }\r\n        return ids;\r\n    }\r\n    public ArrayList<SkillTrackingPojo> getRegistrationData1() {\r\n        ArrayList<SkillTrackingPojo> registerTableArrayList1 = new ArrayList<>();\r\n        SQLiteDatabase db1 = this.getWritableDatabase();\r\n        try {\r\n            if (db1 != null && db1.isOpen() && !db1.isReadOnly()) {\r\n                String query = \"select * from Skill_Training \";\r\n\r\n                @SuppressLint(\"Recycle\") Cursor cursor = db1.rawQuery(query, null);\r\n                if (cursor != null && cursor.getCount() > 0) {\r\n                    cursor.moveToFirst();\r\n                    while (!cursor.isAfterLast()) {\r\n\r\n                        SkillTrackingPojo list1 = new SkillTrackingPojo();\r\n                        list1.setId(cursor.getString(cursor.getColumnIndex(\"id\")));\r\n                        list1.setSkill(cursor.getString(cursor.getColumnIndex(\"skill\")));\r\n                        list1.setAddress(cursor.getString(cursor.getColumnIndex(\"address\")));\r\n                        list1.setContact(cursor.getString(cursor.getColumnIndex(\"contact\")));\r\n                        list1.setMobileno(cursor.getString(cursor.getColumnIndex(\"mobileno\")));\r\n                        list1.setLatitude(cursor.getString(cursor.getColumnIndex(\"latitude\")));\r\n                        list1.setLongitude(cursor.getString(cursor.getColumnIndex(\"longitude\")));\r\n                        list1.setState(cursor.getString(cursor.getColumnIndex(\"state\")));\r\n                        list1.setDistrict(cursor.getString(cursor.getColumnIndex(\"district\")));\r\n                        list1.setVillage(cursor.getString(cursor.getColumnIndex(\"village\")));\r\n\r\n                        registerTableArrayList1.add(list1);\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                db1.close();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            db1.close();\r\n        }\r\n        return registerTableArrayList1;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java b/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java
--- a/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/app/src/main/java/com/sanket/jubifarm/data_base/SqliteHelper.java	(date 1653729197450)
@@ -9,7 +9,7 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
-import androidx.annotation.Nullable;
+
 
 import com.sanket.jubifarm.Livelihood.Model.PSLandHoldingPojo;
 import com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;
@@ -51,6 +51,8 @@
 import com.sanket.jubifarm.Modal.VillagePojo;
 import com.sanket.jubifarm.Modal.VisitPlantModel;
 
+import org.jetbrains.annotations.Nullable;
+
 import java.io.File;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -4675,16 +4677,13 @@
             {
                 ContentValues values =new ContentValues();
                 values.put("id",householdMasterModel.getId());
-                values.put("NeemPlantation_Image",householdMasterModel.getNeemPlantation_Image());
-                values.put("Neem_Plantation",householdMasterModel.getNeem_Plantation());
-                //               values.put("Sub_Neem_Category",householdMasterModel.getSub_Neem_Category());
-                values.put("Land",householdMasterModel.getLand());
+                values.put("neem_plantation_Image",householdMasterModel.getNeem_plantation_image());
+                values.put("land_id",householdMasterModel.getLand_id());
+                values.put("plantation_date",householdMasterModel.getPlantation_Date());
+                values.put("geo_coordinates",householdMasterModel.getGeo_coordinates());
 
-                values.put("Plantation_Date",householdMasterModel.getPlantation_Date());
-                values.put("Geo_Coordinates",householdMasterModel.getGeo_Coordinates());
 
-
-                ids =DB1.insert("Ps_Neem_Plantation",null, values);
+                ids =DB1.insert("ps_neem_plantation",null, values);
                 DB1.close();
             }
         }
@@ -4696,45 +4695,6 @@
         return ids;
     }
 
-    public ArrayList<PSNeemPlantationPojo> getRegistrationData()
-    {
-        ArrayList<PSNeemPlantationPojo> psNeemPlantationPojoArrayList = new ArrayList<>();
-        SQLiteDatabase db = this.getWritableDatabase();
-        try
-        {
-            if (db != null && db.isOpen() && !db.isReadOnly())
-            {
-                String query = "select * from Ps_Neem_Plantation ";
-
-                @SuppressLint("Recycle") Cursor cursor = db.rawQuery(query, null);
-                if (cursor != null && cursor.getCount() > 0)
-                {
-                    cursor.moveToFirst();
-                    while (!cursor.isAfterLast())
-                    {
-
-                        PSNeemPlantationPojo psNeemPlantationPojo = new PSNeemPlantationPojo();
-                        psNeemPlantationPojo.setId(cursor.getString(cursor.getColumnIndex("id")));
-                        psNeemPlantationPojo.setNeemPlantation_Image(cursor.getString(cursor.getColumnIndex("NeemPlantation_Image")));
-                        psNeemPlantationPojo.setNeem_Plantation(cursor.getString(cursor.getColumnIndex("Neem_Plantation")));
-//                        psNeemPlantationPojo.setSub_Neem_Category(cursor.getString(cursor.getColumnIndex("Sub_Neem_Category")));
-                        psNeemPlantationPojo.setLand(cursor.getString(cursor.getColumnIndex("Land")));
-                        psNeemPlantationPojo.setPlantation_Date(cursor.getString(cursor.getColumnIndex("Plantation_Date")));
-                        psNeemPlantationPojo.setGeo_Coordinates(cursor.getString(cursor.getColumnIndex("Geo_Coordinates")));
-
-                        psNeemPlantationPojoArrayList.add(psNeemPlantationPojo);
-                        cursor.moveToNext();
-                    }
-                }
-                db.close();
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-            db.close();
-        }
-        return psNeemPlantationPojoArrayList;
-
-    }
 
     public long pslandholding1(PSLandHoldingPojo householdMasterModel)
     {
@@ -4874,4 +4834,36 @@
     }
 
 
+    public ArrayList<PSNeemPlantationPojo> getneemplantation() {
+        ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos = new ArrayList<>();
+        SQLiteDatabase db = this.getWritableDatabase();
+        try
+        {
+            if(db != null && !db.isReadOnly())
+            {
+                String query = "select * from ps_neem_plantation";
+                Cursor cursor = db.rawQuery(query, null);
+                if(cursor != null && cursor.getCount() > 0)
+                {
+                    cursor.moveToFirst();
+                    while (!cursor.isAfterLast())
+                    {
+                        PSNeemPlantationPojo ps_neem_plantation = new PSNeemPlantationPojo();
+                        ps_neem_plantation.setLand_id(cursor.getString(cursor.getColumnIndex("land_id")));
+                        ps_neem_plantation.setLocal_id(cursor.getString(cursor.getColumnIndex("local_id")));
+                        ps_neem_plantation.setGeo_coordinates(cursor.getString(cursor.getColumnIndex("geo_coordinates")));
+                        ps_neem_plantation.setNeem_plantation_image(cursor.getString(cursor.getColumnIndex("neem_plantation_image")));
+                        cursor.moveToNext();
+                        psNeemPlantationPojos.add(ps_neem_plantation);
+                    }
+                }
+                db.close();
+            }
+        }
+        catch(Exception e){
+            e.printStackTrace();
+            db.close();
+        }
+        return psNeemPlantationPojos;
+    }
 }
Index: app/src/main/res/layout/activity_neem_plantation.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    tools:context=\".Livelihood.NeemPlantation\">\r\n\r\n    <ScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\"\r\n                android:layout_marginTop=\"@dimen/_8dp\"\r\n                android:weightSum=\"2\">\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"200dp\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_weight=\"1\"\r\n                    android:orientation=\"vertical\">\r\n\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/img_setimage\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"180dp\"\r\n                        android:gravity=\"center\"\r\n                        android:padding=\"5dp\"\r\n                        android:src=\"@drawable/prev\" />\r\n                    <!--<de.hdodenhof.circleimageview.CircleImageView\r\n                        android:id=\"@+id/img_setimage\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"150dp\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:padding=\"5dp\"\r\n                        android:src=\"@drawable/prev\" />-->\r\n\r\n\r\n                </LinearLayout>\r\n\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:gravity=\"center\"\r\n                    android:layout_weight=\"1\"\r\n                    android:orientation=\"vertical\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:orientation=\"vertical\"\r\n                        android:weightSum=\"2\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"50dp\"\r\n                            android:layout_marginHorizontal=\"5dp\"\r\n                            android:layout_weight=\"1\"\r\n                            android:background=\"@drawable/buttanshape\"\r\n                            android:visibility=\"gone\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <LinearLayout\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:orientation=\"horizontal\"\r\n                                android:padding=\"4dp\"\r\n\r\n                                android:weightSum=\"2\">\r\n\r\n                                <LinearLayout\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_weight=\"1\"\r\n                                    android:orientation=\"vertical\">\r\n\r\n\r\n                                    <ImageView\r\n                                        android:layout_width=\"match_parent\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:padding=\"@dimen/_10dp\"\r\n                                        android:src=\"@drawable/upload\" />\r\n\r\n\r\n                                </LinearLayout>\r\n\r\n\r\n                                <LinearLayout\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_gravity=\"center\"\r\n                                    android:layout_weight=\"1\"\r\n                                    android:orientation=\"vertical\">\r\n\r\n\r\n                                    <TextView\r\n                                        android:layout_width=\"match_parent\"\r\n                                        android:layout_height=\"wrap_content\"\r\n\r\n                                        android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                                        android:text=\"UPLOAD IMAGE\"\r\n                                        android:textColor=\"@color/white\"\r\n                                        android:textSize=\"8sp\" />\r\n\r\n\r\n                                </LinearLayout>\r\n\r\n\r\n                            </LinearLayout>\r\n\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"5dp\"\r\n                            android:layout_marginTop=\"30dp\"\r\n                            android:layout_weight=\"1\"\r\n                            android:orientation=\"vertical\">\r\n\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/CLICKIMAGE\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"55dp\"\r\n                                android:layout_gravity=\"center\"\r\n                                android:background=\"@drawable/editplant\"\r\n                                android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                                android:gravity=\"center\"\r\n                                android:text=\"@string/TAKE_PICTURE_OF_CROP\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"12sp\" />\r\n\r\n\r\n                        </LinearLayout>\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n                </LinearLayout>\r\n\r\n\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"vertical\"\r\n                android:padding=\"@dimen/_10dp\">\r\n\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"@dimen/_8dp\"\r\n                    android:visibility=\"gone\"\r\n                    android:orientation=\"vertical\">\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"5sp\"\r\n                        android:orientation=\"horizontal\">\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"Fruited Date\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textSize=\"@dimen/text_14\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:textColor=\"@android:color/darker_gray\"/>\r\n\r\n                    </LinearLayout>\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:padding=\"@dimen/_5dp\">\r\n                        <TextView\r\n                            android:id=\"@+id/et_fruit_fromdate\"\r\n                            android:layout_width=\"0dip\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1\"\r\n                            android:background=\"@drawable/textviewboader\"\r\n                            android:drawableRight=\"@drawable/ic_baseline_date_range_24\"\r\n                            android:editable=\"false\"\r\n                            android:hint=\"@string/From_Date\"\r\n                            android:paddingLeft=\"8dp\"\r\n                            android:textColor=\"@android:color/black\"\r\n                            android:textSize=\"@dimen/text_18\" />\r\n                        <TextView\r\n                            android:id=\"@+id/et_fruit_todate\"\r\n                            android:layout_width=\"0dip\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1\"\r\n                            android:background=\"@drawable/textviewboader\"\r\n                            android:drawableRight=\"@drawable/ic_baseline_date_range_24\"\r\n                            android:layout_marginLeft=\"@dimen/_5dp\"\r\n                            android:editable=\"false\"\r\n                            android:hint=\"@string/To_Date\"\r\n                            android:paddingLeft=\"8dp\"\r\n                            android:textColor=\"@android:color/black\"\r\n                            android:textSize=\"@dimen/text_18\" />\r\n\r\n                    </LinearLayout>\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/ll_spn_farmer\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    android:visibility=\"gone\"\r\n                    android:weightSum=\"2\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:text=\"@string/Farmer\"\r\n                            android:singleLine=\"true\"\r\n                            android:textColor=\"@android:color/darker_gray\"\r\n                            android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <Spinner\r\n                            android:id=\"@+id/spnfarmerselection\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginTop=\"2dp\"\r\n                            android:drawSelectorOnTop=\"true\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tv_Farmer_name\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"Farmer Name\"\r\n                            android:visibility=\"gone\"\r\n                            />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    android:weightSum=\"2\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:text=\"@string/Land\"\r\n                            android:textColor=\"@android:color/darker_gray\"\r\n                            android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1.2\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"gone\">\r\n\r\n\r\n                        <EditText\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"27dp\"\r\n                            android:background=\"@drawable/textviewboader\"\r\n\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:hint=\"23\"\r\n                            android:inputType=\"number\"\r\n                            android:paddingLeft=\"7dp\"\r\n                            android:singleLine=\"true\"\r\n                            android:textColor=\"@android:color/black\"\r\n                            android:textSize=\"13sp\"\r\n                            android:visibility=\"gone\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <Spinner\r\n                            android:id=\"@+id/spnLandSelection\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginTop=\"2dp\"\r\n                            android:drawSelectorOnTop=\"true\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tv_land_name\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"land Name\"\r\n                            android:visibility=\"gone\"\r\n                            />\r\n                    </LinearLayout>\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/ll_areaRequirement\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    android:weightSum=\"3\"\r\n                    android:orientation=\"horizontal\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:text=\"@string/Area\"\r\n                            android:textColor=\"@android:color/darker_gray\"\r\n                            android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                    </LinearLayout>\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <EditText\r\n                            android:id=\"@+id/et_area\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:hint=\"\"\r\n                            android:inputType=\"number\"\r\n                            android:textColor=\"@android:color/darker_gray\"\r\n                            android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1.2\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"gone\">\r\n\r\n\r\n                        <EditText\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"27dp\"\r\n                            android:background=\"@drawable/textviewboader\"\r\n\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:hint=\"23\"\r\n                            android:inputType=\"number\"\r\n                            android:paddingLeft=\"7dp\"\r\n                            android:singleLine=\"true\"\r\n                            android:textColor=\"@android:color/black\"\r\n                            android:textSize=\"13sp\"\r\n                            android:visibility=\"gone\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n                        <Spinner\r\n                            android:id=\"@+id/spnUnitSelection\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginTop=\"2dp\"\r\n                            android:drawSelectorOnTop=\"true\" />\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"land Name\"\r\n                            android:visibility=\"gone\" />\r\n                    </LinearLayout>\r\n\r\n\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/ll_total_tree\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    android:weightSum=\"2\"\r\n                    android:visibility=\"gone\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:text=\"@string/total_tree\"\r\n                            android:textColor=\"@android:color/darker_gray\"\r\n                            android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"visible\">\r\n\r\n\r\n                        <EditText\r\n                            android:id=\"@+id/et_total_tree\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"27dp\"\r\n                            android:background=\"@drawable/textviewboader\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:hint=\"\"\r\n                            android:maxLength=\"3\"\r\n                            android:inputType=\"number\"\r\n                            android:paddingLeft=\"7dp\"\r\n                            android:singleLine=\"true\"\r\n                            android:textColor=\"@android:color/black\"\r\n                            android:textSize=\"13sp\"\r\n                            android:visibility=\"visible\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n\r\n\r\n                </LinearLayout>\r\n\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/ll_date\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:orientation=\"vertical\">\r\n\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginHorizontal=\"10dp\"\r\n                        android:layout_marginTop=\"10dp\"\r\n                        android:weightSum=\"2\"\r\n                        android:orientation=\"horizontal\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:layout_weight=\"1\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                                android:text=\"@string/planted_date\"\r\n                                android:textColor=\"@android:color/darker_gray\"\r\n                                android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:layout_weight=\"1.2\"\r\n                            android:orientation=\"vertical\"\r\n                            android:visibility=\"gone\">\r\n\r\n\r\n                            <EditText\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"27dp\"\r\n                                android:background=\"@drawable/textviewboader\"\r\n\r\n                                android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                                android:hint=\"23\"\r\n                                android:inputType=\"number\"\r\n                                android:paddingLeft=\"7dp\"\r\n                                android:singleLine=\"true\"\r\n                                android:textColor=\"@android:color/black\"\r\n                                android:textSize=\"13sp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n\r\n                        </LinearLayout>\r\n\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:layout_weight=\"1\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <EditText\r\n                                android:id=\"@+id/et_plant_date\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:background=\"@drawable/textviewboader\"\r\n                                android:drawableRight=\"@drawable/ic_baseline_date_range_24\"\r\n                                />\r\n                        </LinearLayout>\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/ll_fruitationDate\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginHorizontal=\"10dp\"\r\n                        android:layout_marginTop=\"10dp\"\r\n                        android:weightSum=\"2\"\r\n                        android:visibility=\"gone\"\r\n                        android:orientation=\"horizontal\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:layout_weight=\"1\"\r\n                            android:orientation=\"vertical\">\r\n\r\n\r\n                            <TextView\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                                android:text=\"@string/fruited_date\"\r\n                                android:textColor=\"@android:color/darker_gray\"\r\n                                android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:layout_weight=\"1.2\"\r\n                            android:orientation=\"vertical\"\r\n                            android:visibility=\"gone\">\r\n\r\n\r\n                            <EditText\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"27dp\"\r\n                                android:background=\"@drawable/textviewboader\"\r\n\r\n                                android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                                android:hint=\"23\"\r\n                                android:inputType=\"number\"\r\n                                android:paddingLeft=\"7dp\"\r\n                                android:singleLine=\"true\"\r\n                                android:textColor=\"@android:color/black\"\r\n                                android:textSize=\"13sp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n\r\n                        </LinearLayout>\r\n\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:layout_weight=\"1\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <EditText\r\n                                android:id=\"@+id/et_fruit_date\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:background=\"@drawable/textviewboader\"\r\n                                android:drawableRight=\"@drawable/ic_baseline_date_range_24\"\r\n                                />\r\n                        </LinearLayout>\r\n\r\n\r\n                    </LinearLayout>\r\n                </LinearLayout>\r\n\r\n\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    android:weightSum=\"2\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                            android:text=\"@string/Geo_Cordinates\"\r\n                            android:textColor=\"@android:color/darker_gray\"\r\n                            android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"27dp\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_weight=\"1\"\r\n                        android:background=\"@android:color/white\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:orientation=\"horizontal\"\r\n                            android:weightSum=\"2\">\r\n\r\n                            <LinearLayout\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_weight=\"1\"\r\n                                android:orientation=\"vertical\">\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/GeoCoodinate\"\r\n                                    android:layout_width=\"wrap_content\"\r\n                                    android:layout_height=\"27dp\"\r\n                                    android:gravity=\"center\"\r\n                                    android:hint=\"15.345243, 12.55.3452\"\r\n                                    android:paddingLeft=\"3dp\"\r\n                                    android:textColor=\"@android:color/black\"\r\n                                    android:textSize=\"@dimen/text_12\" />\r\n\r\n                            </LinearLayout>\r\n\r\n                            <!--                <LinearLayout-->\r\n                            <!--                    android:layout_width=\"match_parent\"-->\r\n                            <!--                    android:layout_height=\"wrap_content\"-->\r\n                            <!--                    android:layout_weight=\"1\"-->\r\n                            <!--                    android:background=\"#5BC236\"-->\r\n                            <!--                    android:orientation=\"vertical\">-->\r\n\r\n                            <!--                    <TextView-->\r\n                            <!--                        android:layout_width=\"match_parent\"-->\r\n                            <!--                        android:layout_height=\"27dp\"-->\r\n\r\n\r\n                            <!--                        android:gravity=\"center\"-->\r\n                            <!--                        android:text=\"Geo Cordinates\"-->\r\n                            <!--                        android:textColor=\"@android:color/white\"-->\r\n                            <!--                        android:textSize=\"10sp\"/>-->\r\n\r\n                            <!--                </LinearLayout>-->\r\n\r\n                        </LinearLayout>\r\n                    </LinearLayout>\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginHorizontal=\"10dp\"\r\n                    android:layout_marginTop=\"@dimen/margin70\"\r\n                    android:orientation=\"vertical\">\r\n\r\n                    <Button\r\n                        android:id=\"@+id/btn_submitDetls\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"40dp\"\r\n\r\n\r\n                        android:layout_marginHorizontal=\"@dimen/_20dp\"\r\n                        android:background=\"@drawable/buttanshape\"\r\n                        android:fontFamily=\"@font/itcavantagradestdbk\"\r\n                        android:text=\"@string/Submit\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/text_15\" />\r\n\r\n\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"10dp\"\r\n                android:orientation=\"vertical\">\r\n\r\n\r\n\r\n            </LinearLayout>\r\n        </LinearLayout>\r\n    </ScrollView>\r\n\r\n\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_neem_plantation.xml b/app/src/main/res/layout/activity_neem_plantation.xml
--- a/app/src/main/res/layout/activity_neem_plantation.xml	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/app/src/main/res/layout/activity_neem_plantation.xml	(date 1653720805158)
@@ -302,31 +302,7 @@
 
                     </LinearLayout>
 
-                    <LinearLayout
-                        android:layout_width="match_parent"
-                        android:layout_height="wrap_content"
-                        android:layout_gravity="center"
-                        android:layout_weight="1.2"
-                        android:orientation="vertical"
-                        android:visibility="gone">
-
-
-                        <EditText
-                            android:layout_width="match_parent"
-                            android:layout_height="27dp"
-                            android:background="@drawable/textviewboader"
-
-                            android:fontFamily="@font/itcavantagradestdbk"
-                            android:hint="23"
-                            android:inputType="number"
-                            android:paddingLeft="7dp"
-                            android:singleLine="true"
-                            android:textColor="@android:color/black"
-                            android:textSize="13sp"
-                            android:visibility="gone" />
-
-
-                    </LinearLayout>
+
 
 
                     <LinearLayout
@@ -344,16 +320,11 @@
                             android:layout_marginTop="2dp"
                             android:drawSelectorOnTop="true" />
 
-                        <TextView
-                            android:id="@+id/tv_land_name"
-                            android:layout_width="match_parent"
-                            android:layout_height="wrap_content"
-                            android:text="land Name"
-                            android:visibility="gone"
                             />
                     </LinearLayout>
                 </LinearLayout>
 
+
                 <LinearLayout
                     android:id="@+id/ll_areaRequirement"
                     android:layout_width="match_parent"
@@ -560,7 +531,7 @@
                             <EditText
                                 android:layout_width="match_parent"
                                 android:layout_height="27dp"
-                                android:background="@drawable/textviewboader"
+
 
                                 android:fontFamily="@font/itcavantagradestdbk"
                                 android:hint="23"
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\n\r\nimport com.sanket.jubifarm.R;\r\nimport com.shamanland.fab.FloatingActionButton;\r\n\r\npublic class PS_NeemPlantationList extends AppCompatActivity {\r\n\r\n  ImageButton fab;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_ps_neem_plantation_list);\r\n        getSupportActionBar().setTitle(\"Neem Plantation List\");\r\n        fab=findViewById(R.id.fab);\r\n\r\n        fab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                Intent intent =new Intent(PS_NeemPlantationList.this,com.sanket.jubifarm.Livelihood.NeemPlantation.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/PS_NeemPlantationList.java	(date 1653654937992)
@@ -1,18 +1,28 @@
 package com.sanket.jubifarm.Livelihood;
 
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
 
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.View;
 import android.widget.ImageButton;
 
+import com.sanket.jubifarm.Livelihood.Adapter.NeemPlantationAdapter;
+import com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;
 import com.sanket.jubifarm.R;
+import com.sanket.jubifarm.data_base.SqliteHelper;
 import com.shamanland.fab.FloatingActionButton;
 
+import java.util.ArrayList;
+
 public class PS_NeemPlantationList extends AppCompatActivity {
 
   ImageButton fab;
+  RecyclerView rv_neem_Plantation;
+  SqliteHelper sqliteHelper;
+  ArrayList<PSNeemPlantationPojo> psNeemPlantationPojos;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -20,14 +30,32 @@
         setContentView(R.layout.activity_ps_neem_plantation_list);
         getSupportActionBar().setTitle("Neem Plantation List");
         fab=findViewById(R.id.fab);
+        initiliaze();
+        rv_neem_Plantation = findViewById(R.id.rv_neem_Plantation);
+
+
+        psNeemPlantationPojos = sqliteHelper.getneemplantation();
+        if(psNeemPlantationPojos.size()>0)
+        {
+            NeemPlantationAdapter neemPlantationAdapter = new NeemPlantationAdapter(this, psNeemPlantationPojos);
+            rv_neem_Plantation.setHasFixedSize(true);
+            rv_neem_Plantation.setLayoutManager(new LinearLayoutManager(this));
+            rv_neem_Plantation.setAdapter(neemPlantationAdapter);
+        }
 
         fab.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
 
-                Intent intent =new Intent(PS_NeemPlantationList.this,com.sanket.jubifarm.Livelihood.NeemPlantation.class);
+                Intent intent =new Intent(PS_NeemPlantationList.this, NeemPlantation.class);
                 startActivity(intent);
             }
         });
     }
+
+    private void initiliaze() {
+        psNeemPlantationPojos = new ArrayList<>();
+        rv_neem_Plantation = findViewById(R.id.rv_neem_Plantation);
+        sqliteHelper = new SqliteHelper(this);
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/NeemPlantation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;\r\nimport com.sanket.jubifarm.R;\r\nimport com.sanket.jubifarm.data_base.SqliteHelper;\r\n\r\nimport java.util.Calendar;\r\n\r\npublic class NeemPlantation extends AppCompatActivity {\r\n//    String [] sp_neemPlantation ={\"Select Neem Plantation\",\"Neem\"};\r\n    //  String [] sp_NeemCategory={\"Select Neem Category\"};\r\n    String [] sp_land={\"Select Land\"};\r\n    Button btn_submitDetls;\r\n    TextView CLICKIMAGE,GeoCoodinate;\r\n    Spinner spnNeemPlantation,spnLandSelection;\r\n    EditText et_plant_date;\r\n    SqliteHelper sqliteHelper;\r\n    PSNeemPlantationPojo psNeemPlantationPojo;\r\n    int mYear,mMonth,mDay,year,month,day;\r\n    DatePickerDialog datePickerDialog;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_neem_plantation);\r\n        getSupportActionBar().setTitle(\"Neem Plantation\");\r\n        //Button\r\n        btn_submitDetls=findViewById(R.id.btn_submitDetls);\r\n        //All Text View\r\n        CLICKIMAGE=findViewById(R.id.CLICKIMAGE);\r\n        GeoCoodinate=findViewById(R.id.GeoCoodinate);\r\n        //All Spinner\r\n //       spnNeemPlantation=findViewById(R.id.spnNeemPlantation);\r\n//        spnsub_NeemCategory=findViewById(R.id.spnsub_NeemCategory);\r\n        spnLandSelection=findViewById(R.id.spnLandSelection);\r\n        //All Edit Text\r\n        et_plant_date=findViewById(R.id.et_plant_date);\r\n\r\n        sqliteHelper = new SqliteHelper(getApplicationContext());\r\n\r\n\r\n        //All Spinner\r\n\r\n//        ArrayAdapter Neem_adapter=new ArrayAdapter(NeemPlantation.this, R.layout.spinner_list,sp_neemPlantation);\r\n//        Neem_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n//        spnNeemPlantation.setAdapter(Neem_adapter);\r\n\r\n//        ArrayAdapter Category_adapter=new ArrayAdapter(NeemPlantation.this,R.layout.spinner_list,sp_NeemCategory);\r\n//        Category_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n//        spnsub_NeemCategory.setAdapter(Category_adapter);\r\n\r\n        ArrayAdapter land_adapter=new ArrayAdapter(NeemPlantation.this, R.layout.spinner_list,sp_land);\r\n        land_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spnLandSelection.setAdapter(land_adapter);\r\n        //Date Picker\r\n        et_plant_date.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                et_plant_date.setError(null);\r\n                et_plant_date.clearFocus();\r\n                mYear=year;\r\n                mMonth=month;\r\n                mDay=day;\r\n\r\n                final Calendar c = Calendar.getInstance();\r\n                mYear = c.get(Calendar.YEAR); // current year\r\n                mMonth = c.get(Calendar.MONTH); // current month\r\n                mDay = c.get(Calendar.DAY_OF_MONTH); // current day\r\n                datePickerDialog = new DatePickerDialog(NeemPlantation.this,\r\n                        new DatePickerDialog.OnDateSetListener() {\r\n                            @Override\r\n                            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {\r\n                                et_plant_date.setText(\"\" + dayOfMonth + \"-\" + (monthOfYear + 1) + \"-\" + year);\r\n\r\n                            }\r\n                        }, mYear, mMonth, mDay);\r\n                datePickerDialog.show();\r\n                datePickerDialog.getButton(DatePickerDialog.BUTTON_NEGATIVE).setTextColor(Color.GRAY);\r\n                datePickerDialog.getButton(DatePickerDialog.BUTTON_POSITIVE).setTextColor(Color.parseColor(\"#ff173e6d\"));\r\n            }\r\n\r\n\r\n        });\r\n\r\n        btn_submitDetls.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                psNeemPlantationPojo=new PSNeemPlantationPojo();\r\n                psNeemPlantationPojo.setNeemPlantation_Image(CLICKIMAGE.getText().toString().trim());\r\n                psNeemPlantationPojo.setNeem_Plantation(spnNeemPlantation.getSelectedItem().toString().trim());\r\n//                psNeemPlantationPojo.setSub_Neem_Category(spnsub_NeemCategory.getSelectedItem().toString().trim());\r\n                psNeemPlantationPojo.setLand(spnLandSelection.getSelectedItem().toString().trim());\r\n                psNeemPlantationPojo.setPlantation_Date(et_plant_date.getText().toString().trim());\r\n                psNeemPlantationPojo.setGeo_Coordinates(GeoCoodinate.getText().toString().trim());\r\n                sqliteHelper.PSsaveHousehold(psNeemPlantationPojo);\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemPlantation.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemPlantation.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemPlantation.java	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/NeemPlantation.java	(date 1653721900813)
@@ -3,30 +3,46 @@
 import androidx.appcompat.app.AppCompatActivity;
 
 import android.app.DatePickerDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.os.Bundle;
+import android.provider.MediaStore;
+import android.util.Base64;
 import android.view.View;
 import android.widget.ArrayAdapter;
 import android.widget.Button;
 import android.widget.DatePicker;
 import android.widget.EditText;
+import android.widget.ImageView;
 import android.widget.Spinner;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.sanket.jubifarm.Livelihood.Model.PSNeemPlantationPojo;
 import com.sanket.jubifarm.R;
+import com.sanket.jubifarm.data_base.SharedPrefHelper;
 import com.sanket.jubifarm.data_base.SqliteHelper;
 
+import java.io.ByteArrayOutputStream;
 import java.util.Calendar;
+import java.util.Random;
 
 public class NeemPlantation extends AppCompatActivity {
 //    String [] sp_neemPlantation ={"Select Neem Plantation","Neem"};
     //  String [] sp_NeemCategory={"Select Neem Category"};
     String [] sp_land={"Select Land"};
+    String[] Neem ={"Select Neem"};
     Button btn_submitDetls;
-    TextView CLICKIMAGE,GeoCoodinate;
-    Spinner spnNeemPlantation,spnLandSelection;
+    TextView CLICKIMAGE,GeoCoodinate, Neem_Id;
+    private SharedPrefHelper sharedPrefHelper;
+    Spinner spnLandSelection;
+    private Context context = this;
     EditText et_plant_date;
+    String base64;
+    ImageView img_setimage;
+    private static final int CAMERA_REQUEST = 1888;
     SqliteHelper sqliteHelper;
     PSNeemPlantationPojo psNeemPlantationPojo;
     int mYear,mMonth,mDay,year,month,day;
@@ -37,16 +53,18 @@
         setContentView(R.layout.activity_neem_plantation);
         getSupportActionBar().setTitle("Neem Plantation");
         //Button
-        btn_submitDetls=findViewById(R.id.btn_submitDetls);
+        btn_submitDetls = findViewById(R.id.btn_submitDetls);
         //All Text View
-        CLICKIMAGE=findViewById(R.id.CLICKIMAGE);
-        GeoCoodinate=findViewById(R.id.GeoCoodinate);
+        CLICKIMAGE = findViewById(R.id.CLICKIMAGE);
+
+        img_setimage = findViewById(R.id.img_setimage);
+        GeoCoodinate = findViewById(R.id.GeoCoodinate);
         //All Spinner
- //       spnNeemPlantation=findViewById(R.id.spnNeemPlantation);
+        //       spnNeemPlantation=findViewById(R.id.spnNeemPlantation);
 //        spnsub_NeemCategory=findViewById(R.id.spnsub_NeemCategory);
-        spnLandSelection=findViewById(R.id.spnLandSelection);
+        spnLandSelection = findViewById(R.id.spnLandSelection);
         //All Edit Text
-        et_plant_date=findViewById(R.id.et_plant_date);
+        et_plant_date = findViewById(R.id.et_plant_date);
 
         sqliteHelper = new SqliteHelper(getApplicationContext());
 
@@ -61,9 +79,11 @@
 //        Category_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 //        spnsub_NeemCategory.setAdapter(Category_adapter);
 
-        ArrayAdapter land_adapter=new ArrayAdapter(NeemPlantation.this, R.layout.spinner_list,sp_land);
+        ArrayAdapter land_adapter = new ArrayAdapter(NeemPlantation.this, R.layout.spinner_list, sp_land);
         land_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         spnLandSelection.setAdapter(land_adapter);
+
+
         //Date Picker
         et_plant_date.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -71,9 +91,9 @@
 
                 et_plant_date.setError(null);
                 et_plant_date.clearFocus();
-                mYear=year;
-                mMonth=month;
-                mDay=day;
+                mYear = year;
+                mMonth = month;
+                mDay = day;
 
                 final Calendar c = Calendar.getInstance();
                 mYear = c.get(Calendar.YEAR); // current year
@@ -95,25 +115,60 @@
 
         });
 
+        CLICKIMAGE.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+                startActivityForResult(intent, CAMERA_REQUEST);
+            }
+        });
+
         btn_submitDetls.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
 
-                psNeemPlantationPojo=new PSNeemPlantationPojo();
-                psNeemPlantationPojo.setNeemPlantation_Image(CLICKIMAGE.getText().toString().trim());
-                psNeemPlantationPojo.setNeem_Plantation(spnNeemPlantation.getSelectedItem().toString().trim());
-//                psNeemPlantationPojo.setSub_Neem_Category(spnsub_NeemCategory.getSelectedItem().toString().trim());
-                psNeemPlantationPojo.setLand(spnLandSelection.getSelectedItem().toString().trim());
+                psNeemPlantationPojo = new PSNeemPlantationPojo();
+                psNeemPlantationPojo.setNeem_plantation_image(base64);
+                psNeemPlantationPojo.setLand_id(spnLandSelection.getSelectedItem().toString().trim());
                 psNeemPlantationPojo.setPlantation_Date(et_plant_date.getText().toString().trim());
-                psNeemPlantationPojo.setGeo_Coordinates(GeoCoodinate.getText().toString().trim());
+                psNeemPlantationPojo.setGeo_coordinates(GeoCoodinate.getText().toString().trim());
                 sqliteHelper.PSsaveHousehold(psNeemPlantationPojo);
 
+                Intent intent = new Intent(NeemPlantation.this, PS_NeemPlantationList.class);
+                startActivity(intent);
+
             }
         });
+    }
+
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (requestCode == CAMERA_REQUEST) {
+            Bitmap photo = (Bitmap) data.getExtras().get("data");
+            ByteArrayOutputStream stream = new ByteArrayOutputStream();
+            photo.compress(Bitmap.CompressFormat.JPEG, 100, stream);
+            byte[] bytes = stream.toByteArray();
+//
+            base64 = encodeTobase64(photo);
+            img_setimage.setImageBitmap(photo);
+        }
+
+    }
 
+    private String encodeTobase64(Bitmap image) {
+        ByteArrayOutputStream byteArrayOS = null;
+        try {
+            System.gc();
+            byteArrayOS = new ByteArrayOutputStream();
+            image.compress(Bitmap.CompressFormat.JPEG, 20, byteArrayOS);
+        } catch (OutOfMemoryError e) {
+            e.printStackTrace();
+            image.compress(Bitmap.CompressFormat.JPEG, 20, byteArrayOS);
+        }
+        return Base64.encodeToString(byteArrayOS.toByteArray(), Base64.NO_WRAP);
+    }
+}
 
 
 
 
-    }
-}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/btn_submit_background.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/buttan_shap.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/buttanshapbalck.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/buttanshape.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/callbutton.xml\" value=\"0.131\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/ic_baseline_sync_24.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/ic_farmer2.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/drawable/ic_land_holding.xml\" value=\"0.1475\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/accept_reject_dialog.xml\" value=\"0.10507246376811594\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_about_us.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_lang.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_plant_acivity.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_plant_growth.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_query.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_add_tranner.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_app_drawer.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_change_password.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_detail.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_detals_in_put.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_monitoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_planning.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_sale.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_sale_sub.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_disclaimer.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_deatil.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_recycle.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_farmer_registration_form.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_forgot_password.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_help_line.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_hepline_menu.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_home_acivity.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_land_details_custom_type.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_land_holding.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_login_screen.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_main_menu.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_monitoring.xml\" value=\"0.19010416666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_plantation.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_plant_growth_list.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_plant_view.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_post_plantation_acivity.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_land_holding.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_land_holding_list.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_land_holding_list2.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_plantation_list.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_synchronize.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_query_list.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_query_view.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_recycle_details_view.xml\" value=\"0.19010416666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_registration.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_registration_list.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_select_crop.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_skill_tracking.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_skill_tracking_list.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_soil_in_fo.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_splash_screen.xml\" value=\"0.215625\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sub_crop_planinig.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sub_monitoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sub_plantation.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_supplayer_otp.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_sync_data.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_trainning_survey_form.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_view_crop.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_view_land.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/add_crop_details.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/cropmonetoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/cropplaning_seccustom.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_crop_details.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_family_deatails.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_farmer_filter.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_inputordiring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_land_details.xml\" value=\"0.203125\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_plant_growth.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_ps_landholding.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_regsitration.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_skill_center_list.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_soil_in_fo.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_spinner.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_training.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/customlandholding.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/farmer_registration_custom.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/nav_header.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/spinner_list.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/sub_monitoring.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/sub_plantation_custom.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/subcroping_filter.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/toolbar.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/update_pic_layout.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/viewattendance.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/visit_remarks.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/Amit kumar yadav/AndroidStudioProjects/JubiFarm/app/src/main/res/menu/home.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_main_menu.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_neem_plantation.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml\" value=\"0.20416666666666666\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/.idea/misc.xml	(date 1653720181880)
@@ -97,6 +97,15 @@
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_main_menu.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_neem_plantation.xml" value="0.20416666666666666" />
         <entry key="..\:/Users/HP/Desktop/Indev Projects/JubiFarm.git/app/src/main/res/layout/activity_paryavaran_sakhi_home.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_monitoring.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_crop_planning.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_neem_plantation.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/activity_ps_neem_plantation_list.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/cropplaning_seccustom.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/cropplanninglist.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_crop_details.xml" value="0.20416666666666666" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/custom_ps_landholding.xml" value="0.33" />
+        <entry key="..\:/Users/Manish/AndroidStudioProjects/JubiFarm/app/src/main/res/layout/neemplantationresource.xml" value="0.2" />
       </map>
     </option>
   </component>
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.sanket.jubifarm\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.1\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    android {\r\n        lintOptions {\r\n            checkReleaseBuilds false\r\n            // Or, if you prefer, you can continue to check for errors in release builds,\r\n            // but continue the build even when errors are found:\r\n            abortOnError false\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'com.google.android.material:material:1.1.0'\r\n    implementation 'de.hdodenhof:circleimageview:3.0.1'\r\n\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.0'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.0'\r\n    implementation 'androidx.annotation:annotation:1.2.0'\r\n    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    implementation 'com.google.android.material:material:1.1.0'\r\n    implementation 'com.jaredrummler:material-spinner:1.3.1'\r\n    implementation 'com.caverock:androidsvg:1.2.1'\r\n\r\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\r\n    implementation 'com.google.code.gson:gson:2.6.2'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.+'\r\n    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    // Image cropper dependency\r\n    implementation 'com.github.yalantis:ucrop:2.2.2'\r\n    // Material dialog dependency\r\n    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'\r\n    //for OTP\r\n    implementation 'com.shamanland:fab:0.0.8'\r\n\r\n    //butter-knife dependencies\r\n    implementation 'com.jakewharton:butterknife:10.2.1'\r\n    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'\r\n    //multi-select spinner dependencies\r\n    implementation 'com.github.TongaonkarYash:multiselectspinner:1.0'\r\n    //multi select spinner dependencies\r\n    implementation 'com.github.pratikbutani:MultiSelectSpinner:08d324c987'\r\n    implementation 'com.toptoche.searchablespinner:searchablespinnerlibrary:1.3.1'\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n    //fuse dependencies\r\n    implementation 'com.google.android.gms:play-services-location:15+'\r\n    implementation 'com.google.android.gms:play-services-drive:15.0.1'\r\n    //zing aadhar card scanner\r\n    implementation 'com.journeyapps:zxing-android-embedded:2.0.1@aar'\r\n    implementation 'com.journeyapps:zxing-android-legacy:2.0.1@aar'\r\n    implementation 'com.journeyapps:zxing-android-integration:2.0.1@aar'\r\n    implementation 'com.google.zxing:core:3.0.1'\r\n    //glide dependencies\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\r\n    //picasso dependencies\r\n    implementation 'com.squareup.picasso:picasso:2.5.2'\r\n    // material dependencies\r\n    implementation 'com.google.android.material:material:1.2.0-alpha01'\r\n    implementation 'com.github.Liocoder24x7:Advanced-Spinner:v1.0'\r\n\r\n    implementation 'com.google.firebase:firebase-analytics:17.2.2'\r\n    implementation 'com.google.firebase:firebase-messaging:20.2.4'\r\n    implementation 'com.google.firebase:firebase-crashlytics:17.1.1'\r\n    implementation 'com.gauravk.audiovisualizer:audiovisualizer:0.9.1'\r\n\r\n    implementation 'com.github.HaarigerHarald:android-youtubeExtractor:master-SNAPSHOT'\r\n    implementation 'com.toptoche.searchablespinner:searchablespinnerlibrary:1.3.1'\r\n\r\n    implementation 'com.github.pratikbutani:MultiSelectSpinner:08d324c987'\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/app/build.gradle	(date 1653710606947)
@@ -50,6 +50,7 @@
     implementation 'androidx.annotation:annotation:1.2.0'
     implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
     implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
+    implementation 'org.jetbrains:annotations:15.0'
     testImplementation 'junit:junit:4.12'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
new file mode 100644
--- /dev/null	(date 1653709785562)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1653709785562)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetDropDown">
+    <runningDeviceTargetSelectedWithDropDown>
+      <Target>
+        <type value="RUNNING_DEVICE_TARGET" />
+        <deviceKey>
+          <Key>
+            <type value="SERIAL_NUMBER" />
+            <value value="PFBEORIBHAQ8NZR8" />
+          </Key>
+        </deviceKey>
+      </Target>
+    </runningDeviceTargetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2022-05-28T03:31:12.600465100Z" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"Embedded JDK\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/.idea/gradle.xml	(date 1653641624339)
@@ -14,7 +14,6 @@
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/sanket/jubifarm/Livelihood/Model/PSNeemPlantationPojo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sanket.jubifarm.Livelihood.Model;\r\n\r\npublic class PSNeemPlantationPojo\r\n{\r\n    private String Local_id;\r\n    private String id;\r\n    private String NeemPlantation_Image;\r\n    private String Neem_Plantation;\r\n    //   private String Sub_Neem_Category;\r\n    private String Land;\r\n\r\n    private String Plantation_Date;\r\n    private String Geo_Coordinates;\r\n\r\n    public String getLocal_id() {\r\n        return Local_id;\r\n    }\r\n\r\n    public void setLocal_id(String local_id) {\r\n        Local_id = local_id;\r\n    }\r\n\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getNeemPlantation_Image() {\r\n        return NeemPlantation_Image;\r\n    }\r\n\r\n    public void setNeemPlantation_Image(String neemPlantation_Image) {\r\n        NeemPlantation_Image = neemPlantation_Image;\r\n    }\r\n\r\n    public String getNeem_Plantation() {\r\n        return Neem_Plantation;\r\n    }\r\n\r\n    public void setNeem_Plantation(String neem_Plantation) {\r\n        Neem_Plantation = neem_Plantation;\r\n    }\r\n//\r\n//    public String getSub_Neem_Category() {\r\n//        return Sub_Neem_Category;\r\n//    }\r\n//\r\n//    public void setSub_Neem_Category(String sub_Neem_Category) {\r\n//        Sub_Neem_Category = sub_Neem_Category;\r\n//    }\r\n\r\n    public String getLand() {\r\n        return Land;\r\n    }\r\n\r\n    public void setLand(String land) {\r\n        Land = land;\r\n    }\r\n\r\n\r\n\r\n    public String getPlantation_Date() {\r\n        return Plantation_Date;\r\n    }\r\n\r\n    public void setPlantation_Date(String plantation_Date) {\r\n        Plantation_Date = plantation_Date;\r\n    }\r\n\r\n    public String getGeo_Coordinates() {\r\n        return Geo_Coordinates;\r\n    }\r\n\r\n    public void setGeo_Coordinates(String geo_Coordinates) {\r\n        Geo_Coordinates = geo_Coordinates;\r\n    }\r\n\r\n    private static final String TABLE_NAME = \"Ps_Neem_Plantation\";\r\n    private static final String COLUMN_LOCALID=\"localid\";\r\n    private static final String COLUMN_ID=\"id\";\r\n    private static final String COLUMN_NEEMPLANTATION_IMAGE= \"NeemPlantation_Image\";\r\n    private static final String COLUMN_NEEM_PLANTATION = \"Neem_Plantation\";\r\n    //    private static final String COLUMN_SUB_NEEM_CATEGORY = \"Sub_Neem_Category\";\r\n    private static final String COLUMN_LAND = \"Land\";\r\n    private static final String COLUMN_PLANTATION_DATE = \"Plantation_Date\";\r\n    private static final String COLUMN_GEO_COORDINATES = \"Geo_Coordinates\";\r\n\r\n\r\n\r\n    public static final String CREATE_TABLE = \"CREATE TABLE \" + TABLE_NAME +\"(\"\r\n            + COLUMN_LOCALID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n            +COLUMN_ID + \" INTEGER, \"\r\n            + COLUMN_NEEMPLANTATION_IMAGE + \" TEXT, \"\r\n            + COLUMN_NEEM_PLANTATION+ \" TEXT, \"\r\n//            + COLUMN_SUB_NEEM_CATEGORY + \" TEXT, \"\r\n            + COLUMN_LAND + \" TEXT, \"\r\n            + COLUMN_PLANTATION_DATE + \" TEXT, \"\r\n            + COLUMN_GEO_COORDINATES + \" TEXT \"\r\n            + \")\";\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/PSNeemPlantationPojo.java b/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/PSNeemPlantationPojo.java
--- a/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/PSNeemPlantationPojo.java	(revision 72f30536d5c025c4d22ce487d1009f6e1fad9c2e)
+++ b/app/src/main/java/com/sanket/jubifarm/Livelihood/Model/PSNeemPlantationPojo.java	(date 1653708676306)
@@ -4,13 +4,11 @@
 {
     private String Local_id;
     private String id;
-    private String NeemPlantation_Image;
-    private String Neem_Plantation;
-    //   private String Sub_Neem_Category;
-    private String Land;
-
-    private String Plantation_Date;
-    private String Geo_Coordinates;
+    private String neem_plantation_image;
+    private String land_id;
+    private String neem_id;
+    private String plantation_Date;
+    private String geo_coordinates;
 
     public String getLocal_id() {
         return Local_id;
@@ -28,75 +26,64 @@
         this.id = id;
     }
 
-    public String getNeemPlantation_Image() {
-        return NeemPlantation_Image;
+    public String getNeem_plantation_image() {
+        return neem_plantation_image;
     }
 
-    public void setNeemPlantation_Image(String neemPlantation_Image) {
-        NeemPlantation_Image = neemPlantation_Image;
+    public void setNeem_plantation_image(String neem_plantation_image) {
+        this.neem_plantation_image = neem_plantation_image;
     }
 
-    public String getNeem_Plantation() {
-        return Neem_Plantation;
-    }
 
-    public void setNeem_Plantation(String neem_Plantation) {
-        Neem_Plantation = neem_Plantation;
+    public String getLand_id() {
+        return land_id;
     }
-//
-//    public String getSub_Neem_Category() {
-//        return Sub_Neem_Category;
-//    }
-//
-//    public void setSub_Neem_Category(String sub_Neem_Category) {
-//        Sub_Neem_Category = sub_Neem_Category;
-//    }
 
-    public String getLand() {
-        return Land;
+    public void setLand_id(String land_id) {
+        this.land_id = land_id;
     }
 
-    public void setLand(String land) {
-        Land = land;
+    public String getNeem_id() {
+        return neem_id;
     }
 
-
+    public void setNeem_id(String neem_id) {
+        this.neem_id = neem_id;
+    }
 
     public String getPlantation_Date() {
-        return Plantation_Date;
+        return plantation_Date;
     }
 
     public void setPlantation_Date(String plantation_Date) {
-        Plantation_Date = plantation_Date;
+        this.plantation_Date = plantation_Date;
     }
 
-    public String getGeo_Coordinates() {
-        return Geo_Coordinates;
+    public String getGeo_coordinates() {
+        return geo_coordinates;
     }
 
-    public void setGeo_Coordinates(String geo_Coordinates) {
-        Geo_Coordinates = geo_Coordinates;
+    public void setGeo_coordinates(String geo_coordinates) {
+        this.geo_coordinates = geo_coordinates;
     }
 
-    private static final String TABLE_NAME = "Ps_Neem_Plantation";
-    private static final String COLUMN_LOCALID="localid";
+    private static final String TABLE_NAME = "ps_neem_plantation";
+    private static final String COLUMN_LOCAL_ID="local_id";
     private static final String COLUMN_ID="id";
-    private static final String COLUMN_NEEMPLANTATION_IMAGE= "NeemPlantation_Image";
-    private static final String COLUMN_NEEM_PLANTATION = "Neem_Plantation";
-    //    private static final String COLUMN_SUB_NEEM_CATEGORY = "Sub_Neem_Category";
-    private static final String COLUMN_LAND = "Land";
-    private static final String COLUMN_PLANTATION_DATE = "Plantation_Date";
-    private static final String COLUMN_GEO_COORDINATES = "Geo_Coordinates";
+    private static final String COLUMN_NEEM_PLANTATION_IMAGE= "neem_plantation_image";
+    private static final String COLUMN_LAND_ID = "land_id";
+    private static final String COLUMN_NEEM_ID = "neem_id";
+    private static final String COLUMN_PLANTATION_DATE = "plantation_date";
+    private static final String COLUMN_GEO_COORDINATES = "geo_coordinates";
 
 
 
     public static final String CREATE_TABLE = "CREATE TABLE " + TABLE_NAME +"("
-            + COLUMN_LOCALID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
+            + COLUMN_LOCAL_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
             +COLUMN_ID + " INTEGER, "
-            + COLUMN_NEEMPLANTATION_IMAGE + " TEXT, "
-            + COLUMN_NEEM_PLANTATION+ " TEXT, "
-//            + COLUMN_SUB_NEEM_CATEGORY + " TEXT, "
-            + COLUMN_LAND + " TEXT, "
+            + COLUMN_NEEM_PLANTATION_IMAGE + " TEXT, "
+            + COLUMN_LAND_ID + " TEXT, "
+            + COLUMN_NEEM_ID + " TEXT, "
             + COLUMN_PLANTATION_DATE + " TEXT, "
             + COLUMN_GEO_COORDINATES + " TEXT "
             + ")";
Index: app/src/main/res/layout/neemplantationresource.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/neemplantationresource.xml b/app/src/main/res/layout/neemplantationresource.xml
new file mode 100644
--- /dev/null	(date 1653730684798)
+++ b/app/src/main/res/layout/neemplantationresource.xml	(date 1653730684798)
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical"
+    app:cardBackgroundColor="#ECECEC"
+    android:layout_height="wrap_content">
+
+    <androidx.cardview.widget.CardView
+        android:id="@+id/cv_student_listing"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dp"
+        app:cardBackgroundColor="#ECECEC"
+        android:layout_marginHorizontal="10dp"
+        app:cardCornerRadius="8dp"
+        app:cardElevation="8dp">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:padding="3dp"
+            android:orientation="horizontal">
+
+
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_gravity="center"
+                android:orientation="vertical">
+
+                <ImageView
+                    android:id="@+id/img_setimage"
+                    android:layout_width="90dp"
+                    android:layout_height="90dp"
+                    android:src="@drawable/neem"
+                    android:visibility="visible" />
+
+
+
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:padding="5dp"
+                android:orientation="vertical">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center_vertical"
+                    android:orientation="horizontal"
+                    android:weightSum="2">
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1.1"
+                        android:text="@string/Land_ID"
+                        android:layout_marginLeft="5dp"
+                        android:textSize="12sp" />
+
+                    <TextView
+                        android:id="@+id/Land_id"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="0.9"
+                        android:text=""
+                        android:textColor="@color/black"
+                        android:textSize="13dp" />
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center_vertical"
+                    android:layout_marginTop="5dp"
+                    android:orientation="horizontal"
+                    android:weightSum="2">
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1.1"
+                        android:layout_marginLeft="5dp"
+                        android:text="Neem Id"
+                        android:textSize="12sp" />
+
+                    <TextView
+                        android:id="@+id/Neem_Id"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="0.9"
+                        android:text=":   "
+                        android:textColor="@color/black"
+                        android:textSize="13dp" />
+
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center_vertical"
+                    android:layout_marginTop="5dp"
+                    android:orientation="horizontal"
+                    android:weightSum="2">
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1.1"
+                        android:layout_marginLeft="5dp"
+                        android:text="@string/Geo_Cordinates"
+                        android:textSize="12sp" />
+
+                    <TextView
+                        android:id="@+id/geo_cordinate"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="0.9"
+                        android:hint="15.345243, 12.55.3452"
+                        android:textColor="@color/black"
+                        android:textSize="13dp" />
+
+                </LinearLayout>
+
+
+
+            </LinearLayout>
+
+
+        </LinearLayout>
+
+
+    </androidx.cardview.widget.CardView>
+
+
+</LinearLayout>
\ No newline at end of file
